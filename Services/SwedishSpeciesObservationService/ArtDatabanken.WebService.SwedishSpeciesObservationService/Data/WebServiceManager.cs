using System;
using System.Collections.Generic;
using ArtDatabanken.Data;
using ArtDatabanken.Database;
using ArtDatabanken.Security;
using ArtDatabanken.WebService.Data;
using ArtDatabanken.WebService.SwedishSpeciesObservationService.Database;

namespace ArtDatabanken.WebService.SwedishSpeciesObservationService.Data
{
    /// <summary>
    /// Class that handles information related to 
    /// the web service that this project is included into.
    /// </summary>
    public class WebServiceManager : IWebServiceManager
    {
        /// <summary>
        /// Encryption key that is used in production.
        /// </summary>
        public String Key
        {
            get
            {
                CipherString cipherString;
                String key;

                if (Configuration.InstallationType == InstallationType.Production)
                {
                    cipherString = new CipherString();
                    switch (Environment.MachineName)
                    {
                        case "ARTSERVICE2-1": // New production web service server.
                            key = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPGBJALGDDHDONKEGJOECJFBANDBBPEGFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAOKLMHMDMMONNOJGPCNJDPFCACCCNIFBGAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAALNHKGCNKLHHDJMODNNMBMCLOMNDBKHAMIIAAAAAADCIAFKIMAOBEIBNOJNJMDLGKDFLEJJOIEDJIMGNNLCKHJOKCDEIHJFFOAEPNODFKMOLBKOKAMMEFGMEAJMHBOOALFMOJPINGFIPJEMBMLODHAAPEGCGHBKMBBPHJCPPJJJHAEEOJIMOGEPGANGNDKLOIAHNOILMJJPBPEPHCFGFGHHKKBDOAHBGBAFCNNFCIAAIONDHPLNODMHGFEAIDKCGPHIELJODFIGOGGOAFEDLGPNNBNFOCIIHGPGDCEEMMEOJPOEPFBFDJIDBABEAAAAAAPCBICDAGIDCEFIJKIPKDJODFHACHPJBMHFLGGEBM";
                            break;

                        case "ARTSERVICE2-2": // New production web service server.
                            key = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPGBJALGDDHDONKEGJOECJFBANDBBPEGFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAGHLOKCBPJOGCPCACIGAHFJPIAJNEACCKAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAALGCINKCJHICFDKPEENOIKCABGLEAAPHFIIAAAAAAHPHAOHHELAHAFCONHIMDNEJNDPLHNJKGGDICCAHKOOJJMMLIDBPNDBIHJNDFAGOCBAEKOCOLFKJIECNKEKHEMKPPENAJLHNNCPOAEKMNMPOKHEGBFFDHNNPILMOIGKLBBJMEMMPMPHGHBCHNODKCKKLENKLOCNLIOIDAKOFOPBFLMIPOIHKCHEKOEKDGEHCJHFJCCAOOEMDAPPBMOCLBINCCNJHDIGPBFAAAMAMPAOFFGGPNDFKJELKINALNLNJLHGHFKMACBCJIJJPFBEAAAAAAIBPFOMBIAALDGGDMMIPKEKJCHILFMMFOMJIGFKMC";
                            break;

                        case "SILURUS2-1": // Production Web Server
                            key = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAKCDIPIMNCHNKMLEDLNNLHANAPIJOPGEOAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAHOMJBFJPANALLOCGCDCEKKBNGHMNCAJDAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAABFBLKHPMCEKHABONBHJGLDIDNDNPNMJMIIAAAAAACMJIPPGMHCCBLFFPLOMMJIDGBHKOMMODAKAEMMMPPFLBMMHOEOJOFLBGNBBNBOKDEBNBLHJIBIAILNLHLJELABJMBJLGKBLJKKHOAPFBMEDIBPKFOAKMEBMIDHOLLDCMNOPAJNOGPLIIJBIEGMBBKMLFEJAAJMCEMJMAOHPDGHEIKKHKFMMFLABLCJDANILJLJOCHKCIPFFNMBCFCHJPCDPPNGIGEHNBNNGGGHHJBHGPPCCPPAMEIDEJEFDJMLMLCMKCAGPLCHBMAKPDBEAAAAAAGHGNINANIGJFPEIIFEENNLPHJLJPDACMDJOODIHA";
                            break;

                        case "SILURUS2-2": // Production Web Server
                            key = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAADJCPFBPDFGGAJPECKJKGADMIIFAPGPOLAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAMFEJFEPPDJFPJIPHIIDFFAAHMPDJFFFDAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAKANDFJNLHPIDGONMILEPKOBMGDHBAOCPIIAAAAAAAHNIKACCLDNLMMDGNMNIMAJLBFDKONDIGPLHPNAPOJHDILAGCCJDEDLCEGJMELLDBKGPALKKENPDCOFEHOLDOJNHOHEPMBDMGAHBNFNGIMACHOIJOCLFNNHAEEGOLOONNMPAMCKBAMALEJKNKHBPEMOGNAOFNFMJJGPKFLJKCKGCDGFNLEAEMCPIIKLDIANHJJFIPGMDPEPDHMKJPICBBIHOKHBFOCLHBHHNHPLGPNGEDKMAJLJNLHIFPBJEDHDBJMCHCENLMJDIOHKABEAAAAAAEOPFKDFPKOGGBOIMEBIGBNOHAKOLHNBCAPMGJBBB";
                            break;

                        case "SLU011837": // 
                            key = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPFOBOEOIJOPHGCEFJGCCBMFMHLOBJJLJAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAAHJHIGJHABCKDNEPNACNMANJFFGBHHMJAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAEFECPHDLDEIBMCHACGDJKLGHIKBEEMMMIIAAAAAAFLJLJPFGBPFOPBEDJEBGLNNMADIIACCFINPMBMOMNDBAONBEEJGCLLABAAKILLIGAFJFNGFDHICMMGDBDGCPDBHAMDPJFMANMFJMNEDDAJONFCNNLIOOFNCBKGJHFOKHEIKCJHAEHGFEOOOKDOCOCEAPMHJIBOAOCJEEHPBMLAKIJBEGOCLKNGOHCJNIEEGJOPMGCPEOLEBOJDMMIMKNMBHKBMBCNDAEBKCJABKBIFIGHCHIBONGCHIBCHNPDDOPIJFNEPJDADOBFPOPBEAAAAAAELOCKGKOGHFODKMAKLGDJMJIKODAIKHHHNDHOOCN";
                            break;

                        case "SEA0105WTRD2": // 
                            key = null;
                            break;

                        default:
                            throw new ApplicationException("Unknown web server " + Environment.MachineName);

                    }

                    return cipherString.DecryptText(key);
                }

                return null;
            }
        }

        /// <summary>
        /// Web service user name in UserService.
        /// </summary>
        public String Name
        {
            get
            {
                return ApplicationIdentifier.SwedishSpeciesObservationService.ToString();
            }
        }

        /// <summary>
        /// Web service password in UserService.
        /// </summary>
        public String Password
        {
            get
            {
                CipherString cipherString;
                String password;

                cipherString = new CipherString();
                switch (Environment.MachineName)
                {
                    case "ARTFAKTA-DEV": // Team Species Fact test server.
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPEAJKFJCOJJILJEMJOGHHPGGFJAANOKIAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAKMBJCJFIBJFNDGINMMAKLHJEKOOCEGKDAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAEKLIPBNCEIPCKMJFMBDJAJHDPDOEKJJPCAAAAAAAKPLMNEIMFOFFMHFEFIHKIHIEGPKOHMKDPLHJLDDBBKAKCIFPFJLPPFMDCBLMGOKPBEAAAAAAEDHMDDBIGFAIIOJJBLAIEKJJPFJBPLCLOBGMMKHF";
                        break;

                    case "ARTSERVICE2-1": // New production web service server.
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPGBJALGDDHDONKEGJOECJFBANDBBPEGFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAIFMKKCOMLIDHOAPJBAKNJPCEHCENBOHIAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAPKDDJKOKOFLGABLPCEPLMAPODFJKOOEMCAAAAAAAPACGFJCLNHBGHGNIMPCEKKOBDAIIAKLNENICJDJCDMDCJKOKNEMDMOKKGFKKGOLKBEAAAAAALHNFJFDPKBJOFDNOIJBHGIEMCJHIBAMAKMEBGEAB";
                        break;

                    case "ARTSERVICE2-2": // New production web service server.
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPGBJALGDDHDONKEGJOECJFBANDBBPEGFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAMKCMICEFKKMENAAGMMDEJMMHFFDCLJIGAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAOCEPLFOKDNEFDLPOKHAOLBKHGLJBJPBNCAAAAAAABOBFJCKIGKMIDEFPDOFMEHKAMMLCEFFLIAEEBNFDHNPMPILICHFKGCPCMGCNBIOHBEAAAAAACHMJFCCDOIHKBAKFJFIGKBCLMPFOKGIHBHNFGEFJ";
                        break;

                    case "MONESES-DEV": // Test server
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAEAFPECBBEFEHIKEGLFFDMHECEONJDGANAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAODPBOOGOJEDJHEDCBCNFJCAPAJDCCJMFAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAGEPJHCIKDLILEGKPLDCPICIPPGLCDPGDCAAAAAAAMBMMOCEEDFGFAMIKHLOJECCBIKOHGAJGJKNIMJMLJDHGPLDOPJOICNDGEAFNHPPIBEAAAAAABEBGDMMCILDLDJCOOBDBGDFGHCAABOFNLELIEHLH";
                        break;

                    case "MONESES-ST": // System test server.
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPEAJKFJCOJJILJEMJOGHHPGGFJAANOKIAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAFJEDPNBNMHDDPMDFNDELDNCHHOKNGMKLAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAPCOCFNMGEPEHOKNJCKJDFOHNOFGLDKICCAAAAAAAJIILKGNLFCHEHIJGKIMNHBAPKMPICLHOHOFNNMHGDGPNJAGLGDMIJNPJBBGOMBANBEAAAAAALGKMCAJECIDHDFDDAPJPNFLPINLDFBCCJLBKNAOK";
                        break;

                    case "SILURUS2-1": // Production Web Server
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAABKFCOBBPIBEMBHEOJGJDNNOHKDPHDPJKAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAABGCFHPJOFJIAJMKNGAJGMKBFAOMLMEIJAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAPBIIMBIBOPMMPNDKCPFLODKKEKDMMECBCAAAAAAAPIGOPINMGMNCNAPDMLNAKAHMEAJFLHONHIMDJNBCOHFNEONAABECCKHLKHCKEKCHBEAAAAAAPMOAMKFHFPICDIBJNAHFEODOIBBCFOMDAEHDAJOE";
                        break;

                    case "SILURUS2-2": // Production Web Server
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAMLHPLFJBLJNKIBEPJGEAILJLHMPOLAAGAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAHHCKCCNBPOMPPILKDOBLENMCOKBILANBAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAMIPHELGLCKODBMNAGAJPMBLGPPLEBBGJCAAAAAAAHBEOOOCOIJHAMJPNNPECGJHCFMKMJDPGNDPPMHAHDDEABHJLOGCPBLKHNBEKMIMBBEAAAAAANAJCACMMODIIPLKECPCFBAPGIBMJIJEEOGCLFHOA";
                        break;

                    case "SLU011837": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPFOBOEOIJOPHGCEFJGCCBMFMHLOBJJLJAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAAPJOIBLDFFOOBBINFNMBILCFNFINNDLDAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAHHPDHGPNDNEBAJNIFICNLPANHAFKEKECCAAAAAAALBBKFHLFMHODELEHMPEMNFCEOLDBLLGNGLJIPBDIDIHIEEDMPADJPHPMEAKDEMMDBEAAAAAAFENPPPKLEBPKAGAOMHKNFLLMCBECJNGCOMMBHGOE";
                        break;

                    case "SLU002760": // 
                        password = null; // "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAABAKAMJGGBJHDJCEBIMHBCBNNBPAODGGFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAABBGINBNFNGFPLPNPMGHKDBGIKHENCCKNAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAHILFGOBHDKLDAMOACBPFLBIBGHABDHCGCIAAAAAADGJLPMFINGKDJDLJIDJLMLGDEJILEELMKHEMADEGBHFHHEGICMNMDLLGPJJCNMBCCKGFNPIKNHNLNOMCBEAAAAAANEOJGPJGDMELALOIEOFIIJBLLFEIHJOOCBCLGFPI";
                        break;

                    case "SLU003657": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAADDFLLGAELOMBMKEHKAFIJHEEFMCFCNKCAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAANNJKJDJDCNLHOHFLKHDJGJOHKLBDOBHPAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAANIIHNAEMCEBFLBHCALGICFELPJLLCNMGCAAAAAAAIMCHCKDHFFHBNJFLDAHOHPGNIJKDNFNBKPMHFPPLJEGGHADBPBMFJBNNKDPFIKMBBEAAAAAABNOHLEOMEBBPLCLEGMLNKDNDLJJBHCNNNNLLIKDK";
                        break;

                    case "MATLOUMBP15W7": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAIHHBOLDCMPGJLKEIKIKMJDLHDLJKKCIDAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAACJBBCPCEJNPGOMPLFEGEILPHOMKCGOMEAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAGMEMAAJFBFEEIIAKICNKIFOHLPMOPGIGCAAAAAAAOCBCMJANFJPDIGCMOCCHDNICBJDMNGPMMHFFDGHIOFDFIOEJMELCNIBHMFIJPFOLBEAAAAAAMCFPJDJENMKILDCJDILCOGEAHABGNBIJCCPJKCIG";
                        break;

                    case "MATLOU8470WW7": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAALHCOFDGPCNONAMEDJDCIAMKCOKLCFBPFAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAFMNLNEPODPABEBBLHDMNNLLDLKBGDGBHAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAOFJNDCACIOJDJGNFPJBDNKOFHNNFEDOACAAAAAAAKONIEHBGGLGMIDJFNCOBDIMELAAHDDAHCJFFONBECCDCCCBJMNBPNGGFCAHKGLIOBEAAAAAAPLFLAEFMICKCDHDDBFOKEOKDOKGICAOCMBDNDLNK";
                        break;

                    case "SLU003354": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAOOAEJFIJMOIAMMEBIDIAGCFCCMDBGGBBAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAOGKAALKKPKILJJPDDHPBADOLPNFPBJJIAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAKCBJBCGGOEOMECBPAKOJKFECEIMHMBHOCAAAAAAAGBNLAKLBMPOBDKKHHICKKLDEKGDNCBGEKMGGLANPHAKAOAHADIAJHAGNPEHBGEAFBEAAAAAAMCLAAGKIICGJKLNOPCMMGDGBAICAIJEIECJMAIMN";
                        break;

                    case "SLU002759": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAEJCCAMNLPCOMGDEGLLEEMKLCCBJHDGEKAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAMOLKFDHIOOPANNADAOOGHCLOKOIDDCDLAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAOMKJEPBIFDEBHHFCGGAPMELCEELPGAHECAAAAAAAHLBAMHHKIGGIPOHPFGDNNANIOHJFCCKKCGKHAOMHDLOPGDPLPNFGGFIMHFKFPPIEBEAAAAAANGGLHLBJNHCBGFHLKGLKOAKFMPOKBOHGKOFJHNPF";
                        break;

                    case "SEA0105WTRD2": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAABCDHLPKLHGBGOOEJKJIFHDOAFNEEFMNKAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAADHHODJPIHGLJCNANKHAPKEANOFOHNMNKAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAFILAEKKFMGIHJPLMIAKAFALEPOFDLLHPCAAAAAAAFLLALBNDGOCONBJEJFGJMAMNDNFECGIHHOANCKMHJLLEMCIJBOCBLKBAMADIJBNPBEAAAAAAMCHHGJFJFIOACCAHPGOHODIAECNDNCNCDAFDCBFD";
                        break;                    

                    case "MARKAC8560WW7": //                     
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAMJAKAEAFNCBCNCEJIINGJGKEBOKONPNLAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAADNGLKJJKNFBLHOJEBLHBNOCNHCNAFKEOAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAAFAMHPMPHKILJCHMGAIHNEEPGOEPHEMPCAAAAAAAFAJJAPOODKNIMAOIIOEDIDIPGNAGEBMPNOOGMOKGHCKAAELIADDAPJNEECGLKFKMBEAAAAAALAIDLLPLHJEGGDLIJDJIAOKOAJOFMBOEPLOEONBL";
                        break;

                    case "TFSBUILD": // TFS
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAJDEHMIDHELNCKKEHLHOKFNFFKPMHAKNDAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAFJLGGCHIHLKDLIGJJBMJGAMNCLADLIOEAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAEKMJIJJDOJFBHNMALJANLIHKIDPJECNJCAAAAAAAJCMMKHHDBFGNGLOGEGPCKABAMGMHLDOOIKJBGHGFJOGPGAKDIBMCGNILNGOKLDCBBEAAAAAAEMJJIAEHFMIOHEMEMHLEFEOOBNOMBGJDEBJKBBPL";
                        break;

                    case "SLU011896": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAJMDHKKKEGEILFAEHKLLJKBJIAAMPBPCDAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAEKAKBNFMOGLHPMHIDPEIDCHHDBIDGGCMAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAIKAJPNNMFMLCBKODHHAPKFFOCBBJBCCACAAAAAAANCAHAHNALAFPGJPINMDFNAEJMFDFNHOOAFDNJFAMELCJGHBEFHKPGCKCDLIPDACHBEAAAAAACBAGGEMAFHOFKNPGIJLKMKIAAPJDAPGPAOFHGGGH";
                        break;

                    case "SLW-DEV": // Team Two Blueberries test server.
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAAPEAJKFJCOJJILJEMJOGHHPGGFJAANOKIAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAAIMOOBIFNGDMPKJGAFBOAEPNNFGLPCOJFAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAACKMCELNFHKJHNNGLNHGJKNNMLJCGOPIDCAAAAAAAIDJEHIFMMKGLGEMCBOEGMFBBNGNNBJJFGNDMODGIOLCMICAIKEFAGAGOCMLOAFCIBEAAAAAAMDGLOJIBKBILDIAOEEBBLAOGOLMJAMFFGEJKJJLJ";
                        break;

                    case "SLU011161": // 
                        password = "ABAAAAAANAIMJNNPABBFNBBBIMHKAAMAEPMCJHOLABAAAAAANLBMDHALKGCLEPEDJJCOHPMCCNMJKLBPAEAAAAAAACAAAAAAAAAAADGGAAAAMAAAAAAABAAAAAAABGAOCONLPPODCCDDJMBKILEFACJEFADGAAAAAAAAAEIAAAAAKAAAAAAABAAAAAAAHEFAKPCBOJLPPKCBALCOHFIGJIDPDBKJCAAAAAAAPGHHOAKKJIDPIGCDHJJJIPFKICGIPPJADIPKGIMCJNAOBKDNJHICPBGCKJFDONBKBEAAAAAANJJDBAMHIONILMMAIBCCGGKPPNEDOAPEMIBBLFHD";
                        break;
                    default:
                        throw new ApplicationException("Unknown web server " + Environment.MachineName);

                }
                return cipherString.DecryptText(password);
            }
        }

        /// <summary>
        /// Get status for database.
        /// </summary>
        private void GetDatabaseStatus(Dictionary<Int32, List<WebResourceStatus>> status)
        {
            Boolean ping;
            String address, informationEnglish, informationSwedish;
            WebResourceStatus resourceStatus;

            address = null;

            try
            {
                address = SpeciesObservationServer.GetAddress();
                informationEnglish = null;
                informationSwedish = null;
                using (SpeciesObservationServer database = new SpeciesObservationServer())
                {
                    ping = database.Ping();
                }
                if (!ping)
                {
                    informationEnglish = WebService.Settings.Default.DatabaseStatusErrorEnglish;
                    informationSwedish = WebService.Settings.Default.DatabaseStatusErrorSwedish;
                }
            }
            catch (Exception exception)
            {
                ping = false;
                informationEnglish = WebService.Settings.Default.DatabaseCommunicationFailureEnglish + " " +
                                     WebService.Settings.Default.ErrorMessageEnglish + " = " + exception.Message;
                informationSwedish = WebService.Settings.Default.DatabaseCommunicationFailureSwedish + " " +
                                     WebService.Settings.Default.ErrorMessageSwedish + " = " + exception.Message;
            }
            resourceStatus = new WebResourceStatus();
            resourceStatus.AccessType = WebService.Settings.Default.ResourceAccessTypeReadSwedish;
            resourceStatus.Address = address;
            resourceStatus.Information = informationSwedish;
            resourceStatus.Name = DatabaseName.SwedishSpeciesObservation.ToString();
            resourceStatus.ResourceType = WebServiceBase.GetResourceType(ResourceTypeIdentifier.Database,
                                                                         (Int32)(LocaleId.sv_SE));
            resourceStatus.Status = ping;
            resourceStatus.Time = DateTime.Now;
            status[(Int32)(LocaleId.sv_SE)].Add(resourceStatus);

            resourceStatus = new WebResourceStatus();
            resourceStatus.AccessType = WebService.Settings.Default.ResourceAccessTypeReadEnglish;
            resourceStatus.Address = address;
            resourceStatus.Information = informationEnglish;
            resourceStatus.Name = DatabaseName.SwedishSpeciesObservation.ToString();
            resourceStatus.ResourceType = WebServiceBase.GetResourceType(ResourceTypeIdentifier.Database,
                                                                         (Int32)(LocaleId.en_GB));
            resourceStatus.Status = ping;
            resourceStatus.Time = DateTime.Now;
            status[(Int32)(LocaleId.en_GB)].Add(resourceStatus);
        }

        /// <summary>
        /// Get status for this web service.
        /// </summary>
        /// <returns>Status for this web service.</returns>       
        public Dictionary<Int32, List<WebResourceStatus>> GetStatus()
        {
            Dictionary<Int32, List<WebResourceStatus>> status;

            status = new Dictionary<Int32, List<WebResourceStatus>>();
            status[(Int32)(LocaleId.en_GB)] = new List<WebResourceStatus>();
            status[(Int32)(LocaleId.sv_SE)] = new List<WebResourceStatus>();
            GetDatabaseStatus(status);
            this.GetUserServiceStatus(status);
            if (this.IsUserServiceStatusOk(status))
            {
                this.GetGeoReferenceServiceStatus(status);
                this.GetTaxonServiceStatus(status);
                this.GetTaxonAttributeServiceStatus(status);
            }

            return status;
        }
    }
}
