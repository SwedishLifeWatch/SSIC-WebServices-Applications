/// <reference path="../extjs-4.2.1/ext-all.js" />


/*Generated by SharpKit 5 v4.30.0000*/
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
Ext.define("AnalysisPortal.WFS.Formula.FormulaOperation",
{
    constructor: function ()
    {
    }
});
Ext.define("AnalysisPortal.WFS.Formula.ComparisionOperation", {extend: "AnalysisPortal.WFS.Formula.FormulaOperation"});
Ext.define("AnalysisPortal.WFS.Formula.BinaryComparisionOperation",
{
    extend: "AnalysisPortal.WFS.Formula.ComparisionOperation",
    constructor: function (leftOperand, rightOperand, operationType)
    {
        this.LeftOperand = null;
        this.RightOperand = null;
        this.OperationType = AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterThan;
        this.callParent();
        this.LeftOperand = leftOperand;
        this.RightOperand = rightOperand;
        this.OperationType = operationType;
    },
    WFSRepresentation: function ()
    {
        var str;
        if (this.OperationType == AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.Like)
        {
            var strOperationType = "PropertyIsLike";
            var strLeftOperand = this.LeftOperand.WFSRepresentation();
            var strRightOperand = this.RightOperand.WFSRepresentation();
            str = "<PropertyIsLike wildcard=\'*\' singleChar=\'.\' escape=\'!\'>" + strLeftOperand + strRightOperand + "</" + strOperationType + ">";
            return str;
        }
        else
        {
            var strOperationType = this.GetWFSOperationTypeString();
            var strLeftOperand = this.LeftOperand.WFSRepresentation();
            var strRightOperand = this.RightOperand.WFSRepresentation();
            str = "<" + strOperationType + ">" + strLeftOperand + strRightOperand + "</" + strOperationType + ">";
            return str;
        }
    },
    GetWFSOperationTypeString: function ()
    {
        switch (this.OperationType)
        {
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterThan:
                return "PropertyIsGreaterThan";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessThan:
                return "PropertyIsLessThan";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterOrEqualTo:
                return "PropertyIsGreaterThanOrEqualTo";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessOrEqualTo:
                return "PropertyIsLessThanOrEqualTo";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.NotEqualTo:
                return "PropertyIsNotEqualTo";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.EqualTo:
                return "PropertyIsEqualTo";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.Like:
                return "PropertyIsLike";
            default :
                throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
        }
    },
    GetFormulaOperationTypeString: function ()
    {
        switch (this.OperationType)
        {
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterThan:
                return ">";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessThan:
                return "<";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterOrEqualTo:
                return ">=";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessOrEqualTo:
                return "<=";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.NotEqualTo:
                return "<>";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.EqualTo:
                return "=";
            case AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.Like:
                return "like";
            default :
                throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
        }
    },
    FormulaRepresentation: function ()
    {
        var strOperationType = this.GetFormulaOperationTypeString();
        var strLeftOperand = this.LeftOperand.FormulaRepresentation();
        var strRightOperand = this.RightOperand.FormulaRepresentation();
        var str = strLeftOperand + " " + strOperationType + " " + strRightOperand;
        return str;
    },
    get_OperationTypeEnum: function ()
    {
        return AnalysisPortal.WFS.Formula.WFSOperationType.BinaryComparisionOperation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.UnaryComparisionOperation",
{
    extend: "AnalysisPortal.WFS.Formula.ComparisionOperation",
    constructor: function (operand, operationType)
    {
        this.Operand = null;
        this.OperationType = AnalysisPortal.WFS.Formula.WFSUnaryComparisionOperator.IsNull;
        this.callParent();
        this.Operand = operand;
        this.OperationType = operationType;
    },
    WFSRepresentation: function ()
    {
        if (this.OperationType == AnalysisPortal.WFS.Formula.WFSUnaryComparisionOperator.IsNull)
        {
            var strOperationType = "PropertyIsNull";
            var strOperand = this.Operand.WFSRepresentation();
            var str = "<PropertyIsNull>" + strOperand + "</" + strOperationType + ">";
            return str;
        }
        throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
    },
    FormulaRepresentation: function ()
    {
        if (this.OperationType == AnalysisPortal.WFS.Formula.WFSUnaryComparisionOperator.IsNull)
        {
            var strOperand = this.Operand.FormulaRepresentation();
            var str = "IsNull(" + strOperand + ")";
            return str;
        }
        throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
    },
    get_OperationTypeEnum: function ()
    {
        return AnalysisPortal.WFS.Formula.WFSOperationType.UnaryComparisionOperation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.FixedValue", {});
Ext.define("AnalysisPortal.WFS.Formula.ConstantValue",
{
    extend: "AnalysisPortal.WFS.Formula.FixedValue",
    constructor: function (value)
    {
        this.Value = null;
        this.callParent();
        this.Value = value;
    },
    WFSRepresentation: function ()
    {
        var str = "<Literal>" + this.Value + "</Literal>";
        return str;
    },
    FormulaRepresentation: function ()
    {
        return this.Value;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.FieldValue",
{
    extend: "AnalysisPortal.WFS.Formula.FixedValue",
    constructor: function (fieldName)
    {
        this.FieldName = null;
        this.callParent();
        this.FieldName = fieldName;
    },
    WFSRepresentation: function ()
    {
        var str = "<PropertyName>" + this.FieldName + "</PropertyName>";
        return str;
    },
    FormulaRepresentation: function ()
    {
        return "\'" + this.FieldName + "\'";
    }
});
Ext.define("AnalysisPortal.WFS.Formula.LogicalOperation", {extend: "AnalysisPortal.WFS.Formula.FormulaOperation"});
Ext.define("AnalysisPortal.WFS.Formula.BinaryLogicalOperation",
{
    extend: "AnalysisPortal.WFS.Formula.LogicalOperation",
    constructor: function (leftOperand, rightOperand, operationType)
    {
        this.LeftOperand = null;
        this.RightOperand = null;
        this.OperationType = AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And;
        this.callParent();
        this.LeftOperand = leftOperand;
        this.RightOperand = rightOperand;
        this.OperationType = operationType;
    },
    WFSRepresentation: function ()
    {
        var strOperationType = this.GetWFSOperationTypeString();
        var strLeftOperand = this.LeftOperand.WFSRepresentation();
        var strRightOperand = this.RightOperand.WFSRepresentation();
        var str = "<" + strOperationType + ">" + strLeftOperand + strRightOperand + "</" + strOperationType + ">";
        return str;
    },
    GetWFSOperationTypeString: function ()
    {
        switch (this.OperationType)
        {
            case AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And:
                return "And";
            case AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.Or:
                return "Or";
            default :
                throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
        }
    },
    FormulaRepresentation: function ()
    {
        var strOperationType = this.GetWFSOperationTypeString();
        var strLeftOperand = this.LeftOperand.FormulaRepresentation();
        var strRightOperand = this.RightOperand.FormulaRepresentation();
        var str = "(" + strLeftOperand + " " + strOperationType + " " + strRightOperand + ")";
        return str;
    },
    get_OperationTypeEnum: function ()
    {
        return AnalysisPortal.WFS.Formula.WFSOperationType.BinaryLogicalOperation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.UnaryLogicalOperation",
{
    extend: "AnalysisPortal.WFS.Formula.LogicalOperation",
    constructor: function (operand, operationType)
    {
        this.Operand = null;
        this.OperationType = AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not;
        this.callParent();
        this.Operand = operand;
        this.OperationType = operationType;
    },
    WFSRepresentation: function ()
    {
        if (this.OperationType == AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not)
        {
            var strOperationType = "Not";
            var strOperand = this.Operand.WFSRepresentation();
            var str = "<Not>" + strOperand + "</" + strOperationType + ">";
            return str;
        }
        throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
    },
    FormulaRepresentation: function ()
    {
        if (this.OperationType == AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not)
        {
            var strOperand = this.Operand.FormulaRepresentation();
            var str = "Not(" + strOperand + ")";
            return str;
        }
        throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
    },
    get_OperationTypeEnum: function ()
    {
        return AnalysisPortal.WFS.Formula.WFSOperationType.UnaryLogicalOperation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.SpatialOperation",
{
    extend: "AnalysisPortal.WFS.Formula.FormulaOperation",
    constructor: function (leftOperand, rightOperand, operationType)
    {
        this.LeftOperand = null;
        this.RightOperand = null;
        this.OperationType = AnalysisPortal.WFS.Formula.WFSSpatialOperator.Contains;
        this.callParent();
        this.LeftOperand = leftOperand;
        this.RightOperand = rightOperand;
        this.OperationType = operationType;
    },
    WFSRepresentation: function ()
    {
        var strOperationType = this.GetWFSOperationTypeString();
        var strLeftOperand = this.LeftOperand.WFSRepresentation();
        var strRightOperand = this.RightOperand.WFSRepresentation();
        var str = "<" + strOperationType + ">" + strLeftOperand + strRightOperand + "</" + strOperationType + ">";
        return str;
    },
    GetWFSOperationTypeString: function ()
    {
        switch (this.OperationType)
        {
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.Contains:
                return "Contains";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.CrossesWith:
                return "Crosses";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.Within:
                return "Within";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.Disjoint:
                return "Disjoint";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.EqualThan:
                return "Equals";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.InsideBbox:
                return "BBOX";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.IntersectsWith:
                return "Intersects";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.Overlaps:
                return "Overlaps";
            case AnalysisPortal.WFS.Formula.WFSSpatialOperator.Touches:
                return "Touches";
            default :
                throw $CreateException(new System.Exception.ctor$$String(this.OperationType + " is not yet supported"), new Error());
        }
    },
    FormulaRepresentation: function ()
    {
        var strOperationType = this.GetWFSOperationTypeString();
        var strLeftOperand = this.LeftOperand.FormulaRepresentation();
        var strRightOperand = this.RightOperand.FormulaRepresentation();
        var str = strLeftOperand + " " + strOperationType + " " + strRightOperand;
        return str;
    },
    get_OperationTypeEnum: function ()
    {
        return AnalysisPortal.WFS.Formula.WFSOperationType.SpatialOperation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.SpatialValue", {});
Ext.define("AnalysisPortal.WFS.Formula.SpatialConstantValue",
{
    extend: "AnalysisPortal.WFS.Formula.SpatialValue",
    constructor: function (gml)
    {
        this.Gml = null;
        this.callParent();
        this.Gml = gml;
    },
    WFSRepresentation: function ()
    {
        return this.Gml;
    },
    FormulaRepresentation: function ()
    {
        return this.Gml;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.SpatialFieldValue",
{
    extend: "AnalysisPortal.WFS.Formula.SpatialValue",
    constructor: function (fieldName)
    {
        this.FieldName = null;
        this.callParent();
        this.FieldName = fieldName;
    },
    WFSRepresentation: function ()
    {
        var str = "<PropertyName>" + this.FieldName + "</PropertyName>";
        return str;
    },
    FormulaRepresentation: function ()
    {
        return "\'" + this.FieldName + "\'";
    }
});
Ext.define("AnalysisPortal.WFS.Formula.TestWFSFilter",
{
    Test: function ()
    {
        var wfsFilter = new AnalysisPortal.WFS.Formula.WFSFilter();
        var taxonIdEqualToOperation = new AnalysisPortal.WFS.Formula.BinaryComparisionOperation(new AnalysisPortal.WFS.Formula.FieldValue("TaxonId"), new AnalysisPortal.WFS.Formula.ConstantValue("4000107"), AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.EqualTo);
        wfsFilter.AddComparisionOperation(taxonIdEqualToOperation);
        var observationCountGreaterThanOperation = new AnalysisPortal.WFS.Formula.BinaryComparisionOperation(new AnalysisPortal.WFS.Formula.FieldValue("ObservationCount"), new AnalysisPortal.WFS.Formula.ConstantValue("100"), AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterThan);
        wfsFilter.AddLogicalOperation(AnalysisPortal.WFS.Formula.WFSLogicalOperator.And, observationCountGreaterThanOperation);
        wfsFilter.AddUnaryLogicalOperation(AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not);
        wfsFilter.Undo();
        wfsFilter.Undo();
        wfsFilter.Undo();
    }
});
Ext.define("AnalysisPortal.WFS.Formula.WFSFilter",
{
    get_CanAddLogicalOperation: function ()
    {
        return this.Formula != null;
    },
    get_CanAddComparisionOperation: function ()
    {
        return this.Formula == null;
    },
    get_CanUndo: function ()
    {
        return this.Formula != null;
    },
    WFSRepresentation: function ()
    {
        if (this.Formula == null)
            return "";
        var strFormula = this.Formula.WFSRepresentation();
        var str = "<Filter>" + strFormula + "</Filter>";
        return str;
    },
    FormulaRepresentation: function ()
    {
        if (this.Formula == null)
            return "";
        var strFormula = this.Formula.FormulaRepresentation();
        return strFormula;
    },
    Undo: function ()
    {
        if (this.Formula == null)
            return;
        if (this.Formula.get_OperationTypeEnum() == AnalysisPortal.WFS.Formula.WFSOperationType.BinaryLogicalOperation)
        {
            var binaryLogicalOperation = this.Formula;
            this.Formula = binaryLogicalOperation.LeftOperand;
        }
        else if (this.Formula.get_OperationTypeEnum() == AnalysisPortal.WFS.Formula.WFSOperationType.UnaryLogicalOperation)
        {
            var unaryLogicalOperation = this.Formula;
            this.Formula = unaryLogicalOperation.Operand;
        }
        else
        {
            this.Formula = null;
        }
    },
    AddLogicalOperation: function (logicalOperator, operation)
    {
        switch (logicalOperator)
        {
            case AnalysisPortal.WFS.Formula.WFSLogicalOperator.And:
                this.Formula = new AnalysisPortal.WFS.Formula.BinaryLogicalOperation(this.Formula, operation, AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And);
                break;
            case AnalysisPortal.WFS.Formula.WFSLogicalOperator.Or:
                this.Formula = new AnalysisPortal.WFS.Formula.BinaryLogicalOperation(this.Formula, operation, AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.Or);
                break;
            case AnalysisPortal.WFS.Formula.WFSLogicalOperator.Not:
                this.Formula = new AnalysisPortal.WFS.Formula.UnaryLogicalOperation(this.Formula, AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not);
                break;
        }
    },
    AddBinaryLogicalOperation: function (logicalOperator, operation)
    {
        switch (logicalOperator)
        {
            case AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And:
                this.Formula = new AnalysisPortal.WFS.Formula.BinaryLogicalOperation(this.Formula, operation, AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And);
                break;
            case AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.Or:
                this.Formula = new AnalysisPortal.WFS.Formula.BinaryLogicalOperation(this.Formula, operation, AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.Or);
                break;
        }
    },
    AddUnaryLogicalOperation: function (logicalOperator)
    {
        switch (logicalOperator)
        {
            case AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not:
                this.Formula = new AnalysisPortal.WFS.Formula.UnaryLogicalOperation(this.Formula, AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not);
                break;
        }
    },
    AddComparisionOperation: function (operation)
    {
        this.Formula = operation;
    }
});
Ext.define("AnalysisPortal.WFS.Formula.WFSFilterUtils",
{
    statics:
    {
        IsComparisionOperator: function (strWfsComparisionOperator)
        {
            var str = strWfsComparisionOperator.toLowerCase();
            if (str == "PropertyIsGreaterThan".toLowerCase())
                return true;
            if (str == "PropertyIsLessThan".toLowerCase())
                return true;
            if (str == "PropertyIsGreaterThanOrEqualTo".toLowerCase())
                return true;
            if (str == "PropertyIsLessThanOrEqualTo".toLowerCase())
                return true;
            if (str == "PropertyIsNotEqualTo".toLowerCase())
                return true;
            if (str == "PropertyIsEqualTo".toLowerCase())
                return true;
            if (str == "PropertyIsLike".toLowerCase())
                return true;
            if (str == "PropertyIsNull".toLowerCase())
                return true;
            return false;
        },
        GetComparisionOperator: function (strWfsComparisionOperator)
        {
            var str = strWfsComparisionOperator.toLowerCase();
            if (str == "PropertyIsGreaterThan".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.GreaterThan;
            if (str == "PropertyIsLessThan".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.LessThan;
            if (str == "PropertyIsGreaterThanOrEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.GreaterOrEqualTo;
            if (str == "PropertyIsLessThanOrEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.LessOrEqualTo;
            if (str == "PropertyIsNotEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.NotEqualTo;
            if (str == "PropertyIsEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.EqualTo;
            if (str == "PropertyIsLike".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.Like;
            if (str == "PropertyIsNull".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSComparisionOperator.IsNull;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        GetBinaryComparisionOperator: function (strWfsBinaryComparisionOperator)
        {
            var str = strWfsBinaryComparisionOperator.toLowerCase();
            if (str == "PropertyIsGreaterThan".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterThan;
            if (str == "PropertyIsLessThan".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessThan;
            if (str == "PropertyIsGreaterThanOrEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.GreaterOrEqualTo;
            if (str == "PropertyIsLessThanOrEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.LessOrEqualTo;
            if (str == "PropertyIsNotEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.NotEqualTo;
            if (str == "PropertyIsEqualTo".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.EqualTo;
            if (str == "PropertyIsLike".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator.Like;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        GetUnaryComparisionOperator: function (strWfsUnaryComparisionOperator)
        {
            var str = strWfsUnaryComparisionOperator.toLowerCase();
            if (str == "PropertyIsNull".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSUnaryComparisionOperator.IsNull;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        IsLogicalOperator: function (strWfsLogicalOperator)
        {
            var str = strWfsLogicalOperator.toLowerCase();
            if (str == "And".toLowerCase())
                return true;
            if (str == "Or".toLowerCase())
                return true;
            if (str == "Not".toLowerCase())
                return true;
            return false;
        },
        GetLogicalOperator: function (strWfsLogicalOperator)
        {
            var str = strWfsLogicalOperator.toLowerCase();
            if (str == "And".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSLogicalOperator.And;
            if (str == "Or".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSLogicalOperator.Or;
            if (str == "Not".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSLogicalOperator.Not;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        GetBinaryLogicalOperator: function (strWfsBinaryLogicalOperator)
        {
            var str = strWfsBinaryLogicalOperator.toLowerCase();
            if (str == "And".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.And;
            if (str == "Or".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator.Or;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        GetUnaryLogicalOperator: function (strWfsUnaryLogicalOperator)
        {
            var str = strWfsUnaryLogicalOperator.toLowerCase();
            if (str == "Not".toLowerCase())
                return AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator.Not;
            throw $CreateException(new System.Exception.ctor$$String("Operator not found"), new Error());
        },
        GetResultingUrl: function (server, typeName, version, filter, outputFormat, maxFeatures)
        {
            var url = server;
            url += "?service=wfs";
            url += "&version=" + version;
            url += "&request=GetFeature";
            url += "&typeName=" + typeName;
            if (maxFeatures != null)
                url += "&maxFeatures=" + maxFeatures;
            if (outputFormat != null)
                url += "&outputFormat=" + outputFormat;
            if (filter != null && filter != "")
                url += "&filter=" + filter;            
            return url;
        }
    }
});
Ext.define("AnalysisPortal.WFS.Formula.WFSLogicalOperator",
{
    statics: {And: "And", Or: "Or", Not: "Not"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSBinaryLogicalOperator",
{
    statics: {And: "And", Or: "Or"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSUnaryLogicalOperator",
{
    statics: {Not: "Not"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSComparisionOperator",
{
    statics: {GreaterThan: "GreaterThan", LessThan: "LessThan", GreaterOrEqualTo: "GreaterOrEqualTo", LessOrEqualTo: "LessOrEqualTo", NotEqualTo: "NotEqualTo", EqualTo: "EqualTo", Like: "Like", IsNull: "IsNull"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSBinaryComparisionOperator",
{
    statics: {GreaterThan: "GreaterThan", LessThan: "LessThan", GreaterOrEqualTo: "GreaterOrEqualTo", LessOrEqualTo: "LessOrEqualTo", NotEqualTo: "NotEqualTo", EqualTo: "EqualTo", Like: "Like"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSUnaryComparisionOperator",
{
    statics: {IsNull: "IsNull"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSSpatialOperator",
{
    statics: {Contains: "Contains", CrossesWith: "CrossesWith", Within: "Within", Disjoint: "Disjoint", EqualThan: "EqualThan", InsideBbox: "InsideBbox", IntersectsWith: "IntersectsWith", Overlaps: "Overlaps", Touches: "Touches"}
});
Ext.define("AnalysisPortal.WFS.Formula.WFSOperationType",
{
    statics: {BinaryLogicalOperation: "BinaryLogicalOperation", UnaryLogicalOperation: "UnaryLogicalOperation", BinaryComparisionOperation: "BinaryComparisionOperation", UnaryComparisionOperation: "UnaryComparisionOperation", SpatialOperation: "SpatialOperation"}
});
