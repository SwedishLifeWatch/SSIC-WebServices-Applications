/*Generated by SharpKit 5 v4.30.0000*/
"use strict";
if (typeof($CreateException)=='undefined') 
{
    var $CreateException = function(ex, error) 
    {
        if(error==null)
            error = new Error();
        if(ex==null)
            ex = new System.Exception.ctor();       
        error.message = ex.message;
        for (var p in ex)
           error[p] = ex[p];
        return error;
    }
}
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Collection$Generic$IEqualityComparer = {fullname: "System.Collection.Generic.IEqualityComparer", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collection$Generic$IEqualityComparer);
var AfterCompilationFunctions =  [];
var BeforeCompilationFunctions =  [];
var IsCompiled = false;
function RemoveDelegate(delOriginal, delToRemove)
{
    if (delToRemove == null || delOriginal == null)
        return delOriginal;
    if (delOriginal.isMulticastDelegate)
    {
        if (delToRemove.isMulticastDelegate)
            throw $CreateException(new System.NotImplementedException.ctor$$String("Multicast to multicast delegate removal is not implemented yet"), new Error());
        var del = CreateMulticastDelegateFunction();
        for (var i = 0; i < delOriginal.delegates.length; i++)
        {
            var del2 = delOriginal.delegates[i];
            if (del2 != delToRemove)
            {
                if (del.delegates == null)
                    del.delegates =  [];
                del.delegates.push(del2);
            }
        }
        if (del.delegates == null)
            return null;
        if (del.delegates.length == 1)
            return del.delegates[0];
        return del;
    }
    else
    {
        if (delToRemove.isMulticastDelegate)
            throw $CreateException(new System.NotImplementedException.ctor$$String("single to multicast delegate removal is not supported"), new Error());
        if (delOriginal == delToRemove)
            return null;
        return delOriginal;
    }
};
function CombineDelegates(del1, del2)
{
    if (del1 == null)
        return del2;
    if (del2 == null)
        return del1;
    var del = CreateMulticastDelegateFunction();
    del.delegates =  [];
    if (del1.isMulticastDelegate)
    {
        for (var i = 0; i < del1.delegates.length; i++)
            del.delegates.push(del1.delegates[i]);
    }
    else
    {
        del.delegates.push(del1);
    }
    if (del2.isMulticastDelegate)
    {
        for (var i = 0; i < del2.delegates.length; i++)
            del.delegates.push(del2.delegates[i]);
    }
    else
    {
        del.delegates.push(del2);
    }
    return del;
};
function CreateMulticastDelegateFunction()
{
    var del2 = null;
    var del = function ()
    {
        var x = undefined;
        for (var i = 0; i < del2.delegates.length; i++)
        {
            var del3 = del2.delegates[i];
            x = del3.apply(null , arguments);
        }
        return x;
    };
    del.isMulticastDelegate = true;
    del2 = del;
    return del;
};
function CreateClrDelegate(type, genericArgs, target, func)
{
    return JsTypeHelper.GetDelegate(target, func);
};
function Typeof(jsTypeOrName)
{
    if (jsTypeOrName == null)
        throw $CreateException(new Error("Unknown type."), new Error());
    if (typeof(jsTypeOrName) == "function")
    {
        jsTypeOrName = JsTypeHelper.GetType(jsTypeOrName);
    }
    if (typeof(jsTypeOrName) == "string")
        return System.Type.GetType$$String$$Boolean(jsTypeOrName, true);
    return System.Type._TypeOf(jsTypeOrName);
};
function JsTypeof(typeName)
{
    return JsTypeHelper.GetType(typeName, false);
};
function New(typeName, args)
{
    var type = JsTypeHelper.GetType(typeName, true);
    if (args == null || args.length == 0)
    {
        var obj = JsCompiler.NewByFunc(type.ctor);
        return obj;
    }
    else
    {
        var obj = JsCompiler.NewByFuncArgs(type.ctor, args);
        return obj;
    }
};
function NewWithInitializer(type, json)
{
    var obj = JsCompiler.NewByFunc(type.ctor);
    if (typeof(json) == "array")
    {
        throw $CreateException(new System.Exception.ctor$$String("not implemented"), new Error());
    }
    else
    {
        for (var p in json)
        {
            var setter = obj["set_" + p];
            if (typeof(setter) == "function")
                setter.call(obj, json[p]);
            else
                obj[p] = json[p];
        }
    }
    return obj;
};
function As(obj, typeOrName)
{
    if (obj == null)
        return obj;
    var type = JsTypeHelper.GetType(typeOrName, true);
    if (Is(obj, type))
        return obj;
    return null;
};
function Cast(obj, typeOrName)
{
    if (obj == null)
        return obj;
    var type = JsTypeHelper.GetType(typeOrName, true);
    if (Is(obj, type))
        return obj;
    var converted = TryImplicitConvert(obj, type);
    if (converted != null)
        return converted;
    var objTypeName = typeof(obj);
    if (typeof(obj.getTypeName) == "function")
    {
        objTypeName = obj.getTypeName();
    }
    var msg = new Array("InvalidCastException: Cannot cast ", objTypeName, " to ", type.fullname, "Exception generated by JsRuntime").join("");
    throw $CreateException(new Error(msg), new Error());
};
function _TestTypeInterfacesIs(testType, iface, testedInterfaces)
{
    if (testedInterfaces[iface.name])
        return false;
    for (var i = 0; i < testType.interfaces.length; i++)
    {
        var testIface = testType.interfaces[i];
        if (testIface == iface)
            return true;
        testedInterfaces[testIface.name] = true;
        if (_TestTypeInterfacesIs(testIface, iface, testedInterfaces))
            return true;
    }
    return false;
};
function TypeIs(objType, type)
{
    if (objType == type)
        return true;
    if (type.Kind == "Interface")
    {
        var testedInterfaces = new Object();
        while (objType != null)
        {
            if (objType == type)
                return true;
            if (_TestTypeInterfacesIs(objType, type, testedInterfaces))
                return true;
            objType = objType.baseType;
        }
        return false;
    }
    if (type.Kind == "Delegate" && objType.fullname == "System.Delegate")
    {
        return true;
    }
    if (objType.fullname == "System.Int32")
    {
        if (type.fullname == "System.Decimal")
            return true;
        if (type.fullname == "System.Double")
            return true;
    }
    var t = objType.baseType;
    while (t != null)
    {
        if (t == type)
            return true;
        t = t.baseType;
    }
    return false;
};
function Is(obj, typeOrName)
{
    if (obj == null)
    {
        return false;
    }
    var type = JsTypeHelper.GetType(typeOrName, true);
    if (type == null)
    {
        if (type == null && typeof(typeOrName) == "function")
        {
            var ctor = typeOrName;
            var i = 0;
            while (ctor != null && i < 20)
            {
                if (obj instanceof ctor)
                    return true;
                ctor = ctor["$baseCtor"];
                i++;
            }
            return false;
        }
        throw $CreateException(new Error("type expected"), new Error());
    }
    var objType = GetObjectType(obj);
    if (objType == null)
        return false;
    var isIt = TypeIs(objType, type);
    return isIt;
};
function Default(T)
{
    return null;
};
function GetObjectType(obj)
{
    	var objType;	
	if(
			obj.constructor==null ||  //IE
			obj instanceof Node || //FireFox
			obj.constructor==HTMLImageElement || obj.constructor==HTMLInputElement ||								//IE & Firefox
			obj.constructor.name=='HTMLImageElement' || obj.constructor.name=='HTMLInputElement' 		//IE & Safari
		 )
	{
		var objTypeName = SharpKit.Html4.HtmlDom.GetTypeNameFromHtmlNode(obj);
		if(objTypeName==null)
			throw new Error();
		objType = JsTypeHelper.GetType(objTypeName, true);
	}
	else
	{
		objType = obj.constructor._type;
	}
	return objType === undefined ? null : objType;

};
function TryImplicitConvert(obj, type)
{
    	if (obj instanceof Error)
	{
		if (obj._Exception != null)
		{
			if(Is(obj._Exception, type))
				return obj._Exception;
			else
				return null;
		}
		else if (type.get_FullName() == 'System.Exception')
		{
			obj._Exception = new Exception(obj.message);
			return obj._Exception;
		}
	}
	return null;
};
function Compile()
{
    JsCompiler.Compile_Direct();
};
function AfterCompilation(func)
{
    if (IsCompiled)
        func();
    else
        AfterCompilationFunctions.push(func);
};
function AfterNextCompilation(func)
{
    AfterCompilationFunctions.push(func);
};
function BeforeCompilation(func)
{
    BeforeCompilationFunctions.push(func);
};
var JsCompiler = function ()
{
};
JsCompiler.__LastException = null;
JsCompiler.Types = new Object();
JsCompiler._hashKeyIndex = 0;
JsCompiler._hashKeyPrefix = String.fromCharCode(1);
JsCompiler.Compile_Direct = function ()
{
    JsCompiler.Compile_Phase1();
    JsCompiler.Compile_Phase2();
    JsCompiler.Compile_Phase3();
};
JsCompiler.Compile_Phase1 = function ()
{
    for (var $i2 = 0, $l2 = BeforeCompilationFunctions.length, action = BeforeCompilationFunctions[$i2]; $i2 < $l2; $i2++, action = BeforeCompilationFunctions[$i2])
        action();
    BeforeCompilationFunctions =  [];
    for (var $i3 = 0, $l3 = JsTypes.length, jsType = JsTypes[$i3]; $i3 < $l3; $i3++, jsType = JsTypes[$i3])
    {
        var fullName = jsType.fullname;
        var type = JsCompiler.Types[fullName];
        if (type == null)
        {
            JsCompiler.Types[fullName] = jsType;
        }
        else
        {
            jsType.isPartial = true;
            jsType.realType = type;
        }
        if (jsType.derivedTypes == null)
            jsType.derivedTypes =  [];
        if (jsType.interfaces == null)
            jsType.interfaces =  [];
        if (jsType.definition == null)
            jsType.definition = new Object();
        var index = fullName.lastIndexOf(".");
        if (index == -1)
        {
            jsType.name = fullName;
        }
        else
        {
            jsType.name = fullName.substring(index + 1);
            jsType.ns = fullName.substring(0, index);
        }
        if (jsType.Kind == "Enum")
        {
            if (jsType.baseTypeName == null)
                jsType.baseTypeName = "System.Object";
            if (jsType.definition["toString"] ==  Object.prototype.toString)
                jsType.definition["toString"] = new Function("return this._Name;");
        }
        else if (jsType.Kind == "Struct")
        {
            if (jsType.baseTypeName == null)
                jsType.baseTypeName = "System.ValueType";
        }
    }
};
JsCompiler.Compile_Phase2 = function ()
{
    for (var i = 0; i < JsTypes.length; i++)
    {
        var jsType = JsTypes[i];
        JsCompiler.Compile_Phase2_TmpType(jsType);
    }
    for (var $i4 = 0, $l4 = JsTypes.length, ce = JsTypes[$i4]; $i4 < $l4; $i4++, ce = JsTypes[$i4])
    {
        if (ce.cctor != null)
            ce.cctor();
    }
    JsTypes =  [];
};
JsCompiler.Compile_Phase2_TmpType = function (tmpType)
{
    var p = tmpType.fullname;
    var type = null;
    type = JsCompiler.CompileType(tmpType);
    if (type != null)
        JsCompiler.CopyMemberIfNotDefined(type, type.fullname, window);
    if (type.ns != null)
    {
        var ns = JsCompiler.ResolveNamespace(type.ns);
        if (type != null)
            ns[type.name] = type;
    }
};
JsCompiler.Compile_Phase3 = function ()
{
    var funcs = AfterCompilationFunctions;
    AfterCompilationFunctions =  [];
    for (var $i5 = 0, $l5 = funcs.length, action = funcs[$i5]; $i5 < $l5; $i5++, action = funcs[$i5])
        action();
    IsCompiled = true;
};
JsCompiler.CopyMemberIfNotDefined = function (source, name, target)
{
    if(target[name]===undefined) target[name] = source;
};
JsCompiler._CopyObject = function (source, target)
{
    for(var p in source)
		target[p] = source[p];
	if(source.toString!=Object.prototype.toString && target.toString==Object.prototype.toString)
		target.toString = source.toString;
};
JsCompiler._SafeCopyObject = function (source, target)
{
    	for(var p in source)
	{
		if(typeof(target[p])!='undefined')
		{
			//TODO: Alon - unmark this. throw new Error(p+' is already defined on target object');
		}
		else
			target[p] = source[p];
	}
	if(source.toString!=Object.prototype.toString)
	{//TODO: commented out by dan-el
		//if(target.toString!=Object.prototype.toString)
			//throw new Error('toString is already defined on target object');
	}
};
JsCompiler._EnumTryParse = function (name)
{
    return this.staticDefintion[name];
};
JsCompiler.NewByFunc = function (ctor)
{
    return new ctor();
};
JsCompiler.NewByFuncArgs = function (ctor, args)
{
    return new ctor.apply(null, args);
};
JsCompiler.GetNativeToStringFunction = function ()
{
    return Object.prototype.toString;
};
JsCompiler.Throw = function (exception)
{
    __LastException = exception || __LastException;
			var error = new Error(exception.ToString());
			error['_Exception'] = exception;
			throw error;
};
JsCompiler.CreateEmptyCtor = function ()
{
    return function(){};
};
JsCompiler.CreateBaseCtor = function (type)
{
    return function(){this.construct(type);};
};
if(typeof(Node)=='undefined')
	Node = function(){};

JsCompiler.ResolveNamespace = function (nsText)
{
    var ns = window;
    var tokens = nsText.split(".");
    for (var i = 0; i < tokens.length; i++)
    {
        var token = tokens[i];
        if (typeof(ns[token]) == "undefined")
            ns[token] = {};
        ns[token].name = tokens.slice(0, i).join(".");
        ns = ns[token];
    }
    return ns;
};
JsCompiler.ResolveBaseType = function (type, currentType)
{
    var baseType = JsTypeHelper.GetType(type.baseTypeName);
    if (baseType == null)
        baseType = JsTypeHelper.GetTypeIgnoreNamespace(type.baseTypeName, true);
    if (!baseType.isCompiled)
        JsCompiler.CompileType(baseType);
    currentType.baseType = baseType;
    baseType.derivedTypes.push(currentType);
};
JsCompiler.ResolveInterfaces = function (type, currentType)
{
    if (type.interfaceNames == null)
        return;
    for (var i = 0; i < type.interfaceNames.length; i++)
    {
        var iName = type.interfaceNames[i];
        var iface = JsTypeHelper.GetType(iName);
        if (iface == null)
            iface = JsTypeHelper.GetTypeIgnoreNamespace(iName, true);
        if (!iface.isCompiled)
            JsCompiler.CompileType(iface);
        currentType.interfaces.push(iface);
    }
};
JsCompiler.CompileType = function (type)
{
    var currentType = (JsCompiler.Types[type.fullname] != null ? JsCompiler.Types[type.fullname] : type);
    if (currentType.ctors == null)
        currentType.ctors = new Object();
    if (!type.isCompiled)
    {
        var baseTypeResolved = false;
        if (currentType.baseType == null && currentType.baseTypeName != null)
        {
            JsCompiler.ResolveBaseType(type, currentType);
            if (currentType.baseType != null)
                baseTypeResolved = true;
        }
        JsCompiler.ResolveInterfaces(type, currentType);
        for (var p in type.definition)
        {
            if (p.search("ctor") == 0)
            {
                currentType[p] = type.definition[p];
                delete type.definition[p];
                if (typeof(currentType.commonPrototype) == "undefined")
                    currentType.commonPrototype = currentType[p].prototype;
                else
                    currentType[p].prototype = currentType.commonPrototype;
                currentType.ctors[p] = currentType[p];
            }
            if (p == "cctor")
                currentType.cctor = p;
        }
        if (currentType.ctor == null)
        {
            if (currentType.ns == null || currentType.ns == "")
            {
                var jsCtor = window[currentType.name];
                currentType.ctor = jsCtor;
            }
            if (currentType.ctor == null && currentType.ctors != null)
            {
                if (currentType.baseType != null)
                    currentType.ctor = JsCompiler.CreateBaseCtor(currentType);
                else
                    currentType.ctor = JsCompiler.CreateEmptyCtor();
            }
            if (currentType.ctor != null)
            {
                currentType.ctors["ctor"] = currentType.ctor;
                if (typeof(currentType.commonPrototype) == "undefined")
                    currentType.commonPrototype = currentType.ctor.prototype;
                else
                    currentType.ctor.prototype = currentType.commonPrototype;
            }
        }
        for (var p in currentType.ctors)
        {
            var ctor = currentType.ctors[p];
            if (ctor._type == null)
                ctor._type = currentType;
        }
        if (baseTypeResolved)
        {
            JsCompiler._CopyObject(currentType.baseType.commonPrototype, currentType.commonPrototype);
        }
        for (var p in type.definition)
        {
            var member = type.definition[p];
            currentType.commonPrototype[p] = member;
            if (typeof(member) == "function")
            {
                member._name = p;
                member._type = currentType;
            }
        }
        if (type.definition.toString != Object.prototype.toString)
        {
            currentType.commonPrototype.toString = type.definition.toString;
            currentType.commonPrototype.toString._type = currentType;
        }
        for (var p in type.staticDefinition)
        {
            var member = type.staticDefinition[p];
            currentType[p] = member;
            if (typeof(member) == "function")
            {
                member._name = p;
                member._type = currentType;
            }
        }
        type.isCompiled = true;
    }
    JsCompiler.CompileEnum(currentType);
    if (currentType != type && type.customAttributes != null)
    {
        if (currentType.customAttributes != null)
        {
            for (var i = 0; i < type.customAttributes.length; i++)
            {
                currentType.customAttributes.push(type.customAttributes[i]);
            }
        }
        else
        {
            currentType.customAttributes = type.customAttributes;
        }
    }
    return currentType;
};
JsCompiler.CompileEnum = function (currentType)
{
    if (currentType.Kind == "Enum")
    {
        currentType.tryParse = JsCompiler._EnumTryParse;
        for (var p in currentType.staticDefinition)
        {
            if (typeof(currentType.staticDefinition[p]) == "string")
            {
                var x = JsCompiler.NewByFunc(currentType.ctor);
                x["_Name"] = p;
                currentType.staticDefinition[p] = x;
                currentType[p] = x;
            }
        }
    }
};
JsCompiler.GetHashKey = function (obj)
{
    if (obj == undefined)
        return "undefined";
    if (obj == null)
        return "null";
    if (obj.valueOf)
        obj = obj.valueOf();
    var type = typeof(obj);
    if (type == "string")
        return obj;
    if (type == "object" || type == "function")
    {
        if (obj._hashKey == null)
        {
            obj._hashKey = JsCompiler._hashKeyPrefix + JsCompiler._hashKeyIndex;
            JsCompiler._hashKeyIndex++;
        }
        return obj._hashKey;
    }
    return obj.toString();
};
var JsTypeHelper = function ()
{
};
JsTypeHelper.GetTypeIgnoreNamespaceCache = null;
JsTypeHelper.GetTypeIgnoreNamespace = function (name, throwIfNotFound)
{
    var type;
    var cache = JsTypeHelper.GetTypeIgnoreNamespaceCache;
    if (cache != null)
    {
        type = cache[name];
        if (typeof(type) != "undefined")
        {
            if (throwIfNotFound && type == null)
                throw $CreateException(new Error("type " + name + " was not found with (with IgnoreNamespace)."), new Error());
            return type;
        }
    }
    if (name.search(".") > -1)
    {
        var tokens = name.split(".");
        name = tokens[tokens.length - 1];
    }
    type = JsCompiler.Types[name];
    var nameAfterNs = "." + name;
    if (type == null)
    {
        for (var p in JsCompiler.Types)
        {
            if (p == name || p.endsWith(nameAfterNs))
            {
                type = JsCompiler.Types[p];
                break;
            }
        }
    }
    if (throwIfNotFound && type == null)
        throw $CreateException(new Error("type " + name + " was not found with (with IgnoreNamespace)."), new Error());
    if (cache != null)
        cache[name] = (type != null ? type : null);
    return type;
};
JsTypeHelper._HasTypeArguments = function (typeName)
{
    return typeName.indexOf("[") > -1;
};
JsTypeHelper._GetTypeWithArguments = function (typeName, throwIfNotFound)
{
    var name = typeName;
    var gti = name.indexOf("`");
    if (gti != -1 && name.indexOf("[") > -1)
    {
        var args = JsTypeHelper._ParseTypeNameArgs(name);
        var type = JsTypeHelper.GetType(args[0], throwIfNotFound);
        if (type == null)
            return null;
        var res = [];
        res.push(type);
        var typeArgs = [];
        for (var i = 0; i < args[1].length; i++)
        {
            var typeArg = JsTypeHelper.GetType(args[1][i][0], throwIfNotFound);
            if (typeArg == null)
                return null;
            typeArgs.push(typeArg);
        }
        res.push(typeArgs);
        return res;
    }
    return null;
};
JsTypeHelper._ParseTypeNameArgs = function (name)
{
    	var code = name.replace(/, [a-zA-Z0-9, =.]+\]/g, ']'); //remove all the ', mscorlib, Version=1.0.0.0, publicKeyToken=xxxxxxxxx
	code = code.replace(/`([0-9])/g, '$$$1,'); //remove the `2 and replace to $2, (the comma is for array to compile)
	code = '[' + code + ']';
	var args = eval(code);
	return args;
};
JsTypeHelper.GetType = function (typeOrNameOrCtor, throwIfNotFound)
{
    if (typeof(typeOrNameOrCtor) != "string")
    {
        if (typeof(typeOrNameOrCtor) == "function")
            return typeOrNameOrCtor._type;
        return typeOrNameOrCtor;
    }
    var name = typeOrNameOrCtor;
    var gti = name.indexOf("`");
    if (gti != -1)
    {
        name = name.substr(0, gti + 2).replace("`", "$");
    }
    var type = JsCompiler.Types[name];
    if (type == null)
    {
        if (throwIfNotFound)
            throw $CreateException(new Error("JsType " + name + " was not found"), new Error());
        return null;
    }
    return type;
};
JsTypeHelper.FindType = function (name, throwIfNotFound)
{
    var type = JsTypeHelper.GetType(name, false);
    if (type == null)
        type = JsTypeHelper.GetTypeIgnoreNamespace(name, throwIfNotFound);
    return type;
};
JsTypeHelper.GetAssemblyQualifiedName = function (type)
{
    if (type._AssemblyQualifiedName == null)
    {
        var name = type.fullname;
        if (type.assemblyName != null)
            name += ", " + type.assemblyName;
        type._AssemblyQualifiedName = name;
    }
    return type._AssemblyQualifiedName;
};
JsTypeHelper.GetName = function (type)
{
    return type.name;
};
JsTypeHelper.getMemberTypeName = function (instance, memberName)
{
    var signature = instance[memberName + "$$"];
    if (signature == null)
        return null;
    var tokens = signature.split(" ");
    var memberTypeName = tokens[tokens.length - 1];
    return memberTypeName;
};
JsTypeHelper.GetDelegate = function (obj, func)
{
    var target = obj;
    if (target == null)
        return func;
    if (typeof(func) == "string")
        func = target[func];
    var cache = target.__delegateCache;
    if (cache == null)
    {
        cache = new Object();
        target.__delegateCache = cache;
    }
    var key = JsCompiler.GetHashKey(func);
    var del = cache[key];
    if (del == null)
    {
        del = function ()
        {
            var del2 = arguments.callee;
            return del2.func.apply(del.target, arguments);
        };
        del.func = func;
        del.target = target;
        del.isDelegate = true;
        cache[key] = del;
    }
    return del;
};
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Activator =
{
    fullname: "System.Activator",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        CreateInstance$$Type: function (type)
        {
            return new type._JsType.ctor();
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo: function (type, bindingAttr, binder, args, culture)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$BindingFlags$$Binder$$Object$Array$$CultureInfo$$Object$Array: function (type, bindingAttr, binder, args, culture, activationAttributes)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array: function (type, args)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Object$Array$$Object$Array: function (type, args, activationAttributes)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$$Type$$Boolean: function (type, nonPublic)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        CreateInstance$1: function (T)
        {
            return Cast(System.Activator.CreateInstance$$Type(Typeof(T)), T);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Activator);
var System$Attribute =
{
    fullname: "System.Attribute",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Attribute);
var System$Collections$Generic$IEnumerator$1 = {fullname: "System.Collections.Generic.IEnumerator$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IEnumerator$1);
var System$Collections$Generic$IEnumerable$1 = {fullname: "System.Collections.Generic.IEnumerable$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IEnumerable$1);
var System$Collections$Generic$IList$1 = {fullname: "System.Collections.Generic.IList$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.ICollection$1"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IList$1);
var System$Collections$Generic$ICollection$1 = {fullname: "System.Collections.Generic.ICollection$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.IEnumerable$1"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$ICollection$1);
var System$Collections$Generic$IDictionary$2 = {fullname: "System.Collections.Generic.IDictionary$2", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$Generic$IDictionary$2);
var System$Collections$Generic$ISet$1 = {fullname: "System.Collections.Generic.ISet$1", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$Generic$ISet$1);
var System$Collections$IDictionary = {fullname: "System.Collections.IDictionary", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.ICollection", "System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$IDictionary);
var System$Collections$IEnumerable = {fullname: "System.Collections.IEnumerable", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$IEnumerable);
var System$Collections$IEnumerator = {fullname: "System.Collections.IEnumerator", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Collections$IEnumerator);
var System$Collections$ICollection = {fullname: "System.Collections.ICollection", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.IEnumerable"], Kind: "Interface"};
JsTypes.push(System$Collections$ICollection);
var System$Collections$IList = {fullname: "System.Collections.IList", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", interfaceNames: ["System.Collections.ICollection"], Kind: "Interface"};
JsTypes.push(System$Collections$IList);
var System$Comparison$1 =
{
    fullname: "System.Comparison$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Comparison$1);
var System$ComponentModel$CancelEventHandler =
{
    fullname: "System.ComponentModel.CancelEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventHandler);
var System$ComponentModel$CancelEventArgs =
{
    fullname: "System.ComponentModel.CancelEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = false;
        },
        ctor$$Boolean: function (cancel)
        {
            this._Cancel = false;
            System.EventArgs.ctor.call(this);
            this._Cancel = cancel;
        },
        Cancel$$: "System.Boolean",
        get_Cancel: function ()
        {
            return this._Cancel;
        },
        set_Cancel: function (value)
        {
            this._Cancel = value;
        }
    }
};
JsTypes.push(System$ComponentModel$CancelEventArgs);
var System$ComponentModel$INotifyPropertyChanging = {fullname: "System.ComponentModel.INotifyPropertyChanging", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$ComponentModel$INotifyPropertyChanging);
var System$ComponentModel$INotifyPropertyChanged = {fullname: "System.ComponentModel.INotifyPropertyChanged", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$ComponentModel$INotifyPropertyChanged);
var System$ComponentModel$PropertyChangedEventHandler =
{
    fullname: "System.ComponentModel.PropertyChangedEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventHandler);
var System$ComponentModel$PropertyChangedEventArgs =
{
    fullname: "System.ComponentModel.PropertyChangedEventArgs",
    baseTypeName: "System.EventArgs",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (propertyName)
        {
            this._PropertyName = null;
            System.EventArgs.ctor.call(this);
            this._PropertyName = propertyName;
        },
        PropertyName$$: "System.String",
        get_PropertyName: function ()
        {
            return this._PropertyName;
        }
    }
};
JsTypes.push(System$ComponentModel$PropertyChangedEventArgs);
var System$DateTime =
{
    fullname: "System.DateTime",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.DateTime.MinValue = null;
        },
        Parse$$String: function (str)
        {
            return new System.DateTime.ctor$$Int64(Date.parse(str));
        },
        DaysInMonth: function (year, month)
        {
            return 32 - new Date(year, month-1, 32).getDate();
        },
        Compare: function (t1, t2)
        {
            return t1.date.valueOf() - t2.date.valueOf();
        },
        Now$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Now: function ()
        {
            return new System.DateTime.ctor$$Date(new Date());
        },
        op_Equality: function (t1, t2)
        {
            if (t1 == t2)
                return true;
            if (t1 == null || t2 == null)
                return false;
            return t1.date.getTime() == t2.date.getTime();
        },
        op_Inequality: function (t1, t2)
        {
            if (t1 != t2)
                return true;
            if (t1 == null || t2 == null)
                return false;
            return t1.date.getTime() != t2.date.getTime();
        },
        op_Subtraction$$DateTime$$DateTime: function (t1, t2)
        {
            return System.TimeSpan.FromMilliseconds(t1.date.getTime() - t2.date.getTime());
        },
        op_Subtraction$$DateTime$$TimeSpan: function (t1, t2)
        {
            return new System.DateTime.ctor$$Date(new Date(t1.date.getDate() - Cast(t2.get_TotalMilliseconds(), System.Int64.ctor)));
        },
        op_Addition$$DateTime$$DateTime: function (t1, t2)
        {
            return System.TimeSpan.FromMilliseconds(t1.date.getTime() + t2.date.getTime());
        },
        op_Addition$$DateTime$$TimeSpan: function (t1, t2)
        {
            return new System.DateTime.ctor$$Date(new Date(t1.date.getDate() + Cast(t2.get_TotalMilliseconds(), System.Int64.ctor)));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = System.DateTime.MinValue.date;
        },
        ToJsDate: function ()
        {
            return this.date;
        },
        ctor$$Int32$$Int32$$Int32: function (year, month, day)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date();
            this.set_Year(year);
            this.set_Month(month);
            this.set_Day(day);
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32$$Int32: function (year, month, day, hour, minute, second)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date();
            this.set_Year(year);
            this.set_Month(month);
            this.set_Day(day);
            this.set_Hour(hour);
            this.set_Minute(minute);
            this.set_Second(second);
        },
        ctor$$Date: function (jsDate)
        {
            this.date = null;
            System.Object.ctor.call(this);
            if (jsDate != null)
                this.date = jsDate;
            else
                this.date = System.DateTime.MinValue.date;
        },
        ctor$$Int64: function (jsDate)
        {
            this.date = null;
            System.Object.ctor.call(this);
            this.date = new Date(jsDate);
        },
        CompareTo: function (value)
        {
            return this.date.valueOf() - value.date.valueOf();
        },
        Year$$: "System.Int32",
        get_Year: function ()
        {
            return this.date.getFullYear();
        },
        set_Year: function (value)
        {
            this.date.setFullYear(value);
        },
        Month$$: "System.Int32",
        get_Month: function ()
        {
            return this.date.getMonth() + 1;
        },
        set_Month: function (value)
        {
            this.date.setMonth(value - 1);
        },
        Day$$: "System.Int32",
        get_Day: function ()
        {
            return this.date.getDate();
        },
        set_Day: function (value)
        {
            this.date.setDate(value);
        },
        Hour$$: "System.Int32",
        get_Hour: function ()
        {
            return this.date.getHours();
        },
        set_Hour: function (value)
        {
            this.date.setHours(value);
        },
        Minute$$: "System.Int32",
        get_Minute: function ()
        {
            return this.date.getMinutes();
        },
        set_Minute: function (value)
        {
            this.date.setMinutes(value);
        },
        Second$$: "System.Int32",
        get_Second: function ()
        {
            return this.date.getSeconds();
        },
        set_Second: function (value)
        {
            this.date.setSeconds(value);
        },
        Millisecond$$: "System.Int32",
        get_Millisecond: function ()
        {
            return this.date.getMilliseconds();
        },
        set_Millisecond: function (value)
        {
            this.date.setMilliseconds(value);
        },
        DayOfWeek$$: "System.Int32",
        get_DayOfWeek: function ()
        {
            return this.date.getDay();
        },
        toString: function ()
        {
            return this.date.toString();
        },
        AddDays: function (days)
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.addDays(this.date, days));
        },
        AddMonths: function (months)
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.addMonths(this.date, months));
        },
        Today$$: "SharpKit.JavaScript.Private.JsImplDateTime",
        get_Today: function ()
        {
            return new System.DateTime.ctor$$Date(SharpKit.JavaScript.Private.Extensions.removeTime(new Date()));
        },
        Subtract$$DateTime: function (value)
        {
            var diff = this.date.valueOf() - value.date.valueOf();
            return new System.TimeSpan.ctor$$Int64(diff * System.TimeSpan.TicksPerMillisecond);
        },
        Subtract$$TimeSpan: function (value)
        {
            var newDate = new Date(this.date.valueOf());
            newDate.setMilliseconds(this.date.getMilliseconds() + value.get_TotalMilliseconds());
            return new System.DateTime.ctor$$Date(newDate);
        },
        ToString$$String: function (format)
        {
            format = format.Replace$$String$$String("yyyy", this.get_Year().ToString$$String("0000"));
            format = format.Replace$$String$$String("yyyy", this.get_Year().ToString$$String("00"));
            format = format.Replace$$String$$String("y", this.get_Year().toString());
            format = format.Replace$$String$$String("MM", this.get_Month().ToString$$String("00"));
            format = format.Replace$$String$$String("M", this.get_Month().toString());
            format = format.Replace$$String$$String("dd", this.get_Day().ToString$$String("00"));
            format = format.Replace$$String$$String("d", this.get_Day().toString());
            format = format.Replace$$String$$String("HH", this.get_Hour().ToString$$String("00"));
            format = format.Replace$$String$$String("H", this.get_Hour().toString());
            format = format.Replace$$String$$String("mm", this.get_Minute().ToString$$String("00"));
            format = format.Replace$$String$$String("m", this.get_Minute().toString());
            format = format.Replace$$String$$String("ss", this.get_Second().ToString$$String("00"));
            format = format.Replace$$String$$String("s", this.get_Second().toString());
            return format;
        }
    }
};
JsTypes.push(System$DateTime);
var SharpKit$JavaScript$Private$Extensions =
{
    fullname: "SharpKit.JavaScript.Private.Extensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        addDays: function (date, days)
        {
            var date2 = new Date(date.valueOf());
            date2.setDate(date2.getDate() + days);
            return date2;
        },
        addMonths: function (date, months)
        {
            var date2 = new Date(date.valueOf());
            date2.setMonth(date2.getMonth() + months);
            return date2;
        },
        removeTime: function (date)
        {
            var date2 = new Date(date.getFullYear(), date.getMonth(), date.getDate());
            return date2;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$Extensions);
var System$Delegate =
{
    fullname: "System.Delegate",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Combine$$Delegate$Array: function (delegates)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Combine$$Delegate$$Delegate: function (delegate1, delegate2)
        {
            return CombineDelegates(delegate1, delegate2);
        },
        Remove: function (delegate1, delegate2)
        {
            return RemoveDelegate(delegate1, delegate2);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        },
        DynamicInvoke: function (args)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$Delegate);
var System$MulticastDelegate =
{
    fullname: "System.MulticastDelegate",
    baseTypeName: "System.Delegate",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Delegate.ctor.call(this);
        },
        GetInvocationList: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Equals$$MulticastDelegate: function (del)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Invoke: function (varargs)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$MulticastDelegate);
var System$Action =
{
    fullname: "System.Action",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action);
var System$Action$1 =
{
    fullname: "System.Action$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$1);
var System$Action$2 =
{
    fullname: "System.Action$2",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$2);
var System$Action$3 =
{
    fullname: "System.Action$3",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, T3, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Action$3);
var System$Func$1 =
{
    fullname: "System.Func$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (TResult, obj, func)
        {
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$1);
var System$Func$2 =
{
    fullname: "System.Func$2",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, TResult, obj, func)
        {
            this.T = T;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$2);
var System$Func$3 =
{
    fullname: "System.Func$3",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, TResult, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$3);
var System$Func$4 =
{
    fullname: "System.Func$4",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T1, T2, T3, TResult, obj, func)
        {
            this.T1 = T1;
            this.T2 = T2;
            this.T3 = T3;
            this.TResult = TResult;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Func$4);
var System$EventHandler =
{
    fullname: "System.EventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler);
var System$EventHandler$1 =
{
    fullname: "System.EventHandler$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (TEventArgs, obj, func)
        {
            this.TEventArgs = TEventArgs;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$EventHandler$1);
var System$Predicate$1 =
{
    fullname: "System.Predicate$1",
    Kind: "Delegate",
    definition:
    {
        ctor: function (T, obj, func)
        {
            this.T = T;
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(System$Predicate$1);
var System$Enum =
{
    fullname: "System.Enum",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetNames: function (type)
        {
            var jsType = type._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
            {
                array.push(p);
            }
            return array;
        },
        GetValues: function (type)
        {
            var jsType = type._JsType;
            var array = new Array();
            for (var p in jsType.staticDefinition)
            {
                array.push(jsType.staticDefinition[p]);
            }
            return array;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Enum);
var System$Environment =
{
    fullname: "System.Environment",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetResourceString: function (p)
        {
            return p;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Environment);
var System$EventArgs =
{
    fullname: "System.EventArgs",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$EventArgs);
var System$Exception =
{
    fullname: "System.Exception",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor$$String$$Exception: function (message, innerException)
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
            this._InnerException = innerException;
        },
        ctor$$String: function (message)
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
            this._Message = message;
        },
        ctor: function ()
        {
            this._InnerException = null;
            this._Message = null;
            System.Object.ctor.call(this);
        },
        InnerException$$: "System.Exception",
        get_InnerException: function ()
        {
            return this._InnerException;
        },
        Message$$: "System.String",
        get_Message: function ()
        {
            return this._Message;
        },
        toString: function ()
        {
            var ie = this.get_InnerException();
            if (ie == null)
                return this.get_Message();
            return this.get_Message() + ", " + this.get_InnerException();
        },
        SetErrorCode: function (hr)
        {
        }
    }
};
JsTypes.push(System$Exception);
var System$NotImplementedException =
{
    fullname: "System.NotImplementedException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Exception.ctor$$String.call(this, "NotImplementedException");
        },
        ctor$$String: function (s)
        {
            System.Exception.ctor$$String.call(this, "NotImplementedException: " + s);
        }
    }
};
JsTypes.push(System$NotImplementedException);
var System$SystemException =
{
    fullname: "System.SystemException",
    baseTypeName: "System.Exception",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Exception.ctor$$String.call(this, System.Environment.GetResourceString("Arg_SystemException"));
            this.SetErrorCode(-2146233087);
        },
        ctor$$String: function (message)
        {
            System.Exception.ctor$$String.call(this, message);
            this.SetErrorCode(-2146233087);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            System.Exception.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233087);
        }
    }
};
JsTypes.push(System$SystemException);
var System$ArgumentException =
{
    fullname: "System.ArgumentException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, System.Environment.GetResourceString("Arg_ArgumentException"));
            this.SetErrorCode(-2147024809);
        },
        ctor$$String: function (message)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        },
        ctor$$String$$String: function (message, paramName)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String.call(this, message);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ctor$$String$$String$$Exception: function (message, paramName, innerException)
        {
            this.m_paramName = null;
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
            this.m_paramName = paramName;
            this.SetErrorCode(-2147024809);
        },
        ParamName$$: "System.String",
        get_ParamName: function ()
        {
            return this.m_paramName;
        }
    }
};
JsTypes.push(System$ArgumentException);
var System$NullReferenceException =
{
    fullname: "System.NullReferenceException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.SystemException.ctor$$String.call(this, "Object reference not set to an instance of object");
        },
        ctor$$String: function (message)
        {
            System.SystemException.ctor$$String.call(this, message);
        }
    }
};
JsTypes.push(System$NullReferenceException);
var System$NotSupportedException =
{
    fullname: "System.NotSupportedException",
    baseTypeName: "System.SystemException",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.SystemException.ctor$$String.call(this, "Arg_NotSupportedException");
        },
        ctor$$String: function (message)
        {
            System.SystemException.ctor$$String.call(this, message);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            System.SystemException.ctor$$String$$Exception.call(this, message, innerException);
        }
    }
};
JsTypes.push(System$NotSupportedException);
var System$ArgumentOutOfRangeException =
{
    fullname: "System.ArgumentOutOfRangeException",
    baseTypeName: "System.ArgumentException",
    staticDefinition:
    {
        cctor: function ()
        {
            System.ArgumentOutOfRangeException._rangeMessage = null;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String.call(this, "Arg_ArgumentOutOfRangeException");
            this.SetErrorCode(-2146233086);
        },
        ctor$$String: function (paramName)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, "Arg_ArgumentOutOfRangeException", paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Exception: function (message, innerException)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$Exception.call(this, message, innerException);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$String: function (paramName, message)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.SetErrorCode(-2146233086);
        },
        ctor$$String$$Object$$String: function (paramName, actualValue, message)
        {
            this.m_actualValue = null;
            System.ArgumentException.ctor$$String$$String.call(this, message, paramName);
            this.m_actualValue = actualValue;
            this.SetErrorCode(-2146233086);
        },
        ActualValue$$: "System.Object",
        get_ActualValue: function ()
        {
            return this.m_actualValue;
        },
        RangeMessage$$: "System.String",
        get_RangeMessage: function ()
        {
            if (System.ArgumentOutOfRangeException._rangeMessage == null)
            {
                System.ArgumentOutOfRangeException._rangeMessage = "Arg_ArgumentOutOfRangeException";
            }
            return System.ArgumentOutOfRangeException._rangeMessage;
        }
    }
};
JsTypes.push(System$ArgumentOutOfRangeException);
var System$IDisposable = {fullname: "System.IDisposable", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$IDisposable);
var System$Nullable$1 =
{
    fullname: "System.Nullable$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (T, value)
        {
            this.T = T;
            this.hasValue = false;
            this.value = null;
            System.Object.ctor.call(this);
            this.value = value;
            this.hasValue = true;
        },
        HasValue$$: "System.Boolean",
        get_HasValue: function ()
        {
            return this.hasValue;
        },
        Value$$: "`0",
        get_Value: function ()
        {
            if (!this.get_HasValue())
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("InvalidOperation_NoValue"), new Error());
            }
            return this.value;
        },
        GetValueOrDefault: function ()
        {
            return this.value;
        },
        GetValueOrDefault$$T: function (defaultValue)
        {
            if (!this.get_HasValue())
            {
                return defaultValue;
            }
            return this.value;
        },
        Equals$$Object: function (other)
        {
            if (!this.get_HasValue())
            {
                return (other == null);
            }
            if (other == null)
            {
                return false;
            }
            return this.value.Equals$$Object(other);
        },
        GetHashCode: function ()
        {
            if (!this.get_HasValue())
            {
                return 0;
            }
            return this.value.GetHashCode();
        },
        toString: function ()
        {
            if (!this.get_HasValue())
            {
                return "";
            }
            return this.value.toString();
        }
    }
};
JsTypes.push(System$Nullable$1);
var System$StringSplitOptions =
{
    fullname: "System.StringSplitOptions",
    staticDefinition: {None: "None", RemoveEmptyEntries: "RemoveEmptyEntries"},
    Kind: "Enum"
};
JsTypes.push(System$StringSplitOptions);
var System$Char =
{
    fullname: "System.Char",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        IsWhiteSpace: function (c)
        {
            return /\s/.test(c);
        },
        IsUpper: function (c)
        {
            return c.toUpperCase() == c;
        },
        IsDigit$$Char: function (s)
        {
            return /[0-9]/.test(s);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Char);
var System$CharEnumerator =
{
    fullname: "System.CharEnumerator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.IEnumerator"],
    Kind: "Class",
    definition:
    {
        ctor: function (str2)
        {
            this.currentElement = "\0";
            this.index = 0;
            this.str = null;
            System.Object.ctor.call(this);
            this.str = str2;
            this.index = -1;
        },
        MoveNext: function ()
        {
            if (this.index < (this.str.length - 1))
            {
                this.index++;
                this.currentElement = this.str.charAt(this.index);
                return true;
            }
            this.index = this.str.length;
            return false;
        },
        Reset: function ()
        {
            this.currentElement = "\0";
            this.index = -1;
        },
        Current$$: "System.Char",
        get_Current: function ()
        {
            if (this.index == -1)
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Not Started"), new Error());
            }
            if (this.index >= this.str.length)
            {
                throw $CreateException(new System.InvalidOperationException.ctor$$String("Enum Ended"), new Error());
            }
            return this.currentElement;
        }
    }
};
JsTypes.push(System$CharEnumerator);
var System$StringComparison =
{
    fullname: "System.StringComparison",
    staticDefinition: {CurrentCulture: "CurrentCulture", CurrentCultureIgnoreCase: "CurrentCultureIgnoreCase", InvariantCulture: "InvariantCulture", InvariantCultureIgnoreCase: "InvariantCultureIgnoreCase", Ordinal: "Ordinal", OrdinalIgnoreCase: "OrdinalIgnoreCase"},
    Kind: "Enum"
};
JsTypes.push(System$StringComparison);
var System$TimeSpan =
{
    fullname: "System.TimeSpan",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.TimeSpan.TicksPerMillisecond = 10000;
            System.TimeSpan.MillisecondsPerTick = 0.0001;
            System.TimeSpan.TicksPerSecond = 10000000;
            System.TimeSpan.SecondsPerTick = 1E-07;
            System.TimeSpan.TicksPerMinute = 600000000;
            System.TimeSpan.MinutesPerTick = 1.66666666666667E-09;
            System.TimeSpan.TicksPerHour = 36000000000;
            System.TimeSpan.HoursPerTick = 2.77777777777778E-11;
            System.TimeSpan.TicksPerDay = 864000000000;
            System.TimeSpan.DaysPerTick = 1.15740740740741E-12;
            System.TimeSpan.MillisPerSecond = 1000;
            System.TimeSpan.MillisPerMinute = 60000;
            System.TimeSpan.MillisPerHour = 3600000;
            System.TimeSpan.MillisPerDay = 86400000;
            System.TimeSpan.MaxSeconds = 922337203685;
            System.TimeSpan.MinSeconds = -922337203685;
            System.TimeSpan.MaxMilliSeconds = 922337203685477;
            System.TimeSpan.MinMilliSeconds = -922337203685477;
            System.TimeSpan.TicksPerTenthSecond = 1000000;
            System.TimeSpan.Zero = new System.TimeSpan.ctor$$Int64(0);
            System.TimeSpan.MaxValue = new System.TimeSpan.ctor$$Int64(9223372036854775807);
            System.TimeSpan.MinValue = new System.TimeSpan.ctor$$Int64(-9223372036854775808);
        },
        Compare: function (t1, t2)
        {
            if (t1._ticks > t2._ticks)
            {
                return 1;
            }
            if (t1._ticks < t2._ticks)
            {
                return -1;
            }
            return 0;
        },
        FromDays: function (value)
        {
            return System.TimeSpan.Interval(value, 86400000);
        },
        Equals$$TimeSpan$$TimeSpan: function (t1, t2)
        {
            return t1._ticks == t2._ticks;
        },
        FromHours: function (value)
        {
            return System.TimeSpan.Interval(value, 3600000);
        },
        Interval: function (value, scale)
        {
            if (System.Double.IsNaN(value))
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_CannotBeNaN"), new Error());
            }
            var num = value * scale;
            var num2 = num + ((value >= 0) ? 0.5 : -0.5);
            if (num2 > 922337203685477 || num2 < -922337203685477)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((num2 * 10000));
        },
        FromMilliseconds: function (value)
        {
            return System.TimeSpan.Interval(value, 1);
        },
        FromMinutes: function (value)
        {
            return System.TimeSpan.Interval(value, 60000);
        },
        FromSeconds: function (value)
        {
            return System.TimeSpan.Interval(value, 1000);
        },
        FromTicks: function (value)
        {
            return new System.TimeSpan.ctor$$Int64(value);
        },
        TimeToTicks: function (hour, minute, second)
        {
            var num = hour * 3600 + minute * 60 + second;
            if (num > 922337203685 || num < -922337203685)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null , "Overflow_TimeSpanTooLong"), new Error());
            }
            return num * 10000000;
        },
        op_UnaryNegation: function (t)
        {
            if (t._ticks == System.TimeSpan.MinValue._ticks)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-t._ticks);
        },
        op_Subtraction: function (t1, t2)
        {
            return t1.Subtract(t2);
        },
        op_UnaryPlus: function (t)
        {
            return t;
        },
        op_Addition: function (t1, t2)
        {
            return t1.Add(t2);
        },
        op_Equality: function (t1, t2)
        {
            return t1._ticks == t2._ticks;
        },
        op_Inequality: function (t1, t2)
        {
            return t1._ticks != t2._ticks;
        },
        op_LessThan: function (t1, t2)
        {
            return t1._ticks < t2._ticks;
        },
        op_LessThanOrEqual: function (t1, t2)
        {
            return t1._ticks <= t2._ticks;
        },
        op_GreaterThan: function (t1, t2)
        {
            return t1._ticks > t2._ticks;
        },
        op_GreaterThanOrEqual: function (t1, t2)
        {
            return t1._ticks >= t2._ticks;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
        },
        Ticks$$: "System.Int64",
        get_Ticks: function ()
        {
            return this._ticks;
        },
        Days$$: "System.Int32",
        get_Days: function ()
        {
            return (this._ticks / 864000000000);
        },
        Hours$$: "System.Int32",
        get_Hours: function ()
        {
            return (this._ticks / 36000000000 % 24);
        },
        Milliseconds$$: "System.Int32",
        get_Milliseconds: function ()
        {
            return (this._ticks / 10000 % 1000);
        },
        Minutes$$: "System.Int32",
        get_Minutes: function ()
        {
            return (this._ticks / 600000000 % 60);
        },
        Seconds$$: "System.Int32",
        get_Seconds: function ()
        {
            return (this._ticks / 10000000 % 60);
        },
        TotalDays$$: "System.Double",
        get_TotalDays: function ()
        {
            return this._ticks * 1.15740740740741E-12;
        },
        TotalHours$$: "System.Double",
        get_TotalHours: function ()
        {
            return this._ticks * 2.77777777777778E-11;
        },
        TotalMilliseconds$$: "System.Double",
        get_TotalMilliseconds: function ()
        {
            var num = this._ticks * 0.0001;
            if (num > 922337203685477)
            {
                return 922337203685477;
            }
            if (num < -922337203685477)
            {
                return -922337203685477;
            }
            return num;
        },
        TotalMinutes$$: "System.Double",
        get_TotalMinutes: function ()
        {
            return this._ticks / System.TimeSpan.TicksPerMillisecond / 1000 / 60;
        },
        TotalSeconds$$: "System.Double",
        get_TotalSeconds: function ()
        {
            return this._ticks * 1E-07;
        },
        ctor$$Int64: function (ticks)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            this._ticks = ticks;
        },
        ctor$$Int32$$Int32$$Int32: function (hours, minutes, seconds)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            this._ticks = System.TimeSpan.TimeToTicks(hours, minutes, seconds);
        },
        ctor$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds)
        {
            this._ticks = 0;
            System.TimeSpan.ctor$$Int32$$Int32$$Int32$$Int32$$Int32.call(this, days, hours, minutes, seconds, 0);
        },
        ctor$$Int32$$Int32$$Int32$$Int32$$Int32: function (days, hours, minutes, seconds, milliseconds)
        {
            this._ticks = 0;
            System.Object.ctor.call(this);
            var num = (days * 3600 * 24 + hours * 3600 + minutes * 60 + seconds) * 1000 + milliseconds;
            if (num > 922337203685477 || num < -922337203685477)
            {
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String$$String(null , "Overflow_TimeSpanTooLong"), new Error());
            }
            this._ticks = num * 10000;
        },
        Add: function (ts)
        {
            var num = this._ticks + ts._ticks;
            if (this._ticks >> 63 == ts._ticks >> 63 && this._ticks >> 63 != num >> 63)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(num);
        },
        CompareTo$$Object: function (value)
        {
            if (value == null)
            {
                return 1;
            }
            if (!(Is(value, System.TimeSpan.ctor)))
            {
                throw $CreateException(new System.ArgumentException.ctor$$String("Arg_MustBeTimeSpan"), new Error());
            }
            var ticks = (Cast(value, System.TimeSpan.ctor))._ticks;
            if (this._ticks > ticks)
            {
                return 1;
            }
            if (this._ticks < ticks)
            {
                return -1;
            }
            return 0;
        },
        CompareTo$$TimeSpan: function (value)
        {
            var ticks = value._ticks;
            if (this._ticks > ticks)
            {
                return 1;
            }
            if (this._ticks < ticks)
            {
                return -1;
            }
            return 0;
        },
        Duration: function ()
        {
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks())
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_Duration"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64((this._ticks >= 0) ? this._ticks : (-this._ticks));
        },
        Equals$$Object: function (value)
        {
            return Is(value, System.TimeSpan.ctor) && this._ticks == (Cast(value, System.TimeSpan.ctor))._ticks;
        },
        Equals$$TimeSpan: function (obj)
        {
            return this._ticks == obj._ticks;
        },
        GetHashCode: function ()
        {
            return (this._ticks ^ (this._ticks >> 32));
        },
        Negate: function ()
        {
            if (this.get_Ticks() == System.TimeSpan.MinValue.get_Ticks())
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_NegateTwosCompNum"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(-this._ticks);
        },
        Subtract: function (ts)
        {
            var num = this._ticks - ts._ticks;
            if (this._ticks >> 63 != ts._ticks >> 63 && this._ticks >> 63 != num >> 63)
            {
                throw $CreateException(new System.OverflowException.ctor$$String("Overflow_TimeSpanTooLong"), new Error());
            }
            return new System.TimeSpan.ctor$$Int64(num);
        }
    }
};
JsTypes.push(System$TimeSpan);
var System$Uri =
{
    fullname: "System.Uri",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (uri)
        {
            this._OriginalString = null;
            System.Object.ctor.call(this);
            this._OriginalString = uri;
        },
        OriginalString$$: "System.String",
        get_OriginalString: function ()
        {
            return this._OriginalString;
        },
        toString: function ()
        {
            return this._OriginalString;
        }
    }
};
JsTypes.push(System$Uri);
var System$ValueType =
{
    fullname: "System.ValueType",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$ValueType);
var SharpKit$Html4$HtmlDomEventHandler =
{
    fullname: "SharpKit.Html4.HtmlDomEventHandler",
    Kind: "Delegate",
    definition:
    {
        ctor: function (obj, func)
        {
            System.MulticastDelegate.ctor.call(this, obj, func);
        }
    }
};
JsTypes.push(SharpKit$Html4$HtmlDomEventHandler);
var JsRuntime = function ()
{
};
JsRuntime.Start = function ()
{
    Compile();
};
//kernel.js
var isIE = navigator.userAgent.toLowerCase().indexOf("msie") > -1;
var isMoz = document.implementation && document.implementation.createDocument;
var isWebkit = navigator.userAgent.indexOf("WebKit") > -1; //navigator.vendor == "Apple Computer, Inc.";
//TODO: Add all the rest, or find another way
if (!isMoz) {
	HTMLImageElement = null;
	HTMLInputElement = null;
}
String.Format = function (format, varargs) {
	return String.format.apply(String, arguments);
}
String.prototype.startsWith = function (str) {
	return this.indexOf(str) == 0;
}
String.prototype.endsWith = function (str) {
	return this.substr(this.length - str.length, str.length) == str;
}
Object.ctor = Object;
Array.ctor = Array;
Date.ctor = Date;
Function.ctor = Function;
if (typeof (ActiveXObject) != "undefined")
	ActiveXObject.ctor$$String = ActiveXObject;
Number.prototype.get_Value = function () //nullable support
 {
	return this;
}
Number.prototype.ToString$$String = function (format) {
	var s = this.toString();
	for (var i = 0; i < format.length; i++) {
		var ch = format.charAt(i);
		if (ch == "0") {
			if (s.length < i + 1)
				s = "0" + s;
		}
		else
			throw new Error("not implemented");
	}
	return s;
}
//whether to wrap functions with profiler functions
var ENABLE_PROFILER = typeof (appConfig) == "object" ? appConfig.enableProfiler : false;
//can be changed in runtime - whether to profile functions that are running
var ENABLE_PROFILING = typeof (appConfig) == "object" ? appConfig.enableProfiling : false;
if (ENABLE_PROFILER) {
	BeforeCompilation(function () { Profiler.Initialize(); });
}
var envDebugFunction = (typeof (Debug) != "undefined" && Debug != null && Debug.writeln) ||
											 (typeof (console) != "undefined" && console != null && console.log) ||
											 function (t) { };
if (typeof (Debug) != "undefined")
	var Debug = { writeln: envDebugFunction }

Array.parse = function (value) {
	return eval('(' + value + ')');
}
JsTypes.push(
{ fullname: "System.Object", definition:
 {
	ctor: function () {
	},
	toString: function () {
		return "{" + this.constructor._type.fullname + "}";
	},
	construct: function (type) {
		//		arguments.callee.caller._type.baseType.ctor.apply(this, arguments);
		type.baseType.ctor.apply(this, arguments);
	},
	GetType: function () {
		return System.Type._TypeOf(this.constructor._type);
	},
	getType: function () {
		return this.constructor._type;
	},
	getTypeName: function () {
		return this.constructor._type.name;
	},
	base: function () {
		//TODO: remove use of callee/caller!
		return arguments.callee.caller._type.baseType.ctor.prototype[arguments.callee.caller._name].apply(this, arguments);
	},
	callBase: function (methodName) {
		//TODO: remove use of callee/caller!
		return arguments.callee.caller._type.baseType.ctor.prototype[methodName].apply(this, Arguments.from(arguments, 1));
	}
}, staticDefinition:
 {
	Equals$$Object$$Object: function (x, y) {
		//TODO: check value types for valueOf()
		return x == y;
	}
}
});

JsTypes.push({ fullname: "Object" });

JsTypes.push({ fullname: "Array", baseTypeName: "Object", definition:
 {
	GetEnumerator: function () {
		return new ArrayEnumerator.ctor(this);
	},
	getItem: function (index) {
		return this[index];
	},
	getCount: function () {
		return this.length;
	},
	get_Count: function () {
		return this.length;
	},
	///
	/// returns an array that contains the values of the specified 
	/// property name from each item
	///
	selectSingle: function (propName) {
		var result = [];
		for (var i = 0; i < this.length; i++) {
			var item = this[i];
			var value = item[propName]; //TODO: support getValue
			if (value === undefined) //array cannot contain undefined.
				value = null;
			result.push(value);
		}
		return result;
	},
	Clone: function () {
		return this.concat();
	},
	toArray: function () {
		return this;
	},
	Add: function (item) {
		this.push(item);
	},
	AddRange: function (items) {
		var length = items.length;
		var thisLength = this.length;
		for (var i = 0; i < length; i++) {
			this[thisLength] = items[i]; //Keep order
			thisLength++;
		}
	},
	Clear: function () {
		if (this.length > 0) {
			this.splice(0, this.length);
		}
	},
	clone: function () {
		return this.slice(0);
	},
	contains: function (item) {
		var index = this.indexOf(item);
		return (index >= 0);
	},
	Contains$$Object: function (item) {
		return Contains(item);
	},
	Contains: function (item) {
		var index = this.indexOf(item);
		return (index >= 0);
	},
	dequeue: function () {
		return this.shift();
	},
	indexOf: function (item, startFrom) {
		if (startFrom == null)
			startFrom = 0;
		var length = this.length;
		if (length != 0) {
			for (var index = startFrom; index < length; index++) {
				if (this[index] == item) {
					return index;
				}
			}
		}
		return -1;
	},
	insert: function (index, item) {
		this.splice(index, 0, item);
	},
	addAt: function (index, item) {
		this.splice(index, 0, item);
	},
	queue: function (item) {
		this.push(item);
	},
	Remove$$Object: function (item) {
		return this.Remove(item);
	},
	Remove: function (item) {
		var index = this.indexOf(item);
		if (index >= 0) {
			this.splice(index, 1);
		}
		return index;
	},
	RemoveAt: function (index) {
		this.splice(index, 1);
	},
	copyTo: function (target, startIndex) {
		for (var i = startIndex; i < this.length; i++) {
			target.push(this[i]);
		}
	},
	filter: function (pred) {
		var item, i = 0;
		for (var i = 0, j = this.length; i < j; i++) {
			item = this[i];
			if (!pred(item)) {
				this.splice(i, 1);
				i--; //prevent increase
				j--; //length is decreased
			}
		}
		return this;
	},
	filterOut: function (pred) {
		return this.filter(function (item) { return !pred(item); });
	},
	apply: function (modifier) {
		for (var i = 0, j = this.length; i < j; i++) {
			this[i] = modifier(this[i]);
		}
		return this;
	},
	findFirst: function (pred) {
		var item;
		for (var i = 0, j = this.length; i < j; i++) {
			item = this[i];
			if (pred(item))
				return item;
		}
		return null;
	},
	ToArray: function () {
		return this;
	},
	peek: function () {
		return this[this.length - 1];
	},
	getLast: function () {
		return this[this.length - 1];
	},
	getIterator: function () {
		return new ArrayIterator(this);
	},
	get_Length: function () {
		return this.length;
	},
	get_Item: function (index) {
		return this[index];
	},
	get_Item$$Int32: function (index) {
		return this[index];
	}
}
});
JsTypes.push({ fullname: "ArrayEnumerator", baseTypeName: "System.Object", definition: //TODO: implement IEnumerator
 {
ctor: function (array) {
	this._array = array;
	this._idx = -1;
},
Reset: function () {
	this._idx = -1;
},
get_Current: function () {
	return this._array[this._idx];
},
MoveNext: function () {
	this._idx++;
	return this._array.length > this._idx;
},
Dispose: function () {
	//TODO
}
}
});
AfterCompilation(function () {
	if (window["System.DateTime"] != null) {
		var minDate = new Date(0);
		minDate.setUTCFullYear(1, 0, 1);
		var minDateTime = new System.DateTime.ctor$$Date(minDate);
		System.DateTime.MinValue = minDateTime;
		System.DateTime.commonPrototype.MinValue = minDateTime;
	}
	Function._type = System.Delegate;
});
JsTypes.push({ fullname: "System.Boolean", baseTypeName: "System.ValueType", definition:
 {
	ctor: Boolean,
	toString: function () {
		return this == true ? "true" : "false";
	}
}, staticDefinition:
 {
	tryParse: function (s) {
		if (s == null)
			return false;
		return s.toLowerCase().trim() == "true";
	}
}
});
JsTypes.push({ fullname: "System.Int32", baseTypeName: "System.ValueType", definition:
 {
	ctor: Number,

	toString: Number.prototype.toString //avoid toString override by compiler (toString(radix) won't work if overriden)
}, staticDefinition:
 {
	tryParse: function (s) {
		return parseInt(s);
	},
	Parse$$String: function (s) {
		return parseInt(s);
	}
}
});
JsTypes.push({ fullname: "System.Decimal", baseTypeName: "System.ValueType", definition:
 {
	ctor: function (x) { return new Number(x); },
	toString: function () {
		return this.toString();
	}
}, staticDefinition:
 {
	tryParse: function (s) {
		return parseFloat(s);
	}
}
});

JsTypes.push({ fullname: "System.Double", baseTypeName: "System.ValueType", definition:
 {
	ctor: function (x) { return new Number(x); }
},
	staticDefinition:
 {
	tryParse: function (s) {
		return parseFloat(s);
	},
	IsNaN: isNaN,
	PositiveInfinity: Number.POSITIVE_INFINITY,
	NegativeInfinity: Number.NEGATIVE_INFINITY
}
});

String.prototype._toString = String.prototype.toString;
JsTypes.push({ fullname: "System.String", baseTypeName: "System.Object", definition:
 {
	ctor: String,
	GetEnumerator: function () {
		return new System.CharEnumerator.ctor$$String(this);
	},
	GetType: function () {
		return Typeof(System.String);
	},
	Insert$$Int32$$String: function (startIndex, str) {
		var sub1 = this.substring(0, startIndex);
		var sub2 = this.substring(startIndex);
		return sub1 + str + sub2;
	},
	Split$$Char$Array: function (varargs) {
		if (arguments.length != 1) {
			var re = "[";
			for (var i = 0; i < arguments.length; i++) {
				re += arguments[i];
			}
			re += "]";
			var regExp = new RegExp(re);
			var arr = this.split(regExp);
			////////////////////// Fix for FireFox
			if (isMoz) {
				var arr2 = [];
				for (var i = 0, j = arr.length; i < j; i++) {
					if (arr[i].length > 0)
						arr2.push(arr[i]);
				}
				arr = arr2;
			}
			////////////////////////
			return arr;
		}
		var firstArg = varargs;
		return this.split(firstArg); //TODO: escape new value?
	},
	ReplaceFirst: function (find, replace) {
		return this.replace(find, replace);
	},
	Replace$$Char$$Char: function (oldValue, newValue) {
		return this.Replace(oldValue, newValue);
	},
	Replace$$String$$String: function (oldValue, newValue) {
		return this.Replace(oldValue, newValue);
	},
	Replace: function (oldValue, newValue) {
		//TODO: var regExp = new RegExp(RegExp.Escape(oldValue), "g");
		//        var last = this;
		//        var replaced = this.replace(oldValue, newValue);
		//        while (last != replaced)
		//        {
		//            last = replaced;
		//            replaced = replaced.replace(oldValue, newValue);
		//        }
		//        return replaced;

		var escape = function (str) {
			return str.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
		};

		var regExp = new RegExp(escape(oldValue), "g");
		return this.replace(regExp, newValue);
	},
	Substring$$Int32: function (startIndex) {
		return this.substr(startIndex);
	},
	Substring$$Int32$$Int32: function (startIndex, length) {
		return this.substr(startIndex, length);
	},
	Substring: function (startIndex, length) {
		return this.substr(startIndex, length);
	},
	ToLower$$: function () {
		return this.toLowerCase();
	},
	ToLower: function () {
		return this.toLowerCase();
	},
	ToUpper: function () {
		return this.toUpperCase();
	},
	getItem: function (index) {
		return this.charAt(index);
	},
	IndexOf$$String: function (s) {
		return this.indexOf(s);
	},
	IndexOf$$Char: function (ch) {
		return this.indexOf(ch);
	},
	Split$$Char$Array$$StringSplitOptions: function (charArray, stringSplitOptions) {
		if (stringSplitOptions == System.StringSplitOptions.None)
			throw new Error("Not Implemented");
		return this.Split$$Char$Array.apply(this, charArray);
	},
	IndexOfAny$$Char$Array: function (charArray) {
		//TODO: Convert to RegExp
		var s = charArray.join("");
		for (var i = 0; i < this.length; i++) {
			var ch = this.charAt(i);
			if (s.search(ch) >= 0)
				return i;
		}
		return -1;
	},
	IndexOf: function (value, startIndex) {
		return this.indexOf.apply(this, arguments);
	},
	LastIndexOf: function (value, startIndex) {
		return this.lastIndexOf.apply(this, arguments);
	},
	LastIndexOf$$Char: function (ch) {
		return this.lastIndexOf(ch);
	},
	LastIndexOf$$String: function (s) {
		return this.lastIndexOf(s);
	},
	Remove$$Int32$$Int32: function (start, count) {
		return this.substr(0, start) + this.substr(start + count);
	},
	StartsWith$$String: function (str) {
		if (str == null)
			throw new System.ArgumentNullException.ctor();
		return this.indexOf(str) == 0;
	},
	EndsWith$$String: function (str) {
		return this.lastIndexOf(str) == this.length - str.length;
	},
	Contains: function (s) {
		return this.indexOf(s) != -1;
	},
	toString: function () {
		return this._toString();
	},
	getLength: function () {
		return this.length;
	},
	get_Chars$$Int32: String.prototype.charAt,
	get_Chars: String.prototype.charAt,
	get_Length: function () {
		return this.length;
	},
	trim: function () {
		return this.replace(/^\s+|\s+$/g, "");
	},
	Trim: function () {
		return this.replace(/^\s+|\s+$/g, "");
	},
	ltrim: function () {
		return this.replace(/^\s+/, "");
	},
	rtrim: function () {
		return this.replace(/\s+$/, "");
	},
	FormatObject$$String$$Object$Array: function (formatStr, object) {
		var r = /{[A-Za-z]+}/g;
		var s = formatStr;
		var matches = s.match(r);
		for (var i = 0, j = matches.length; i < j; i++) {
			var m = matches[i];
			var n = m.substring(1, m.length - 1);
			var v = dataObject["get" + n]();
			s = s.split(m).join(v);
		}
		return s;
	}
}, staticDefinition:
 {
	Empty: "",
	FormatCache: [],
	Format: function (format, varargs) {
		var cache = System.String.FormatCache;
		var format = arguments[0];
		for (var i = 1; i < arguments.length; i++) {
			var re = cache[i - 1];
			if (re == null) {
				re = new RegExp('\\{' + (i - 1) + '\\}', 'gm');
				cache.push(re);
			}
			format = format.replace(re, arguments[i]);
		}
		return format;
	},
	Format$$String$$Object$Array: function (format, varargs) {
		return System.String.Format.apply(null, arguments); //TODO: make native
	},
	Format$$String$$Object$$Object$$Object: function (s, obj1, obj2, obj3) {
		return this.Format(s, obj1, obj2, obj3);
	},
	Format$$String$$Object$$Object: function (s, obj1, obj2) {
		return this.Format(s, obj1, obj2);
	},
	Format$$String$$Object: function (s, obj1) {
		return this.Format(s, obj1);
	},
	Join$$String$$String$Array: function (separator, values) {
		return values.join(separator);
	},
	Compare$$String$$String$$Boolean: function (s1, s2, ignoreCase) {
		if (ignoreCase) {
			s1 = s1.toLowerCase();
			s2 = s2.toLowerCase();
		}
		if (s1 > s2)
			return 1;
		else if (s1 < s2)
			return -1;
		else
			return 0;
	},
	IsNullOrEmpty: function (s) {
		return s == null || s.length == 0;
	}
}
});
var Arguments = function () {
}
//TODO: this method doesn't work good when argsObject contains undefineds
Arguments.from = function (argsObject, start) {
	//1;
	return Array.prototype.slice.call(argsObject, start);
	//	var end = argsObject.length;
	//	var list = new Array();
	//	for(var i=start;i<end;i++)
	//	{
	//		list.push(argsObject[i] || null);
	//	}
	//	return list;
}
Arguments.Range = function (argsObject, start, end) {
	if (end == null)
		end = argsObject.length - 1;
	var list = new Array();
	for (var i = start; i <= end; i++) {
		list.push(argsObject[i]);
	}
	return list;
}
Arguments.Contains = function (args, object) {
	for (var i = 0; i < args.length; i++) {
		if (args[i] == object)
			return true;
	}
	return false;
}
JsTypes.push({ fullname: "Date", definition:
 {
	removeTime: function () {
		return new Date(this.getFullYear(), this.getMonth(), this.getDate());
	},
	getStartMonthDayOfWeek: function () {

		return new Date(this.getFullYear(), this.getMonth(), 1).getDay();
	},
	getShortDayOfWeek: function () {
		return Date.shortDays[this.getDay()];
	},
	addMonths: function (months) {
		return new Date(this.getFullYear(), this.getMonth() + months, this.getDate(), this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
	},
	addDays: function (days) {
		return new Date(this.getFullYear(), this.getMonth(), this.getDate() + days, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
	},
	isInMonth: function (date) {
		return this.getFullYear() == date.getFullYear() && this.getMonth() == date.getMonth();
	}
}, staticDefinition:
 {
	shortDays: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
	getNow: function () {
		return new Date();
	},
	getToday: function () {
		return new Date().removeTime();
	}
}
});
//THIS file is for backward compatability and should be deprecated
JsTypes.push({ fullname: "VM", definition:
 {
}, staticDefinition:
 {
	tryParse: function (text, ctor) {
		if (ctor == null)
			return null;
		var type = ctor._type;
		return this._TryParse(text, type);
	},
	TryParse: function (text, type) {
		if (typeof (type) == "string")
			type = Typeof(type);
		if (type == null)
			return null;
		return this._TryParse(text, type._JsType);
	},
	_TryParse: function (text, jsType) {
		if (jsType == null)
			return null;
		if (typeof (jsType) == "string") {
			jsType = this.getType(jsType);
			if (jsType == null)
				return null;
		}
		if (jsType.tryParse == null)
			return null;
		return jsType.tryParse(text);
	},
	PropertyIs: function (object, propertyName, typeName) {
		var propertyCtor = VM.getPropertyType(object, propertyName);
		if (propertyCtor != null)//TODO: recieved ctor
		{
			var propertyType = propertyCtor._type;
			var type = Type.GetType(typeName, true);
			return TypeIs(propertyType, type);
		}
		return false;
	}
}
});
JsTypes.push({ fullname: "SharpKit.DataModel.NotifyCollectionChangedEventArgs", baseTypeName: "System.Object", definition:
 {
	ctor: function (action, changedItem) {
		if (arguments.length == 0)
			return; //TODO: Support serialization constructors
		this._Action = action;
		if (action == "Add") {
			this._NewItems = [changedItem];
		}
		else if (action == "Remove") {
			this._OldItems = [changedItem];
		}
		else
			throw new Error("Not implemented");
	},
	get_OldItems: function () {
		return this._OldItems;
	},
	get_NewItems: function () {
		return this._NewItems;
	},
	get_Action: function () {
		return this._Action;
	}
}
});
AfterCompilation(function()
{
	System.IO.Path.ctor();
});

if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$IO$Path =
{
    fullname: "System.IO.Path",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.IO.Path.AltDirectorySeparatorChar = "/";
            System.IO.Path.DirectorySeparatorChar = "\\";
            System.IO.Path.InvalidFileNameChars = ["\"", "<", ">", "|", "\0", "", "", "", "", "", "", "", "", "\t", "\n", "", "", "\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ":", "*", "?", "\\", "/"];
            System.IO.Path.InvalidPathChars = ["\"", "<", ">", "|", "\0", "", "", "", "", "", "", "", "", "\t", "\n", "", "", "\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
            System.IO.Path.MAX_DIRECTORY_PATH = 248;
            System.IO.Path.MAX_PATH = 260;
            System.IO.Path.MaxPath = 260;
            System.IO.Path.PathSeparator = ";";
            System.IO.Path.RealInvalidPathChars = ["\"", "<", ">", "|", "\0", "", "", "", "", "", "", "", "", "\t", "\n", "", "", "\r", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""];
            System.IO.Path.VolumeSeparatorChar = ":";
        },
        ChangeExtension: function (path, extension)
        {
            if (path == null)
            {
                return null;
            }
            System.IO.Path.CheckInvalidPathChars(path);
            var str = path;
            var length = path.length;
            while (--length >= 0)
            {
                var ch = path.charAt(length);
                if (ch == ".")
                {
                    str = path.substr(0, length);
                    break;
                }
                if (((ch == System.IO.Path.DirectorySeparatorChar) || (ch == System.IO.Path.AltDirectorySeparatorChar)) || (ch == System.IO.Path.VolumeSeparatorChar))
                {
                    break;
                }
            }
            if ((extension == null) || (path.length == 0))
            {
                return str;
            }
            if ((extension.length == 0) || (extension.charAt(0) != "."))
            {
                str = str + ".";
            }
            return (str + extension);
        },
        CharArrayStartsWithOrdinal: function (array, numChars, compareTo, ignoreCase)
        {
            if (numChars < compareTo.length)
            {
                return false;
            }
            if (ignoreCase)
            {
                var str = new System.String.ctor$$Char$Array$$Int32$$Int32(array, 0, compareTo.length);
                return compareTo.Equals$$String$$StringComparison(str, 5);
            }
            for (var i = 0; i < compareTo.length; i++)
            {
                if (array[i] != compareTo.charAt(i))
                {
                    return false;
                }
            }
            return true;
        },
        CheckInvalidPathChars: function (path)
        {
            for (var i = 0; i < path.length; i++)
            {
                var num2 = path.charCodeAt(i);
                if (((num2 == 34) || (num2 == 60)) || (((num2 == 62) || (num2 == 124)) || (num2 < 32)))
                {
                    throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Argument_InvalidPathChars")), new Error());
                }
            }
        },
        CheckSearchPattern: function (searchPattern)
        {
            var num;
            while ((num = searchPattern.indexOf("..", 4)) != -1)
            {
                if ((num + 2) == searchPattern.length)
                {
                    throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Arg_InvalidSearchPattern")), new Error());
                }
                if ((searchPattern.charAt(num + 2) == System.IO.Path.DirectorySeparatorChar) || (searchPattern.charAt(num + 2) == System.IO.Path.AltDirectorySeparatorChar))
                {
                    throw $CreateException(new System.ArgumentException.ctor$$String(System.Environment.GetResourceString("Arg_InvalidSearchPattern")), new Error());
                }
                searchPattern = searchPattern.substr(num + 2);
            }
        },
        Combine: function (path1, path2)
        {
            if ((path1 == null) || (path2 == null))
            {
                throw $CreateException(new System.ArgumentNullException.ctor$$String((path1 == null) ? "path1" : "path2"), new Error());
            }
            System.IO.Path.CheckInvalidPathChars(path1);
            System.IO.Path.CheckInvalidPathChars(path2);
            if (path2.length == 0)
            {
                return path1;
            }
            if (path1.length == 0)
            {
                return path2;
            }
            if (System.IO.Path.IsPathRooted(path2))
            {
                return path2;
            }
            var ch = path1.charAt(path1.length - 1);
            if (((ch != System.IO.Path.DirectorySeparatorChar) && (ch != System.IO.Path.AltDirectorySeparatorChar)) && (ch != System.IO.Path.VolumeSeparatorChar))
            {
                return (path1 + System.IO.Path.DirectorySeparatorChar + path2);
            }
            return (path1 + path2);
        },
        FixupPath: function (path)
        {
            return System.IO.Path.NormalizePath(path, false);
        },
        GetDirectoryName: function (path)
        {
            if (path != null)
            {
                System.IO.Path.CheckInvalidPathChars(path);
                path = System.IO.Path.FixupPath(path);
                var rootLength = System.IO.Path.GetRootLength(path);
                if (path.length > rootLength)
                {
                    var length = path.length;
                    if (length == rootLength)
                    {
                        return null;
                    }
                    while (((length > rootLength) && (path.charAt(--length) != System.IO.Path.DirectorySeparatorChar)) && (path.charAt(length) != System.IO.Path.AltDirectorySeparatorChar))
                    {
                    }
                    return path.substr(0, length);
                }
            }
            return null;
        },
        GetExtension: function (path)
        {
            if (path == null)
            {
                return null;
            }
            System.IO.Path.CheckInvalidPathChars(path);
            var length = path.length;
            var startIndex = length;
            while (--startIndex >= 0)
            {
                var ch = path.charAt(startIndex);
                if (ch == ".")
                {
                    if (startIndex != (length - 1))
                    {
                        return path.substr(startIndex, length - startIndex);
                    }
                    return System.String.Empty;
                }
                if (((ch == System.IO.Path.DirectorySeparatorChar) || (ch == System.IO.Path.AltDirectorySeparatorChar)) || (ch == System.IO.Path.VolumeSeparatorChar))
                {
                    break;
                }
            }
            return System.String.Empty;
        },
        GetFileName: function (path)
        {
            if (path != null)
            {
                System.IO.Path.CheckInvalidPathChars(path);
                var length = path.length;
                var num2 = length;
                while (--num2 >= 0)
                {
                    var ch = path.charAt(num2);
                    if (((ch == System.IO.Path.DirectorySeparatorChar) || (ch == System.IO.Path.AltDirectorySeparatorChar)) || (ch == System.IO.Path.VolumeSeparatorChar))
                    {
                        return path.substr(num2 + 1, (length - num2) - 1);
                    }
                }
            }
            return path;
        },
        GetFileNameWithoutExtension: function (path)
        {
            path = System.IO.Path.GetFileName(path);
            if (path == null)
            {
                return null;
            }
            var length = path.lastIndexOf(".");
            if (length == -1)
            {
                return path;
            }
            return path.substr(0, length);
        },
        GetFullPath: function (path)
        {
            var fullPathInternal = System.IO.Path.GetFullPathInternal(path);
            return fullPathInternal;
        },
        GetFullPathInternal: function (path)
        {
            if (path == null)
            {
                throw $CreateException(new System.ArgumentNullException.ctor$$String("path"), new Error());
            }
            return System.IO.Path.NormalizePath(path, true);
        },
        GetInvalidFileNameChars: function ()
        {
            return System.IO.Path.InvalidFileNameChars;
        },
        GetInvalidPathChars: function ()
        {
            return System.IO.Path.RealInvalidPathChars;
        },
        GetPathRoot: function (path)
        {
            if (path == null)
            {
                return null;
            }
            path = System.IO.Path.FixupPath(path);
            return path.substr(0, System.IO.Path.GetRootLength(path));
        },
        GetRandomFileName: function ()
        {
            throw $CreateException(new System.NotSupportedException.ctor(), new Error());
        },
        GetRootLength: function (path)
        {
            System.IO.Path.CheckInvalidPathChars(path);
            var num = 0;
            var length = path.length;
            if ((length >= 1) && System.IO.Path.IsDirectorySeparator(path.charAt(0)))
            {
                num = 1;
                if ((length >= 2) && System.IO.Path.IsDirectorySeparator(path.charAt(1)))
                {
                    num = 2;
                    var num3 = 2;
                    while ((num < length) && (((path.charAt(num) != System.IO.Path.DirectorySeparatorChar) && (path.charAt(num) != System.IO.Path.AltDirectorySeparatorChar)) || (--num3 > 0)))
                    {
                        num++;
                    }
                }
                return num;
            }
            if ((length >= 2) && (path.charAt(1) == System.IO.Path.VolumeSeparatorChar))
            {
                num = 2;
                if ((length >= 3) && System.IO.Path.IsDirectorySeparator(path.charAt(2)))
                {
                    num++;
                }
            }
            return num;
        },
        GetTempFileName: function ()
        {
            throw $CreateException(new System.NotSupportedException.ctor(), new Error());
        },
        GetTempPath: function ()
        {
            throw $CreateException(new System.NotSupportedException.ctor(), new Error());
        },
        HasExtension: function (path)
        {
            if (path != null)
            {
                System.IO.Path.CheckInvalidPathChars(path);
                var length = path.length;
                while (--length >= 0)
                {
                    var ch = path.charAt(length);
                    if (ch == ".")
                    {
                        return (length != (path.length - 1));
                    }
                    if (((ch == System.IO.Path.DirectorySeparatorChar) || (ch == System.IO.Path.AltDirectorySeparatorChar)) || (ch == System.IO.Path.VolumeSeparatorChar))
                    {
                        break;
                    }
                }
            }
            return false;
        },
        InternalCombine: function (path1, path2)
        {
            if ((path1 == null) || (path2 == null))
            {
                throw $CreateException(new System.ArgumentNullException.ctor$$String((path1 == null) ? "path1" : "path2"), new Error());
            }
            System.IO.Path.CheckInvalidPathChars(path1);
            System.IO.Path.CheckInvalidPathChars(path2);
            if (path2.length == 0)
            {
                throw $CreateException(new System.ArgumentException.ctor$$String$$String(System.Environment.GetResourceString("Argument_PathEmpty"), "path2"), new Error());
            }
            if (System.IO.Path.IsPathRooted(path2))
            {
                throw $CreateException(new System.ArgumentException.ctor$$String$$String(System.Environment.GetResourceString("Arg_Path2IsRooted"), "path2"), new Error());
            }
            var length = path1.length;
            if (length == 0)
            {
                return path2;
            }
            var ch = path1.charAt(length - 1);
            if (((ch != System.IO.Path.DirectorySeparatorChar) && (ch != System.IO.Path.AltDirectorySeparatorChar)) && (ch != System.IO.Path.VolumeSeparatorChar))
            {
                return (path1 + System.IO.Path.DirectorySeparatorChar + path2);
            }
            return (path1 + path2);
        },
        IsDirectorySeparator: function (c)
        {
            if (c != System.IO.Path.DirectorySeparatorChar)
            {
                return (c == System.IO.Path.AltDirectorySeparatorChar);
            }
            return true;
        },
        IsPathRooted: function (path)
        {
            if (path != null)
            {
                System.IO.Path.CheckInvalidPathChars(path);
                var length = path.length;
                if (((length >= 1) && ((path.charAt(0) == System.IO.Path.DirectorySeparatorChar) || (path.charAt(0) == System.IO.Path.AltDirectorySeparatorChar))) || ((length >= 2) && (path.charAt(1) == System.IO.Path.VolumeSeparatorChar)))
                {
                    return true;
                }
            }
            return false;
        },
        NormalizePath: function (path, fullCheck)
        {
            return System.IO.Path.NormalizePathSlow(path, fullCheck);
        },
        NormalizePathSlow: function (path, fullCheck)
        {
            return path;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$IO$Path);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Linq$Enumerable =
{
    fullname: "System.Linq.Enumerable",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        CombinePredicates$1: function (TSource, predicate1, predicate2)
        {
            return function (x)
            {
                return predicate1(x) && predicate2(x);
            };
        },
        CombineSelectors$3: function (TSource, TMiddle, TResult, selector1, selector2)
        {
            return function (x)
            {
                return selector2(selector1(x));
            };
        },
        First$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null)
            {
                if (list.get_Count() > 0)
                {
                    return list.get_Item$$Int32(0);
                }
            }
            else
            {
                var enumerator = source.GetEnumerator();
                try
                {
                    if (enumerator.MoveNext())
                    {
                        return enumerator.get_Current();
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }
            }
            throw $CreateException(System.Linq.Error.NoElements(), new Error());
        },
        First$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it2 = source.GetEnumerator();
            while ($it2.MoveNext())
            {
                var local = $it2.get_Current();
                if (predicate(local))
                {
                    return local;
                }
            }
            throw $CreateException(System.Linq.Error.NoMatch(), new Error());
        },
        FirstOrDefault$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null)
            {
                if (list.get_Count() > 0)
                {
                    return list.get_Item$$Int32(0);
                }
            }
            else
            {
                var enumerator = source.GetEnumerator();
                try
                {
                    if (enumerator.MoveNext())
                    {
                        return enumerator.get_Current();
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }
            }
            return Default(TSource);
        },
        FirstOrDefault$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it3 = source.GetEnumerator();
            while ($it3.MoveNext())
            {
                var local = $it3.get_Current();
                if (predicate(local))
                {
                    return local;
                }
            }
            return Default(TSource);
        },
        Last$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null)
            {
                var count = list.get_Count();
                if (count > 0)
                {
                    return list.get_Item$$Int32(count - 1);
                }
            }
            else
            {
                var enumerator = source.GetEnumerator();
                try
                {
                    if (enumerator.MoveNext())
                    {
                        var current;
                        do {
                            current = enumerator.get_Current();
                        }
                        while (enumerator.MoveNext())
                        return current;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }
            }
            throw $CreateException(System.Linq.Error.NoElements(), new Error());
        },
        Last$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var local = Default(TSource);
            var flag = false;
            var $it4 = source.GetEnumerator();
            while ($it4.MoveNext())
            {
                var local2 = $it4.get_Current();
                if (predicate(local2))
                {
                    local = local2;
                    flag = true;
                }
            }
            if (!flag)
            {
                throw $CreateException(System.Linq.Error.NoMatch(), new Error());
            }
            return local;
        },
        LastOrDefault$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var list = As(source, System.Collections.Generic.IList$1.ctor);
            if (list != null)
            {
                var count = list.get_Count();
                if (count > 0)
                {
                    return list.get_Item$$Int32(count - 1);
                }
            }
            else
            {
                var enumerator = source.GetEnumerator();
                try
                {
                    if (enumerator.MoveNext())
                    {
                        var current;
                        do {
                            current = enumerator.get_Current();
                        }
                        while (enumerator.MoveNext())
                        return current;
                    }
                }
                finally
                {
                    enumerator.Dispose();
                }
            }
            return Default(TSource);
        },
        LastOrDefault$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var local = Default(TSource);
            var $it5 = source.GetEnumerator();
            while ($it5.MoveNext())
            {
                var local2 = $it5.get_Current();
                if (predicate(local2))
                {
                    local = local2;
                }
            }
            return local;
        },
        Where$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            if (Is(source, System.Linq.Enumerable.Iterator.ctor))
            {
                return (Cast(source, System.Linq.Enumerable.Iterator.ctor)).Where(predicate);
            }
            if (Is(source, Array))
            {
                return new System.Linq.Enumerable.WhereArrayIterator.ctor(TSource, Cast(source, Array), predicate);
            }
            if (Is(source, System.Collections.Generic.List$1.ctor))
            {
                return new System.Linq.Enumerable.WhereListIterator.ctor(TSource, Cast(source, System.Collections.Generic.List$1.ctor), predicate);
            }
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(TSource, source, predicate);
        },
        Where$1$$IEnumerable$1$$Func$3: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Contains$1$$IEnumerable$1$$TSource: function (TSource, source, value)
        {
            if (source == null)
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            var is2 = As(source, System.Collections.Generic.ICollection$1.ctor);
            if (is2 != null)
                return is2.Contains(value);
            var $it6 = source.GetEnumerator();
            while ($it6.MoveNext())
            {
                var local = $it6.get_Current();
                if (local == value)
                    return true;
            }
            return false;
        },
        Contains$1$$IEnumerable$1$$TSource$$IEqualityComparer$1: function (TSource, source, value, comparer)
        {
            if (comparer == null)
            {
                return System.Linq.Enumerable.Contains$1$$IEnumerable$1$$TSource(TSource, source, value);
            }
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var $it7 = source.GetEnumerator();
            while ($it7.MoveNext())
            {
                var local = $it7.get_Current();
                if (comparer.Equals$$T$$T(local, value))
                {
                    return true;
                }
            }
            return false;
        },
        Any$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var enumerator = source.GetEnumerator();
            try
            {
                if (enumerator.MoveNext())
                {
                    return true;
                }
            }
            finally
            {
                enumerator.Dispose();
            }
            return false;
        },
        Any$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var $it8 = source.GetEnumerator();
            while ($it8.MoveNext())
            {
                var local = $it8.get_Current();
                if (predicate(local))
                {
                    return true;
                }
            }
            return false;
        },
        Count$1$$IEnumerable$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var is2 = As(source, System.Collections.Generic.ICollection$1.ctor);
            if (is2 != null)
            {
                return is2.get_Count();
            }
            var num = 0;
            var enumerator = source.GetEnumerator();
            try
            {
                while (enumerator.MoveNext())
                {
                    num++;
                }
            }
            finally
            {
                enumerator.Dispose();
            }
            return num;
        },
        Count$1$$IEnumerable$1$$Func$2: function (TSource, source, predicate)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (predicate == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("predicate"), new Error());
            }
            var num = 0;
            var $it9 = source.GetEnumerator();
            while ($it9.MoveNext())
            {
                var local = $it9.get_Current();
                if (predicate(local))
                {
                    num++;
                }
            }
            return num;
        },
        OfType$1: function (TResult, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return new System.Linq.Enumerable.OfTypeIterator.ctor(TResult, source);
        },
        Select$2$$IEnumerable$1$$Func$2: function (TSource, TResult, source, selector)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            if (selector == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("selector"), new Error());
            }
            if (Is(source, System.Linq.Enumerable.Iterator.ctor))
            {
                return (Cast(source, System.Linq.Enumerable.Iterator.ctor)).Select$1(TResult, selector);
            }
            if (Is(source, Array))
            {
                return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(TSource, TResult, Cast(source, Array), null , selector);
            }
            if (Is(source, System.Collections.Generic.List$1.ctor))
            {
                return new System.Linq.Enumerable.WhereSelectListIterator.ctor(TSource, TResult, Cast(source, System.Collections.Generic.List$1.ctor), null , selector);
            }
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(TSource, TResult, source, null , selector);
        },
        Select$2$$IEnumerable$1$$Func$3: function (TSource, TResult, source, selector)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Skip$1: function (TSource, source, count)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var x = new System.Linq.Enumerable.SkipIterator.ctor(TSource, source, count);
            return x;
        },
        Take$1: function (TSource, source, count)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var x = new System.Linq.Enumerable.TakeIterator.ctor(TSource, source, count);
            return x;
        },
        ToArray$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            var arr =  [];
            var $it10 = source.GetEnumerator();
            while ($it10.MoveNext())
            {
                var obj = $it10.get_Current();
                arr.push(obj);
            }
            return arr;
        },
        ToList$1: function (TSource, source)
        {
            if (source == null)
            {
                throw $CreateException(System.Linq.Error.ArgumentNull("source"), new Error());
            }
            return new System.Collections.Generic.List$1.ctor$$IEnumerable$1(TSource, source);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Linq$Enumerable);
var System$Linq$Enumerable$Iterator =
{
    fullname: "System.Linq.Enumerable.Iterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$1", "System.IDisposable", "System.Collections.IEnumerator"],
    Kind: "Class",
    definition:
    {
        ctor: function (TSource)
        {
            this.TSource = TSource;
            this.state = 0;
            this.current = null;
            System.Object.ctor.call(this);
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.current;
        },
        Dispose: function ()
        {
            this.current = Default(this.TSource);
            this.state = -1;
        },
        GetEnumerator: function ()
        {
            if (this.state == 0)
            {
                this.state = 1;
                return this;
            }
            var iterator = this.Clone();
            iterator.state = 1;
            return iterator;
        }
    }
};
JsTypes.push(System$Linq$Enumerable$Iterator);
var System$Linq$Enumerable$WhereArrayIterator =
{
    fullname: "System.Linq.Enumerable.WhereArrayIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, source, predicate)
        {
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.index = 0;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource, this.source, this.predicate);
        },
        MoveNext: function ()
        {
            if (this.state == 1)
            {
                while (this.index < this.source.length)
                {
                    var tSource = this.source[this.index];
                    this.index++;
                    if (this.predicate(tSource))
                    {
                        this.current = tSource;
                        return true;
                    }
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult, selector)
        {
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereArrayIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereArrayIterator);
var System$Linq$Enumerable$WhereEnumerableIterator =
{
    fullname: "System.Linq.Enumerable.WhereEnumerableIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, source, predicate)
        {
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource, this.source, this.predicate);
        },
        Dispose: function ()
        {
            if (this.enumerator != null)
            {
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext: function ()
        {
            switch (this.state)
            {
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default :
                    return false;
            }
            while (this.enumerator.MoveNext())
            {
                var current = this.enumerator.get_Current();
                if (this.predicate(current))
                {
                    this.current = current;
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult, selector)
        {
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereEnumerableIterator);
var System$Linq$Enumerable$WhereListIterator =
{
    fullname: "System.Linq.Enumerable.WhereListIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, source, predicate)
        {
            this.TSource = TSource;
            this.source = null;
            this.predicate = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TSource);
            this.source = source;
            this.predicate = predicate;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource, this.source, this.predicate);
        },
        MoveNext: function ()
        {
            switch (this.state)
            {
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default :
                    return false;
            }
            while (this.enumerator.MoveNext())
            {
                var current = this.enumerator.get_Current();
                if (this.predicate(current))
                {
                    this.current = current;
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult, selector)
        {
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, TResult, this.source, this.predicate, selector);
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereListIterator.ctor(this.TSource, this.source, System.Linq.Enumerable.CombinePredicates$1(this.TSource, this.predicate, predicate));
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereListIterator);
var System$Linq$Enumerable$WhereSelectArrayIterator =
{
    fullname: "System.Linq.Enumerable.WhereSelectArrayIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, TResult, source, predicate, selector)
        {
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.index = 0;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        MoveNext: function ()
        {
            if (this.state == 1)
            {
                while (this.index < this.source.length)
                {
                    var arg = this.source[this.index];
                    this.index++;
                    if (this.predicate == null || this.predicate(arg))
                    {
                        this.current = this.selector(arg);
                        return true;
                    }
                }
                this.Dispose();
            }
            return false;
        },
        Select$1: function (TResult2, selector)
        {
            return new System.Linq.Enumerable.WhereSelectArrayIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectArrayIterator);
var System$Linq$Enumerable$WhereSelectEnumerableIterator =
{
    fullname: "System.Linq.Enumerable.WhereSelectEnumerableIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, TResult, source, predicate, selector)
        {
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        Dispose: function ()
        {
            if (this.enumerator != null)
            {
                this.enumerator.Dispose();
            }
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.commonPrototype.Dispose.call(this);
        },
        MoveNext: function ()
        {
            switch (this.state)
            {
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default :
                    return false;
            }
            while (this.enumerator.MoveNext())
            {
                var current = this.enumerator.get_Current();
                if (this.predicate == null || this.predicate(current))
                {
                    this.current = this.selector(current);
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult2, selector)
        {
            return new System.Linq.Enumerable.WhereSelectEnumerableIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectEnumerableIterator);
var System$Linq$Enumerable$WhereSelectListIterator =
{
    fullname: "System.Linq.Enumerable.WhereSelectListIterator",
    baseTypeName: "System.Linq.Enumerable.Iterator",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (TSource, TResult, source, predicate, selector)
        {
            this.TSource = TSource;
            this.TResult = TResult;
            this.source = null;
            this.predicate = null;
            this.selector = null;
            this.enumerator = null;
            System.Linq.Enumerable.Iterator.ctor.call(this, this.TResult);
            this.source = source;
            this.predicate = predicate;
            this.selector = selector;
        },
        Clone: function ()
        {
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, this.TResult, this.source, this.predicate, this.selector);
        },
        MoveNext: function ()
        {
            switch (this.state)
            {
                case 1:
                    this.enumerator = this.source.GetEnumerator();
                    this.state = 2;
                    break;
                case 2:
                    break;
                default :
                    return false;
            }
            while (this.enumerator.MoveNext())
            {
                var current = this.enumerator.get_Current();
                if (this.predicate == null || this.predicate(current))
                {
                    this.current = this.selector(current);
                    return true;
                }
            }
            this.Dispose();
            return false;
        },
        Select$1: function (TResult2, selector)
        {
            return new System.Linq.Enumerable.WhereSelectListIterator.ctor(this.TSource, TResult2, this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$3(this.TSource, this.TResult, TResult2, this.selector, selector));
        },
        Where: function (predicate)
        {
            return new System.Linq.Enumerable.WhereEnumerableIterator.ctor(this.TResult, this, predicate);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$WhereSelectListIterator);
var System$Linq$Enumerable$OfTypeIterator =
{
    fullname: "System.Linq.Enumerable.OfTypeIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, source)
        {
            this.T = T;
            this.Source = null;
            this.SourceEnumerator = null;
            System.Object.ctor.call(this);
            this.Source = source;
        },
        Reset: function ()
        {
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function ()
        {
            if (this.SourceEnumerator == null)
                this.SourceEnumerator = this.Source.GetEnumerator();
            while (true)
            {
                if (!this.SourceEnumerator.MoveNext())
                    return false;
                var item = this.SourceEnumerator.get_Current();
                if (Is(item, this.T))
                    return true;
            }
        },
        Dispose: function ()
        {
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function ()
        {
            return this;
        }
    }
};
JsTypes.push(System$Linq$Enumerable$OfTypeIterator);
var System$Linq$Enumerable$SkipIterator =
{
    fullname: "System.Linq.Enumerable.SkipIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, source, skipCount)
        {
            this.T = T;
            this.SkipCount = 0;
            this.Source = null;
            this.SourceEnumerator = null;
            this.State = 0;
            System.Object.ctor.call(this);
            this.Source = source;
            this.SkipCount = skipCount;
        },
        Reset: function ()
        {
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function ()
        {
            if (this.State == 0)
            {
                this.SourceEnumerator = this.Source.GetEnumerator();
                this.State = 1;
            }
            if (this.State == 1)
            {
                for (var i = 0; i < this.SkipCount; i++)
                {
                    if (!this.SourceEnumerator.MoveNext())
                        return false;
                }
                this.State = 2;
            }
            if (this.State == 2)
            {
                return this.SourceEnumerator.MoveNext();
            }
            return false;
        },
        Dispose: function ()
        {
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function ()
        {
            if (this.State == 0)
                return this;
            return new System.Linq.Enumerable.SkipIterator.ctor(this.T, this.Source, this.SkipCount);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$SkipIterator);
var System$Linq$Enumerable$TakeIterator =
{
    fullname: "System.Linq.Enumerable.TakeIterator",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1", "System.Collections.Generic.IEnumerable$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, source, takeCount)
        {
            this.T = T;
            this.TakeCount = 0;
            this.Source = null;
            this.SourceEnumerator = null;
            this.State = 0;
            this.TakeIndex = 0;
            System.Object.ctor.call(this);
            this.Source = source;
            this.TakeCount = takeCount;
        },
        Reset: function ()
        {
            if (this.SourceEnumerator != null)
                this.SourceEnumerator.Reset();
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.SourceEnumerator.get_Current();
        },
        MoveNext: function ()
        {
            if (this.State == 0)
            {
                this.SourceEnumerator = this.Source.GetEnumerator();
                this.State = 1;
            }
            if (this.State == 1)
            {
                if (this.SourceEnumerator.MoveNext())
                {
                    this.TakeIndex++;
                    if (this.TakeIndex <= this.TakeCount)
                        return true;
                }
                this.State = 2;
                return false;
            }
            return false;
        },
        Dispose: function ()
        {
            this.Source = null;
            this.SourceEnumerator = null;
        },
        GetEnumerator: function ()
        {
            if (this.State == 0)
                return this;
            return new System.Linq.Enumerable.TakeIterator.ctor(this.T, this.Source, this.TakeCount);
        }
    }
};
JsTypes.push(System$Linq$Enumerable$TakeIterator);
var System$Linq$Error =
{
    fullname: "System.Linq.Error",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        ArgumentNull: function (p)
        {
            return new System.Exception.ctor$$String("ArgumentNull " + p);
        },
        NoElements: function ()
        {
            return new System.Exception.ctor$$String("NoElements");
        },
        NoMatch: function ()
        {
            return new System.Exception.ctor$$String("NoMatch");
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Linq$Error);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Collections$ArrayList =
{
    fullname: "System.Collections.ArrayList",
    baseTypeName: "System.Collections.Generic.List$1",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Collections.Generic.List$1.ctor.call(this, System.Object.ctor);
        }
    }
};
JsTypes.push(System$Collections$ArrayList);
var System$Collections$Generic$Dictionary$2 =
{
    fullname: "System.Collections.Generic.Dictionary$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IDictionary$2"],
    Kind: "Class",
    definition:
    {
        ctor: function (TKey, TValue)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
        },
        ctor$$IEqualityComparer$1: function (TKey, TValue, comparer)
        {
            this.TKey = TKey;
            this.TValue = TValue;
            this._table = null;
            this._keys = null;
            this._version = 0;
            this.Comparer = null;
            System.Object.ctor.call(this);
            this._table = new Object();
            this._keys = new Object();
            this._version = 0;
            this.Comparer = comparer;
        },
        GetHashKey: function (key)
        {
            if (this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add: function (key, value)
        {
            var hashKey = this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        },
        Remove: function (key)
        {
            var hashKey = this.GetHashKey(key);
            delete this._table[hashKey];
            delete this._keys[hashKey];
            this._version++;
            return true;
        },
        Item$$: "`1",
        get_Item$$TKey: function (key)
        {
            var hashKey = this.GetHashKey(key);
            return this._table[hashKey];
        },
        set_Item$$TKey: function (key, value)
        {
            var hashKey = this.GetHashKey(key);
            this._table[hashKey] = value;
            this._keys[hashKey] = key;
            this._version++;
        },
        ContainsKey: function (key)
        {
            var hashKey = this.GetHashKey(key);
            return typeof(this._table[hashKey]) != "undefined";
        },
        Keys$$: "System.Collections.Generic.ICollection`1[[`0]]",
        get_Keys: function ()
        {
            var keys =  [];
            for (var p in this._keys)
            {
                keys.push(this._keys[p]);
            }
            return keys;
        },
        Values$$: "System.Collections.Generic.ICollection`1[[`1]]",
        get_Values: function ()
        {
            var values =  [];
            for (var p in this._table)
            {
                values.push(this._table[p]);
            }
            return values;
        },
        GetEnumerator: function ()
        {
            var array =  [];
            for (var hashKey in this._table)
            {
                array.push(new System.Collections.Generic.KeyValuePair$2.ctor(this.TKey, this.TValue, this._keys[hashKey], this._table[hashKey]));
            }
            return array.GetEnumerator();
        },
        Clear: function ()
        {
            for (var hashKey in this._table)
            {
                this._keys = new Object();
                this._table = new Object();
                this._version++;
                return;
            }
        },
        Count$$: "System.Int32",
        get_Count: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    }
};
JsTypes.push(System$Collections$Generic$Dictionary$2);
var System$Collections$Generic$HashSet$1 =
{
    fullname: "System.Collections.Generic.HashSet$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.ISet$1", "System.Collections.Generic.ICollection$1", "System.Collections.Generic.IEnumerable$1", "System.Collections.IEnumerable"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
        },
        ctor$$IEqualityComparer$1: function (T, comparer)
        {
            this.T = T;
            this.Hashtable = new Object();
            this.Comparer = null;
            this._Count = 0;
            System.Object.ctor.call(this);
            this.Comparer = comparer;
        },
        GetHashKey: function (key)
        {
            if (this.Comparer != null)
                return this.Comparer.GetHashCode$$T(key);
            return SharpKit.JavaScript.Utils.Js.GetHashKey(key);
        },
        Add: function (item)
        {
            var key = this.GetHashKey(item);
            if (this.Hashtable[key] != null)
                return false;
            this.Hashtable[key] = item;
            this._Count++;
            return true;
        },
        UnionWith: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IntersectWith: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        ExceptWith: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        SymmetricExceptWith: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IsSubsetOf: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IsSupersetOf: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IsProperSupersetOf: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        IsProperSubsetOf: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Overlaps: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        SetEquals: function (other)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Count$$: "System.Int32",
        get_Count: function ()
        {
            return this._Count;
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function ()
        {
            return false;
        },
        Clear: function ()
        {
            this.Hashtable = new Object();
            this._Count = 0;
        },
        Contains: function (item)
        {
            var key = this.GetHashKey(item);
            if (this.Hashtable[key] === item)
                return true;
            return false;
        },
        CopyTo: function (array, arrayIndex)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Remove: function (item)
        {
            var key = this.GetHashKey(item);
            if (this.Hashtable[key] === item)
            {
                delete this.Hashtable[key];
                this._Count--;
                return true;
            }
            return false;
        },
        GetEnumerator: function ()
        {
            var array =  [];
            for (var hashKey in this.Hashtable)
            {
                array.push(this.Hashtable[hashKey]);
            }
            return new System.Collections.Generic.JsArrayEnumerator$1.ctor(this.T, array);
        }
    }
};
JsTypes.push(System$Collections$Generic$HashSet$1);
var System$StringComparer =
{
    fullname: "System.StringComparer",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.StringComparer._InvariantCultureIgnoreCase = null;
        },
        InvariantCultureIgnoreCase$$: "SharpKit.JavaScript.Private.StringComparer",
        get_InvariantCultureIgnoreCase: function ()
        {
            if (System.StringComparer._InvariantCultureIgnoreCase == null)
                System.StringComparer._InvariantCultureIgnoreCase = new SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase.ctor();
            return System.StringComparer._InvariantCultureIgnoreCase;
        }
    },
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collection.Generic.IEqualityComparer"],
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$StringComparer);
var SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase =
{
    fullname: "SharpKit.JavaScript.Private.StringComparer_InvariantCultureIgnoreCase",
    baseTypeName: "System.StringComparer",
    staticDefinition:
    {
        cctor: function ()
        {
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.StringComparer.ctor.call(this);
        },
        Equals$$T$$T: function (x, y)
        {
            if (x == y)
                return true;
            if (x == null || y == null)
                return false;
            return x.toLowerCase() == y.toLowerCase();
        },
        GetHashCode$$T: function (obj)
        {
            if (obj == null)
                return "null";
            return obj.toLowerCase();
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Private$StringComparer_InvariantCultureIgnoreCase);
var System$Collections$Generic$KeyValuePair$2 =
{
    fullname: "System.Collections.Generic.KeyValuePair$2",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (K, T, key, value)
        {
            this.K = K;
            this.T = T;
            this._Key = null;
            this._Value = null;
            System.Object.ctor.call(this);
            this._Key = key;
            this._Value = value;
        },
        Key$$: "`0",
        get_Key: function ()
        {
            return this._Key;
        },
        Value$$: "`1",
        get_Value: function ()
        {
            return this._Value;
        }
    }
};
JsTypes.push(System$Collections$Generic$KeyValuePair$2);
var System$Collections$Generic$Stack$1 =
{
    fullname: "System.Collections.Generic.Stack$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerable$1", "System.Collections.ICollection"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
        },
        Clear: function ()
        {
            this._list.Clear();
        },
        Count$$: "System.Int32",
        get_Count: function ()
        {
            return this._list.length;
        },
        GetEnumerator: function ()
        {
            return this._list.GetEnumerator();
        },
        ToArray: function ()
        {
            return this._list.Clone();
        },
        Push: function (item)
        {
            this._list.push(item);
        },
        Pop: function ()
        {
            if (this._list.length == 0)
                throw $CreateException(new Error("Cannot pop from stack - stack is empty"), new Error());
            return this._list.pop();
        },
        Peek: function ()
        {
            if (this._list.length == 0)
                throw $CreateException(new Error("Cannot peek in stack - stack is empty"), new Error());
            return this._list[this._list.length - 1];
        },
        Contains: function (item)
        {
            return this._list.contains(item);
        }
    }
};
JsTypes.push(System$Collections$Generic$Stack$1);
var System$Collections$Generic$JsArrayEnumerator$1 =
{
    fullname: "System.Collections.Generic.JsArrayEnumerator$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, list)
        {
            this.T = T;
            this.List = null;
            this.Index = 0;
            this.ListCount = 0;
            System.Object.ctor.call(this);
            this.List = list;
            this.Index = -1;
            this.ListCount = list.length;
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.List[this.Index];
        },
        Dispose: function ()
        {
            this.List = null;
        },
        MoveNext: function ()
        {
            this.Index++;
            return this.Index < this.ListCount;
        },
        Reset: function ()
        {
            this.Index = -1;
        }
    }
};
JsTypes.push(System$Collections$Generic$JsArrayEnumerator$1);
var System$Collections$Generic$List$1 =
{
    fullname: "System.Collections.Generic.List$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IList$1", "System.Collections.IList"],
    Kind: "Class",
    definition:
    {
        ctor: function (T)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
        },
        ctor$$IEnumerable$1: function (T, collection)
        {
            this.T = T;
            this._list = null;
            System.Object.ctor.call(this);
            this._list = new Array();
            this.AddRange(collection);
        },
        RemoveRange: function (index, count)
        {
            this._list.splice(index, count);
        },
        Clear: function ()
        {
            this._list.Clear();
        },
        Item$$: "`0",
        get_Item$$Int32: function (index)
        {
            if (index >= this._list.length || index < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"), new Error());
            return this._list[index];
        },
        set_Item$$Int32: function (index, value)
        {
            if (index >= this._list.length || index < 0)
                throw $CreateException(new System.ArgumentOutOfRangeException.ctor$$String("index"), new Error());
            this._list[index] = value;
        },
        Count$$: "System.Int32",
        get_Count: function ()
        {
            return this._list.length;
        },
        GetEnumerator: function ()
        {
            return new System.Collections.IListEnumerator$1.ctor(this.T, this);
        },
        ToArray: function ()
        {
            return this._list.Clone();
        },
        AddRange: function (items)
        {
            var $it1 = items.GetEnumerator();
            while ($it1.MoveNext())
            {
                var item = $it1.get_Current();
                this.Add(item);
            }
        },
        Add: function (item)
        {
            this._list.push(item);
        },
        Remove: function (item)
        {
            var index = this._list.indexOf(item);
            if (index == -1)
                return false;
            this._list.RemoveAt(index);
            return true;
        },
        Contains: function (item)
        {
            return this._list.contains(item);
        },
        SetItems: function (items)
        {
            this.Clear();
            if (items != null)
                this.AddRange(items);
        },
        IndexOf: function (item)
        {
            return this._list.indexOf(item);
        },
        Insert: function (index, item)
        {
            this._list.insert(index, item);
        },
        RemoveAt: function (index)
        {
            this._list.RemoveAt(index);
        },
        TryRemove: function (item)
        {
            throw $CreateException(new System.NotImplementedException.ctor$$String("TryRemove"), new Error());
        },
        CopyTo: function (array, arrayIndex)
        {
            throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"), new Error());
        },
        IsReadOnly$$: "System.Boolean",
        get_IsReadOnly: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor$$String("JsImplList$T"), new Error());
        },
        Sort: function (comparison)
        {
            this._list.sort(SharpKit.JavaScript.Utils.Js.ToJsFunction(comparison));
        },
        ForEach: function (action)
        {
            if (action == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("action"), new Error());
            for (var i = 0; i < this._list.length; i++)
            {
                action(this._list[i]);
            }
        }
    }
};
JsTypes.push(System$Collections$Generic$List$1);
var System$Collections$IListEnumerator$1 =
{
    fullname: "System.Collections.IListEnumerator$1",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    interfaceNames: ["System.Collections.Generic.IEnumerator$1"],
    Kind: "Class",
    definition:
    {
        ctor: function (T, list)
        {
            this.T = T;
            this.List = null;
            this.Index = 0;
            this.ListCount = 0;
            System.Object.ctor.call(this);
            this.List = list;
            this.Index = -1;
            this.ListCount = list.get_Count();
        },
        Current$$: "`0",
        get_Current: function ()
        {
            return this.List.get_Item$$Int32(this.Index);
        },
        Dispose: function ()
        {
            this.List = null;
        },
        MoveNext: function ()
        {
            this.Index++;
            return this.Index < this.ListCount;
        },
        Reset: function ()
        {
            this.Index = -1;
        }
    }
};
JsTypes.push(System$Collections$IListEnumerator$1);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Reflection$BindingFlags =
{
    fullname: "System.Reflection.BindingFlags",
    staticDefinition: {CreateInstance: "CreateInstance", DeclaredOnly: "DeclaredOnly", Default: "Default", ExactBinding: "ExactBinding", FlattenHierarchy: "FlattenHierarchy", GetField: "GetField", GetProperty: "GetProperty", IgnoreCase: "IgnoreCase", IgnoreReturn: "IgnoreReturn", Instance: "Instance", InvokeMethod: "InvokeMethod", NonPublic: "NonPublic", OptionalParamBinding: "OptionalParamBinding", Public: "Public", PutDispProperty: "PutDispProperty", PutRefDispProperty: "PutRefDispProperty", SetField: "SetField", SetProperty: "SetProperty", Static: "Static", SuppressChangeType: "SuppressChangeType"},
    Kind: "Enum"
};
JsTypes.push(System$Reflection$BindingFlags);
var System$Reflection$MemberInfo =
{
    fullname: "System.Reflection.MemberInfo",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._Name = null;
            this._DeclaringType = null;
            this._CustomAttributes = null;
            System.Object.ctor.call(this);
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        DeclaringType$$: "SharpKit.JavaScript.Private.JsImplType",
        get_DeclaringType: function ()
        {
            return this._DeclaringType;
        },
        VerifyCustomAttributes: function ()
        {
            this.get_DeclaringType().VerifyCustomAttributesOnTypeAndMembers();
        },
        GetBaseMember: function ()
        {
            return null;
        },
        AddCustomAttributes: function (list, attributeType, inherit)
        {
            this.VerifyCustomAttributes();
            if (this._CustomAttributes != null)
            {
                for (var i = 0; i < this._CustomAttributes.length; i++)
                {
                    var att = this._CustomAttributes[i];
                    if (attributeType.IsInstanceOfType(att))
                        list.Add(att);
                }
            }
            if (inherit)
            {
                var bm = this.GetBaseMember();
                if (bm != null)
                    bm.AddCustomAttributes(list, attributeType, inherit);
            }
        },
        GetCustomAttributes$$Type$$Boolean: function (attributeType, inherit)
        {
            var list = new System.Collections.Generic.List$1.ctor(System.Object.ctor);
            this.AddCustomAttributes(list, attributeType, inherit);
            return list.ToArray();
        },
        GetCustomAttributes$$Boolean: function (inherit)
        {
            if (inherit)
                throw $CreateException(new System.NotImplementedException.ctor$$String("GetCustomAttributes with inherit=true is not implemented"), new Error());
            this.VerifyCustomAttributes();
            return this._CustomAttributes;
        }
    }
};
JsTypes.push(System$Reflection$MemberInfo);
var System$Reflection$MethodBase =
{
    fullname: "System.Reflection.MethodBase",
    baseTypeName: "System.Reflection.MemberInfo",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Reflection.MemberInfo.ctor.call(this);
        }
    }
};
JsTypes.push(System$Reflection$MethodBase);
var System$Reflection$MethodInfo =
{
    fullname: "System.Reflection.MethodInfo",
    baseTypeName: "System.Reflection.MethodBase",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._IsStatic = false;
            this.JsFunction = null;
            this.JsName = null;
            System.Reflection.MethodBase.ctor.call(this);
        },
        IsStatic$$: "System.Boolean",
        get_IsStatic: function ()
        {
            return this._IsStatic;
        },
        Invoke: function (obj, parameters)
        {
            var func;
            if (this._IsStatic)
                func = this.JsFunction;
            else
            {
                if (obj == null)
                    throw $CreateException(new System.Exception.ctor$$String("Cannot invoke non static method without a target object"), new Error());
                func = obj[this.JsName];
            }
            var res;
            if (parameters == null)
                res = func.apply(obj);
            else
                res = func.apply(obj, parameters);
            return res;
        }
    }
};
JsTypes.push(System$Reflection$MethodInfo);
var System$Reflection$PropertyInfo =
{
    fullname: "System.Reflection.PropertyInfo",
    baseTypeName: "System.Reflection.MemberInfo",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this._PropertyType = null;
            this._IsStatic = false;
            this._Getter = null;
            this._Setter = null;
            System.Reflection.MemberInfo.ctor.call(this);
        },
        GetBaseMember: function ()
        {
            return null;
        },
        GetValue: function (obj, indexes)
        {
            if (this._Getter == null)
                throw $CreateException(new System.Exception.ctor$$String("Property " + this._Name + " doesn\'t have a getter"), new Error());
            var value = this._Getter.apply(obj, (indexes != null ? indexes :  []));
            return value;
        },
        SetValue: function (obj, value, indexes)
        {
            if (this._Setter == null)
                throw $CreateException(new System.Exception.ctor$$String("Property " + this._Name + " doesn\'t have a setter"), new Error());
            if (indexes == null || indexes.length == 0)
            {
                this._Setter.call(obj, value);
            }
            else
            {
                var arr = new Array(indexes);
                arr.push(value);
                this._Setter.apply(obj, (indexes != null ? indexes :  []));
            }
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return this._Name;
        },
        PropertyType$$: "SharpKit.JavaScript.Private.JsImplType",
        get_PropertyType: function ()
        {
            return this._PropertyType;
        }
    }
};
JsTypes.push(System$Reflection$PropertyInfo);
var System$Type =
{
    fullname: "System.Type",
    baseTypeName: "System.Reflection.MemberInfo",
    staticDefinition:
    {
        cctor: function ()
        {
            System.Type.EmptyTypes = null;
        },
        _TypeOf: function (jsType)
        {
            if (jsType == null)
                throw $CreateException(new System.Exception.ctor$$String("Cannot resovle type"), new Error());
            if (jsType._ClrType == null)
                jsType._ClrType = new System.Type.ctor(jsType);
            return jsType._ClrType;
        },
        GetType$$String: function (name)
        {
            return System.Type.GetType$$String$$Boolean(name, false);
        },
        GetType$$String$$Boolean: function (name, throwOnError)
        {
            if (JsTypeHelper._HasTypeArguments(name))
            {
                var jsTypeAndArgs = JsTypeHelper._GetTypeWithArguments(name, throwOnError);
                if (jsTypeAndArgs == null)
                    return null;
                var genericType = System.Type._TypeOf(jsTypeAndArgs[0]);
                var jsTypeArgs = jsTypeAndArgs[1];
                for (var i = 0; i < jsTypeArgs.length; i++)
                {
                    jsTypeArgs[i] = System.Type._TypeOf(jsTypeArgs[i]);
                }
                var type = genericType._MakeGenericType(jsTypeArgs);
                return type;
            }
            var jsType = JsTypeHelper.GetType(name);
            if (jsType == null)
            {
                if (throwOnError)
                    throw $CreateException(new System.Exception.ctor$$String("Type " + name + " was not found"), new Error());
                return null;
            }
            return System.Type._TypeOf(jsType);
        },
        GetType$$String$$Boolean$$Boolean: function (name, throwOnError, ignoreCase)
        {
            if (ignoreCase)
                throw $CreateException(new System.NotImplementedException.ctor(), new Error());
            return System.Type.GetType$$String$$Boolean(name, throwOnError);
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function (jsType)
        {
            this._JsType = null;
            this.allPropertiesVerified = false;
            this._PropertiesByName = null;
            this._Properties = null;
            this._MethodsByName = null;
            this._Methods = null;
            this.verifiedCustomAttributesOnTypeAndMembers = false;
            this._GenericTypeDefinition = null;
            this._TypeArguments = null;
            this._MakeGenericTypeCache = null;
            System.Reflection.MemberInfo.ctor.call(this);
            this._JsType = jsType;
            this._Name = this._JsType.name;
            if (System.Type.EmptyTypes == null)
                System.Type.EmptyTypes = [];
        },
        IsEnum$$: "System.Boolean",
        get_IsEnum: function ()
        {
            return this._JsType.Kind == "Enum";
        },
        GetBaseMember: function ()
        {
            return this.get_BaseType();
        },
        BaseType$$: "SharpKit.JavaScript.Private.JsImplType",
        get_BaseType: function ()
        {
            if (this._JsType.baseType == null)
                return null;
            return System.Type._TypeOf(this._JsType.baseType);
        },
        FillProperties: function (def)
        {
            for (var funcName in def)
            {
                var isGetter = funcName.startsWith("get_");
                var isSetter = funcName.startsWith("set_");
                if (isGetter || isSetter)
                    this.FillProperty(def, funcName, isSetter);
            }
        },
        FillProperty: function (def, funcName, isSetter)
        {
            var member = def[funcName];
            var func = member;
            var propName = funcName.substr(4);
            var prop = this._PropertiesByName[propName];
            if (prop == null)
            {
                prop = new System.Reflection.PropertyInfo.ctor();
                this._PropertiesByName[propName] = prop;
                this._Properties.push(prop);
                prop._Name = propName;
                prop._DeclaringType = this;
                prop._IsStatic = this._JsType.staticDefinition != null && this._JsType.staticDefinition[funcName] != null;
                var propTypeName = JsTypeHelper.getMemberTypeName(def, propName);
                if (propTypeName != null)
                    prop._PropertyType = System.Type.GetType$$String(propTypeName);
                else
                {
                }
            }
            if (isSetter)
                prop._Setter = func;
            else
                prop._Getter = func;
        },
        TryFillProperty: function (def, name)
        {
            if (def == null)
                return false;
            var getterName = "get_" + name;
            var setterName = "set_" + name;
            if (def.hasOwnProperty(getterName))
                this.FillProperty(def, getterName, false);
            if (def.hasOwnProperty(setterName))
                this.FillProperty(def, setterName, true);
            return this._PropertiesByName[name] != null;
        },
        GetProperty$$String: function (name)
        {
            this.VerifyProperty(name);
            return this._PropertiesByName[name];
        },
        GetProperty$$String$$BindingFlags: function (name, bindingAttr)
        {
            if (name == null)
                throw $CreateException(new System.ArgumentNullException.ctor$$String("name"), new Error());
            return this.GetProperty$$String(name);
        },
        GetProperty$$String$$Type: function (name, returnType)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        VerifyProperty: function (name)
        {
            if (this._PropertiesByName == null)
            {
                this._PropertiesByName = new Object();
                this._Properties = new Array();
            }
            if (this._PropertiesByName.hasOwnProperty(name))
                return;
            if (this.TryFillProperty(this._JsType.definition, name))
                return;
            if (this.TryFillProperty(this._JsType.staticDefinition, name))
                return;
            var baseType = this.get_BaseType();
            if (baseType != null)
            {
                var pe = baseType.GetProperty$$String(name);
                this._PropertiesByName[name] = pe;
                this._Properties.push(pe);
                return;
            }
            this._PropertiesByName[name] = null;
        },
        VerifyProperties: function ()
        {
            if (!this.allPropertiesVerified)
            {
                this.allPropertiesVerified = true;
                if (this._PropertiesByName == null)
                {
                    this._PropertiesByName = new Object();
                    this._Properties = new Array();
                }
                this.FillProperties(this._JsType.definition);
                this.FillProperties(this._JsType.staticDefinition);
                var baseType = this.get_BaseType();
                if (baseType != null)
                {
                    var props = baseType.GetProperties();
                    for (var $i12 = 0, $l12 = props.length, pe = props[$i12]; $i12 < $l12; $i12++, pe = props[$i12])
                    {
                        if (!this._PropertiesByName.hasOwnProperty(pe._Name))
                        {
                            this._PropertiesByName[pe._Name] = pe;
                            this._Properties.push(pe);
                        }
                    }
                }
            }
        },
        GetProperties: function ()
        {
            this.VerifyProperties();
            return this._Properties;
        },
        FillMethods: function (def)
        {
            var isStatic = def == this._JsType.staticDefinition;
            for (var funcName in def)
            {
                if (funcName == "toString")
                    continue;
                var func = def[funcName];
                if (SharpKit.JavaScript.Utils.Js.Typeof(func) != "function")
                    continue;
                var methodName = SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(funcName);
                var methods = this._MethodsByName[methodName];
                if (methods == null)
                {
                    methods = new Array();
                    this._MethodsByName[methodName] = methods;
                }
                var method = new System.Reflection.MethodInfo.ctor();
                methods.push(method);
                this._Methods.push(method);
                method._Name = methodName;
                method.JsName = funcName;
                method.JsFunction = func;
                method._DeclaringType = this;
                method._IsStatic = this._JsType.staticDefinition != null && this._JsType.staticDefinition[funcName] == func;
            }
        },
        GetMethod: function (name)
        {
            this.VerifyMethods();
            var methods = this._MethodsByName[name];
            if (methods == null)
                return null;
            return methods[0];
        },
        VerifyMethods: function ()
        {
            if (this._MethodsByName == null)
            {
                this._MethodsByName = new Object();
                this._Methods = new Array();
                this.FillMethods(this._JsType.definition);
                this.FillMethods(this._JsType.staticDefinition);
                var baseType = this.get_BaseType();
                if (baseType != null)
                {
                    var methods = baseType.GetMethods();
                    for (var $i13 = 0, $l13 = methods.length, pe = methods[$i13]; $i13 < $l13; $i13++, pe = methods[$i13])
                    {
                        if (this._MethodsByName[pe._Name] == null)
                        {
                            this._MethodsByName[pe._Name] = pe;
                            this._Methods.push(pe);
                        }
                    }
                }
            }
        },
        GetMethods: function ()
        {
            this.VerifyMethods();
            var arr =  [];
            for (var i = 0; i < this._Methods.length; i++)
            {
                arr.push(this._Methods[i]);
            }
            return arr;
        },
        GetMethods$$String: function (name)
        {
            this.VerifyMethods();
            return this._MethodsByName[name];
        },
        GetMethods$$BindingFlags: function (bindingFlags)
        {
            return this.GetMethods();
        },
        VerifyCustomAttributes: function ()
        {
            this.VerifyCustomAttributesOnTypeAndMembers();
        },
        Name$$: "System.String",
        get_Name: function ()
        {
            return JsTypeHelper.GetName(this._JsType);
        },
        FullName$$: "System.String",
        get_FullName: function ()
        {
            return this._JsType.fullname;
        },
        AssemblyQualifiedName$$: "System.String",
        get_AssemblyQualifiedName: function ()
        {
            return JsTypeHelper.GetAssemblyQualifiedName(this._JsType);
        },
        VerifyCustomAttributesOnTypeAndMembers: function ()
        {
            if (this.verifiedCustomAttributesOnTypeAndMembers)
                return;
            this.verifiedCustomAttributesOnTypeAndMembers = true;
            if (this._JsType.customAttributes == null)
                return;
            for (var i = 0; i < this._JsType.customAttributes.length; i++)
            {
                var attDef = this._JsType.customAttributes[i];
                var attType = JsTypeHelper.GetType(attDef.typeName);
                var jsCtor = attType[attDef.ctorName];
                var att = SharpKit.JavaScript.Utils.Js.ApplyNew(jsCtor, attDef.positionalArguments);
                if (attDef.namedArguments != null)
                {
                    for (var propName in attDef.namedArguments)
                    {
                        var value = attDef.namedArguments[propName];
                        if (SharpKit.JavaScript.Utils.Js.Typeof(value) == "function")
                            value = value.call(null);
                        att["set_" + propName].call(att, value);
                    }
                }
                var target = this.GetAttributeTarget(attDef.targetType, attDef.targetMemberName);
                if (target._CustomAttributes == null)
                    target._CustomAttributes = new Array();
                target._CustomAttributes.push(att);
            }
        },
        GetAttributeTarget: function (memberType, memberName)
        {
            if (memberType == "type")
                return this;
            else if (memberType == "method")
            {
                var methodName = SharpKit.JavaScript.JsNamingHelper.JsFunctionNameToClrMethodName(memberName);
                var methods = this.GetMethods$$String(methodName);
                for (var $i14 = 0, $l14 = methods.length, method = methods[$i14]; $i14 < $l14; $i14++, method = methods[$i14])
                {
                    if (method.JsName == memberName)
                        return method;
                }
                return null;
            }
            else if (memberType == "property")
            {
                return this.GetProperty$$String(memberName);
            }
            else
                throw $CreateException(new System.NotImplementedException.ctor$$String("GetAttributeTarget not supported yet for memberType: " + memberType), new Error());
        },
        IsAssignableFrom: function (type)
        {
            return TypeIs(type._JsType, this._JsType);
        },
        IsInstanceOfType: function (obj)
        {
            return Is(obj, this._JsType);
        },
        toString: function ()
        {
            return System.String.Format$$String$$Object$Array("{Name = " + this.get_Name() + " FullName = " + this.get_FullName() + "}", []);
        },
        MakeGenericType: function (typeArguments)
        {
            
var x = []; 
for(var i=0;i<arguments.length;i++) 
	x.push(arguments[i]|| null);
return this._MakeGenericType(x);
        },
        GetGenericTypeDefinition: function ()
        {
            return this._GenericTypeDefinition;
        },
        GetGenericArguments: function ()
        {
            if (this._TypeArguments == null)
                return System.Type.EmptyTypes;
            return this._TypeArguments;
        },
        _MakeGenericType: function (typeArguments)
        {
            if (this._MakeGenericTypeCache == null)
                this._MakeGenericTypeCache = new Object();
            var key = "";
            for (var i = 0; i < typeArguments.length; i++)
            {
                var typeArg = typeArguments[i];
                key += typeArg._Name;
            }
            var t = this._MakeGenericTypeCache[key];
            if (t == null)
            {
                t = new System.Type.ctor(this._JsType);
                this._MakeGenericTypeCache[key] = t;
                t._Name = this._Name;
                t._GenericTypeDefinition = this;
                t._TypeArguments = typeArguments;
                t._Properties = this._Properties;
                t._PropertiesByName = this._PropertiesByName;
                t._Methods = this._Methods;
                t._MethodsByName = this._MethodsByName;
                t._DeclaringType = this._DeclaringType;
                t._CustomAttributes = this._CustomAttributes;
            }
            return t;
        }
    }
};
JsTypes.push(System$Type);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Diagnostics$Debugger =
{
    fullname: "System.Diagnostics.Debugger",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        Break: function ()
        {
            debugger;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Diagnostics$Debugger);
var System$Diagnostics$Trace =
{
    fullname: "System.Diagnostics.Trace",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.Diagnostics.Trace.Warnings = null;
            System.Diagnostics.Trace.Enabled = false;
        },
        TraceWarning$$String: function (msg)
        {
            if (!System.Diagnostics.Trace.Enabled)
                return;
            if (System.Diagnostics.Trace.Warnings == null)
                System.Diagnostics.Trace.Warnings = new System.Collections.Generic.List$1.ctor(System.String.ctor);
            System.Diagnostics.Trace.Warnings.Add(msg);
        },
        TraceWarning$$String$$Object$Array: function (format, args)
        {
            if (!System.Diagnostics.Trace.Enabled)
                return;
            System.Diagnostics.Trace.TraceWarning$$String(System.String.Format$$String$$Object$Array(format, args));
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Diagnostics$Trace);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$ComponentModel$ListSortDirection =
{
    fullname: "System.ComponentModel.ListSortDirection",
    staticDefinition: {Ascending: "Ascending", Descending: "Descending"},
    Kind: "Enum"
};
JsTypes.push(System$ComponentModel$ListSortDirection);
var System$Math =
{
    fullname: "System.Math",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            System.Math.PI = Math.PI;
        },
        Abs$$Number: function (value)
        {
            return Math.abs(value);
        },
        Abs$$Double: function (value)
        {
            return Math.abs(value);
        },
        Abs$$Int32: function (value)
        {
            return Math.abs(value);
        },
        Abs$$Int64: function (value)
        {
            return Math.abs(value);
        },
        Abs$$Single: function (value)
        {
            return Math.abs(value);
        },
        AbsHelper$$Int16: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        AbsHelper$$Int32: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        AbsHelper$$Int64: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        AbsHelper$$SByte: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Acos: function (d)
        {
            return Math.acos(d);
        },
        Asin: function (d)
        {
            return Math.asin(d);
        },
        Atan: function (d)
        {
            return Math.atan(d);
        },
        Atan2: function (y, x)
        {
            return Math.atan2(y, x);
        },
        BigMul: function (a, b)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Ceiling$$Decimal: function (d)
        {
            return Math.ceil(d);
        },
        Ceiling$$Double: function (a)
        {
            return Math.ceil(a);
        },
        Cos: function (d)
        {
            return Math.cos(d);
        },
        Cosh: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Exp: function (d)
        {
            return Math.exp(d);
        },
        Floor$$Decimal: function (d)
        {
            return Math.floor(d);
        },
        Floor$$Double: function (d)
        {
            return Math.floor(d);
        },
        IEEERemainder: function (x, y)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        InternalRound: function (value, digits, mode)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        InternalTruncate: function (d)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Log$$Double: function (d)
        {
            return Math.log(d);
        },
        Log$$Double$$Double: function (a, newBase)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Log10: function (d)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Max$$Decimal$$Decimal: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$Double$$Double: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$Int32$$Int32: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$Int64$$Int64: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$SByte$$SByte: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$Single$$Single: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$UInt32$$UInt32: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Max$$UInt64$$UInt64: function (val1, val2)
        {
            return Math.max(val1, val2);
        },
        Min$$Decimal$$Decimal: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$Double$$Double: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$Int32$$Int32: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$Int64$$Int64: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$SByte$$SByte: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$Single$$Single: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$UInt32$$UInt32: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Min$$UInt64$$UInt64: function (val1, val2)
        {
            return Math.min(val1, val2);
        },
        Pow: function (x, y)
        {
            return Math.pow(x, y);
        },
        Round$$Decimal: function (d)
        {
            return Math.round(d);
        },
        Round$$Double: function (a)
        {
            return Math.round(a);
        },
        Round$$Decimal$$Int32: function (d, decimals)
        {
            var pow = Math.pow(10, decimals);
            return Math.round(d * pow) / pow;
        },
        Round$$Decimal$$MidpointRounding: function (d, mode)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Round$$Double$$Int32: function (value, digits)
        {
            var pow = Math.pow(10, digits);
            return Math.round(value * pow) / pow;
        },
        Round$$Double$$MidpointRounding: function (value, mode)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Round$$Decimal$$Int32$$MidpointRounding: function (d, decimals, mode)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Round$$Double$$Int32$$MidpointRounding: function (value, digits, mode)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Decimal: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Double: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Int16: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Int32: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Int64: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$SByte: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sign$$Single: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sin: function (a)
        {
            return Math.sin(a);
        },
        Sinh: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Sqrt: function (d)
        {
            return Math.sqrt(d);
        },
        Tan: function (a)
        {
            return Math.tan(a);
        },
        Tanh: function (value)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Truncate$$Decimal: function (d)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        Truncate$$Double: function (d)
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(System$Math);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Text$StringBuilder =
{
    fullname: "System.Text.StringBuilder",
    baseTypeName: "System.Object",
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            this.array = null;
            this.length = 0;
            System.Object.ctor.call(this);
            this.array = [];
            this.length = 0;
        },
        ctor$$String: function (s)
        {
            this.array = null;
            this.length = 0;
            System.Object.ctor.call(this);
            this.array = [s];
            this.length = s == null ? 0 : s.length;
        },
        Append$$Char: function (s)
        {
            this.array.push(s);
            this.length += 1;
        },
        Append$$String: function (s)
        {
            this.array.push(s);
            this.length += s.length;
        },
        AppendFormat$$String$$Object: function (s, arg0)
        {
            var ss = System.String.Format$$String$$Object(s, arg0);
            this.array.push(ss);
            this.length += ss.length;
        },
        AppendFormat$$String$$Object$$Object: function (s, arg0, arg1)
        {
            var ss = System.String.Format$$String$$Object$$Object(s, arg0, arg1);
            this.array.push(ss);
            this.length += ss.length;
        },
        AppendFormat$$String$$Object$$Object$$Object: function (s, arg0, arg1, arg2)
        {
            var ss = System.String.Format$$String$$Object$$Object$$Object(s, arg0, arg1, arg2);
            this.array.push(ss);
            this.length += ss.length;
        },
        Append$$Object: function (obj)
        {
            if (obj != null)
            {
                var s = obj.toString();
                this.array.push(s);
                this.length += s.length;
            }
        },
        toString: function ()
        {
            return this.array.join("");
        },
        Length$$: "System.Int32",
        get_Length: function ()
        {
            return this.length;
        },
        set_Length: function (value)
        {
            if (value != 0)
                throw $CreateException(new System.Exception.ctor$$String("Not Implemented"), new Error());
            this.array.Clear();
            this.length = value;
        },
        Remove: function (start, count)
        {
            var s = this.array.join("");
            s = s.Remove$$Int32$$Int32(start, count);
            this.array = [s];
            this.length = s.length;
            return this;
        }
    }
};
JsTypes.push(System$Text$StringBuilder);
if (typeof(JsTypes) == "undefined")
    var JsTypes = [];
var System$Runtime$Serialization$IExtensibleDataObject = {fullname: "System.Runtime.Serialization.IExtensibleDataObject", baseTypeName: "System.Object", assemblyName: "SharpKit.JsClr", Kind: "Interface"};
JsTypes.push(System$Runtime$Serialization$IExtensibleDataObject);
var SharpKit$PropertyInfoExtensions =
{
    fullname: "SharpKit.PropertyInfoExtensions",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        IsStatic: function (pi)
        {
            return pi._IsStatic;
        },
        IsPublic: function (pi)
        {
            throw new Error('Not Implemented');
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$PropertyInfoExtensions);
var SharpKit$Extensions2 =
{
    fullname: "SharpKit.Extensions2",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        GetValueOrDefaultIfNullOrEmpty: function (s, defaultValue)
        {
            if(s==null || s.length==0) return defaultValue; return s;
        },
        IsNullOrEmpty$$String: function (s)
        {
            return s == null || s.length == 0;
        },
        IsNotNullOrEmpty$$String: function (s)
        {
            return s != null && s.length > 0;
        },
        HtmlEscape: function (s)
        {
            return s.Replace$$String$$String("&", "&amp;").Replace$$String$$String("<", "&lt;").Replace$$String$$String(">", "&gt;").Replace$$String$$String("\n", "<br/>");
        },
        ReplaceFirst$$String$$String$$String: function (s, search, replace)
        {
            return s.ReplaceFirst(search, replace);
        },
        ReplaceFirst$$String$$String$$String$$StringComparison: function (s, search, replace, comparisonType)
        {
            var index = s.indexOf(search, comparisonType);
            if (index != -1)
            {
                var finalStr = System.String.Concat$$String$$String$$String(s.substr(0, index), replace, s.substr(search.length + index));
                return finalStr;
            }
            return s;
        },
        FixCamelCasing: function (s)
        {
            var sb = new System.Text.StringBuilder.ctor();
            var first = true;
            var $it14 = s.GetEnumerator();
            while ($it14.MoveNext())
            {
                var c = $it14.get_Current();
                if (System.Char.IsUpper$$Char(c) && !first)
                {
                    sb.Append$$Char(" ");
                }
                sb.Append$$Char(c);
                first = false;
            }
            return sb.toString();
        },
        RemoveLast: function (s, count)
        {
            return s.substr(s, s.length-count);
        },
        TrimEnd: function (s, trimText)
        {
            if (s.EndsWith$$String(trimText))
                return SharpKit.Extensions2.RemoveLast(s, trimText.length);
            return s;
        },
        EqualsIgnoreCase: function (s1, s2)
        {
            return System.String.Compare$$String$$String$$Boolean(s1, s2, true) == 0;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$Extensions2);
var SharpKit$JavaScript$Utils$Js =
{
    fullname: "SharpKit.JavaScript.Utils.Js",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        cctor: function ()
        {
            SharpKit.JavaScript.Utils.Js.undefined = null;
        },
        escape: function (s)
        {
            return escape(s);
        },
        ToJsFunction: function (del)
        {
            return del._ToJsFunction();
        },
        JsEquals: function (obj, value)
        {
            return obj==value;
        },
        JsExactEqualsToUndefined: function (obj)
        {
            return obj===undefined;
        },
        JsExactEquals: function (obj, value)
        {
            return obj===value;
        },
        Typeof: function (obj)
        {
            return typeof(obj);
        },
        ApplyFunction: function (func, thisArg, prms)
        {
            throw $CreateException(new System.NotImplementedException.ctor$$String("TODO: Implement"), new Error());
        },
        CallFunction: function (func, thisArg, prms)
        {
            throw $CreateException(new System.NotImplementedException.ctor$$String("TODO: Implement"), new Error());
        },
        CallFunction2: function (obj, funcName, prms)
        {
            return obj[funcName].apply(obj, Arguments.from(arguments, 2));
        },
        FindOverloadedMethodName: function (obj, funcName)
        {
            funcName+='$$';for(var o in obj)
if (typeof(obj[o])=='function' && o.indexOf(funcName)==0) 
	return o; 
return null;
        },
        Eval: function (code)
        {
            eval(code)
        },
        Compile: function ()
        {
            throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        GetHashKey: function (key)
        {
            return JsCompiler.GetHashKey(key);
        },
        DeleteMember: function (obj, name)
        {
            delete obj[name];
        },
        parseFloat: function (s)
        {
            return parseFloat(s);
        },
        parseInt: function (s)
        {
            return parseInt(s);
        },
        ApplyNew: function (jsCtor, prms)
        {
            if(prms==null || prms.length==0) return new jsCtor(); return new jsCtor(prms[0], prms[1], prms[2], prms[3], prms[4], prms[5], prms[6], prms[7], prms[8]);
        },
        IsArray: function (obj)
        {
            return obj instanceof Array;
        },
        isNaN: function (obj)
        {
            return isNaN(obj);
        },
        decodeURIComponent: function (encodedURIString)
        {
            return decodeURIComponent(encodedURIString)
        },
        encodeURIComponent: function (encodedURIString)
        {
            return encodeURIComponent(encodedURIString)
        },
        encodeURI: function (URIString)
        {
            return encodeURI(URIString)
        },
        decodeURI: function (URIString)
        {
            return decodeURI(URIString)
        },
        unescape: function (s)
        {
            return unescape(s)
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$JavaScript$Utils$Js);
var SharpKit$JavaScript$JsNamingHelper =
{
    fullname: "SharpKit.JavaScript.JsNamingHelper",
    baseTypeName: "System.Object",
    staticDefinition:
    {
        JsFunctionNameToClrMethodName: function (jsFuncName)
        {
            var methodName = jsFuncName;
            var di = jsFuncName.indexOf("$");
            if (di > 0)
                methodName = jsFuncName.substr(0, di);
            return methodName;
        },
        ClrTypeToJsTypeRef: function (type)
        {
            var att = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(SharpKit.JavaScript.JsTypeAttribute.ctor, System.Linq.Enumerable.OfType$1(SharpKit.JavaScript.JsTypeAttribute.ctor, type.GetCustomAttributes$$Type$$Boolean(Typeof(SharpKit.JavaScript.JsTypeAttribute.ctor), false)));
            if (att != null && SharpKit.Extensions2.IsNotNullOrEmpty$$String(att.get_Name()))
            {
                return att.get_Name().Replace$$Char$$Char("`", "$");
            }
            return type.get_Namespace() + "." + type.get_Name().Replace$$Char$$Char("`", "$");
        },
        ClrConstructorToJsFunctionName: function (mi)
        {
            var sb = new System.Text.StringBuilder.ctor();
            var typeRef = SharpKit.JavaScript.JsNamingHelper.ClrTypeToJsTypeRef(mi.get_DeclaringType());
            sb.Append$$String(typeRef);
            sb.Append$$String(".ctor");
            SharpKit.JavaScript.JsNamingHelper.ConvertParametersToJsFunctionName(mi.GetParameters(), sb);
            return sb.toString();
        },
        ConvertParametersToJsFunctionName: function (prms, sb)
        {
            for (var $i16 = 0, $l16 = prms.length, prm = prms[$i16]; $i16 < $l16; $i16++, prm = prms[$i16])
            {
                sb.Append$$String("$$");
                sb.Append$$String(prm.get_ParameterType().get_Name());
            }
        },
        ClrMethodBaseToJsFunctionName: function (mi)
        {
            if (mi.get_MemberType() == 1)
            {
                return SharpKit.JavaScript.JsNamingHelper.ClrMethodToJsFunctionName(Cast(mi, System.Reflection.MethodInfo.ctor));
            }
            else if (mi.get_MemberType() == 8)
            {
                return SharpKit.JavaScript.JsNamingHelper.ClrConstructorToJsFunctionName(Cast(mi, System.Reflection.ConstructorInfo.ctor));
            }
            else
                throw $CreateException(new System.NotImplementedException.ctor(), new Error());
        },
        ClrMethodToJsFunctionName: function (mi)
        {
            if (SharpKit.JavaScript.JsNamingHelper.IsPropertySetter(mi))
            {
                return mi.get_Name();
            }
            var name = mi.get_Name();
            var type = mi.get_DeclaringType();
            if (type.get_IsGenericType())
            {
                type = type.GetGenericTypeDefinition();
                mi = type.GetMethod$$String(name);
            }
            var sb = new System.Text.StringBuilder.ctor();
            if (mi.get_IsStatic())
            {
                sb.Append$$String(SharpKit.JavaScript.JsNamingHelper.ClrTypeToJsTypeRef(type));
                var att = System.Linq.Enumerable.FirstOrDefault$1$$IEnumerable$1(SharpKit.JavaScript.JsTypeAttribute.ctor, System.Linq.Enumerable.OfType$1(SharpKit.JavaScript.JsTypeAttribute.ctor, type.GetCustomAttributes$$Type$$Boolean(Typeof(SharpKit.JavaScript.JsTypeAttribute.ctor), false)));
                if (att == null || att.get_Mode() == 2)
                {
                    sb.Append$$String(".staticDefinition.");
                }
                else
                {
                    sb.Append$$String(".");
                }
            }
            sb.Append$$String(name);
            SharpKit.JavaScript.JsNamingHelper.ConvertParametersToJsFunctionName(mi.GetParameters(), sb);
            return sb.toString();
        },
        IsPropertySetter: function (mi)
        {
            var name = mi.get_Name();
            return name.StartsWith$$String("set_") && mi.GetParameters().length == 1;
        }
    },
    assemblyName: "SharpKit.JsClr",
    Kind: "Class",
    definition:
    {
        ctor: function ()
        {
            System.Object.ctor.call(this);
        }
    }
};
JsTypes.push(SharpKit$JavaScript$JsNamingHelper);
