@model object

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
    <head>
    <title>GeoJson with Google maps sample</title>
        <link href="~/Content/ext-all-slate-min.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/bootstrap.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/font-awesome.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/AnalysisPortal.css" rel="stylesheet" type="text/css" />
        <link href="~/Scripts/OpenLayers/theme/default/style.css" rel="stylesheet" type="text/css" />
        <link href="~/Content/Overrides.css" rel="stylesheet" type="text/css" />
        <script src="~/Scripts/jquery-2.1.4.js" type="text/javascript"></script>
        <script src="~/Scripts/extjs-4.2.1/ext-all.js" type="text/javascript"></script>
        <script src="~/Scripts/bootstrap.js" type="text/javascript"></script>
        <script src="~/Scripts/modernizr-2.5.3.js" type="text/javascript"></script>

        <script src="http://maps.google.com/maps/api/js?v=3.6&amp;sensor=false" type="text/javascript"></script>        
        <script src="~/Scripts/OpenLayers/OpenLayers.js" type="text/javascript"></script>
        <link href="~/Content/map.css" rel="stylesheet" type="text/css" />

        <style type="text/css">
            body {                
                margin: 20px;                
            }
            div.info {
                margin: 10px;
            }               
            div.olLayerGoogleCopyright, div.olLayerGooglePoweredBy {
              display: none !important;
            }
           .clear {
               clear: both;
            }
            .clearfix {
                display: block;
            }                 
            #mapDiv label {
                display: inline;                
            }
            #mapDiv input[type="radio"], #mapDiv input[type="checkbox"] {
                cursor: pointer;
                line-height: normal;
                margin: 3px 3px 4px 5px;
            }      
        </style>

        <script type="text/javascript">
            var AnalysisPortal_ApplicationPath = '@Html.Raw(HttpContext.Current.Request.ApplicationPath)';
            if (AnalysisPortal_ApplicationPath == '/') {
                AnalysisPortal_ApplicationPath = '';
            }

            function initAnalyisPortalMap(divId, panelDivId, mapOption, mapLayers, mapState) {
                var baseMapOptions = mapOption.BaseMapOptions;
                var ovMapOptions = mapOption.OvMapOptions;
                $("#" + divId).html("");
                var map = new OpenLayers.Map(divId, baseMapOptions); // create map
                map.mapOption = mapOption;
                
                // create layer switcher panel if settings is true
                if (mapOption.BaseMapOptions.UseLayerSwitcher == true) {
                    map.theLayerSwitcher = new OpenLayers.Control.LayerSwitcher({ title: "Map layers" });
                    map.addControl(map.theLayerSwitcher);
                }
                // create mouse position panel if settings is true
                if (mapOption.BaseMapOptions.ShowMousePosition == true) {
                    map.addControl(new OpenLayers.Control.MousePosition());
                }
                // create overview map panel if settings is true
                if (mapOption.OvMapOptions.UseOvMap == true) {
                    var ovMapLayer = mapOption.OvMapOptions.OvMapLayer;
                    map.OvMapCtrl = new OpenLayers.Control.OverviewMap({ layers: [ovMapLayer], mapOptions: ovMapOptions, autoPan: true });
                    map.addControl(map.OvMapCtrl);
                    map.OvMapCtrl.maximizeControl();
                }                
                
                // Eget
                //map = new OpenLayers.Map('map', { allOverlays: true });
                //map.addControl(new OpenLayers.Control.LayerSwitcher());

                // the SATELLITE layer has all 22 zoom level, so we add it first to
                // become the internal base layer that determines the zoom levels of the
                // map.
                var gsat = new OpenLayers.Layer.Google(
                    "Google Satellite",
                    { type: google.maps.MapTypeId.SATELLITE, numZoomLevels: 22 }
                );
                var gphy = new OpenLayers.Layer.Google(
                    "Google Physical",
                    { type: google.maps.MapTypeId.TERRAIN, visibility: false }
                );
                var gmap = new OpenLayers.Layer.Google(
                    "Google Streets", // the default
                    {numZoomLevels: 20, visibility: false }
                );
                var ghyb = new OpenLayers.Layer.Google(
                    "Google Hybrid",
                    { type: google.maps.MapTypeId.HYBRID, numZoomLevels: 22, visibility: false }
                );

                map.addLayers([gsat, gphy, gmap, ghyb]);                
                // slut eget


                // Add layers                
//                var loadingPanel = new OpenLayers.Control.LoadingPanel();
//                map.addControl(loadingPanel);
//                map.loadingPanel = loadingPanel;                
                map.theSiteLayer = OpenLayers.Layer.Vector;
                map.thePrecisionLayer = OpenLayers.Layer.Vector;
                map.theSiteLabelLayer = OpenLayers.Layer.Vector;
                map.theEditableSiteLayer = OpenLayers.Layer.Vector;
                map.theSiteLayer = new OpenLayers.Layer.Vector("Sites");
                map.addLayers([map.theSiteLayer]);
                map.theEditableSiteLayer = new OpenLayers.Layer.Vector("Editable Sites");
                map.addLayers([map.theEditableSiteLayer]);
                map.thePrecisionLayer = new OpenLayers.Layer.Vector("Site precision");
                map.addLayers([map.thePrecisionLayer]);
                map.theSiteLabelLayer = new OpenLayers.Layer.Vector("Sitenames", { visibility: false });
                map.addLayers([map.theSiteLabelLayer]);


                // Add style to the layers
                SetSiteLayerStyle(map.theSiteLayer, false);
                SetSiteLayerStyle(map.theEditableSiteLayer, true);
                SetPrecisionLayerStyle(map, map.thePrecisionLayer);
                SetSiteLabelLayerStyle(map.theSiteLabelLayer);

                // Toolbar
                var paneldiv = OpenLayers.Util.getElement("mapToolbarPanel");
                if (panelDivId != null) {
                    paneldiv = $("#" + panelDivId).get(0);
                }
                var mapPanel = new OpenLayers.Control.Panel({ displayClass: "olControlPanel", div: paneldiv });
                
                // Navigation buttons
                if (mapOption.BaseMapOptions.UseNavigationHistory == true) {
                    map.theNavHist = new OpenLayers.Control.NavigationHistory({ previousOptions: { title: 'Gå till föregående kartutsnitt' }, nextOptions: { title: 'Gå framåt till nästa kartutsnitt'} });
                    map.addControl(map.theNavHist);
                    mapPanel.addControls([map.theNavHist.previous, map.theNavHist.next]);
                }

                // Zoom box
                map.zoomBoxControl = new OpenLayers.Control.ZoomBox({ title: 'Zooma in' });
                mapPanel.addControls([map.zoomBoxControl]);
                
                // Highlight
                map.highlightControl = new OpenLayers.Control.SelectFeature([map.theSiteLayer, map.theEditableSiteLayer], { hover: true, highlightOnly: true, renderIntent: "temporary",
                    eventListeners: { 
                        featurehighlighted: function (e) {
                            ShowFeaturePopup(map, e);
                            }, featureunhighlighted: function (e) {
                                HideFeaturePopup(map, e);
                            }
                    }
                });
                map.addControl(map.highlightControl);
                map.highlightControl.activate();
                
                // Select
                map.selectControl = new OpenLayers.Control.SelectFeature([map.theSiteLayer, map.theEditableSiteLayer], { title: 'Välj observationsplats', clickout: true, 
                    onSelect: function (feature) {
                        SetMapSiteSelected(map, feature);
                    }, onUnselect: function (feature) {
                        SetMapSitesUnSelected(map, feature);
                    }
                });
                mapPanel.addControls([map.selectControl]);
                
                // Create site
//                if (mapOption.ShowCreateSiteTools) {
//                    if (!mapOption.SelectByPolygon) {
//                        map.addPointControl = new OpenLayers.Control.DrawFeature(map.theEditableSiteLayer, OpenLayers.Handler.Point, { displayClass: "olControlDrawFeaturePoint", title: window.Artportalen.ResourceLabel("Shared_Map_CreateSite") });
//                        mapPanel.addControls([map.addPointControl]);
//                        map.addPointControl.events.register("activate", map.addPointControl, function () {
//                            onSiteAddActivateCheck(map);
//                        });
//                    }
//                    map.addPolygonControl = new OpenLayers.Control.DrawFeature(map.theEditableSiteLayer, OpenLayers.Handler.Polygon, { displayClass: "olControlDrawFeaturePolygon", title: window.Artportalen.ResourceLabel("Shared_Map_CreatePolygon") });
//                    mapPanel.addControls([map.addPolygonControl]);
//                    map.addPolygonControl.events.register("activate", map.addPolygonControl, function () {
//                        onSiteAddActivateCheck(map);
//                    });
//                    map.theEditableSiteLayer.events.register("featureadded", map.theEditableSiteLayer, function (e) {
//                        TryToAddSiteToMap(map, e);
//                    });
//                    map.editFeatureControl = new OpenLayers.Control.ModifyFeature(map.theEditableSiteLayer, { title: window.Artportalen.ResourceLabel("Shared_Map_EditFeature") });
//                    mapPanel.addControls(map.editFeatureControl);
//                    map.editFeatureControl.events.register("activate", map.theEditableSiteLayer, function () {
//                        map.addControl(map.editFeatureControl);
//                        map.highlightControl.deactivate();
//                        map.mapPopupId = null;
//                        if (map.mapPopup) {
//                            map.removePopup(map.mapPopup);
//                            map.mapPopup = null;
//                        }
//                        map.selectControl.unselectAll();
//                    });
//                    map.editFeatureControl.events.register("deactivate", map, function () {
//                        map.removeControl(map.editFeatureControl);
//                        map.highlightControl.activate();
//                    });
//                    map.theEditableSiteLayer.events.register("afterfeaturemodified", map.theEditableSiteLayer, function (e) {
//                        SiteEdited(map, e);
//                    });
//                    map.theEditableSiteLayer.events.register("beforefeaturemodified", map.theEditableSiteLayer, function (e) {
//                        oldGeometry = e.feature.geometry.clone();
//                    });
//                    map.dragFeatureControl = new OpenLayers.Control.DragFeature(map.theEditableSiteLayer, { title: window.Artportalen.ResourceLabel("Shared_Map_DragFeature"), onComplete: function (feature, pixel) {
//                        SiteMoved(map, feature);
//                    }, onStart: function (feature, pixel) {
//                        oldGeometry = feature.geometry.clone();
//                    }
//                    });
//                    mapPanel.addControls(map.dragFeatureControl);
//                    map.dragFeatureControl.events.register("activate", map.theEditableSiteLayer, function () {
//                        map.addControl(map.dragFeatureControl);
//                        map.highlightControl.deactivate();
//                        map.mapPopupId = null;
//                        if (map.mapPopup) {
//                            map.removePopup(map.mapPopup);
//                            map.mapPopup = null;
//                        }
//                        map.selectControl.unselectAll();
//                    });
//                    map.dragFeatureControl.events.register("deactivate", map, function () {
//                        map.removeControl(map.dragFeatureControl);
//                        map.highlightControl.activate();
//                    });
//                }                
                
                
                
                map.addControl(mapPanel);

                

                
                return map;

            }

            // Add GeoJSON objects to map
            function AddFeaturesToMap(map, geoJson) {
                //map = GetMapReference(map);
                var myObject = geoJson; // eval(results);
                var layer = map.theSiteLayer;

                var features = new OpenLayers.Format.GeoJSON().read(myObject.points);
                var polfeatures = new OpenLayers.Format.GeoJSON().read(myObject.polygons);
                var precisionfeatures = new OpenLayers.Format.GeoJSON().read(myObject.points);
                if (polfeatures != null) {
                    layer.addFeatures(polfeatures, { silent: true });
                }
                if (features != null) {
                    layer.addFeatures(features, { silent: true });
                }
                if (precisionfeatures != null) {
                    for (i in precisionfeatures) {
                        if (precisionfeatures[i].attributes.accuracy > 0) {
                            map.thePrecisionLayer.addFeatures([precisionfeatures[i]]);
                        }
                    }
                }

            }


            function SetSiteLayerStyle(layer, a) {
                var b = new OpenLayers.Style();
                var c = 0.5;
                if (a == true) {
                    c = 1;
                }
                var j = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 0 }), symbolizer: { pointRadius: 5, fillColor: "#ffff00", fillOpacity: c, strokeColor: "black"} });
                var h = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 2 }), symbolizer: { pointRadius: 5, fillColor: "#006600", fillOpacity: c, strokeColor: "black"} });
                var d = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 1 }), symbolizer: { pointRadius: 5, fillColor: "#00ff00", fillOpacity: c, strokeColor: "black"} });
                var e = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 3 }), symbolizer: { pointRadius: 5, fillColor: "#006500", fillOpacity: c, strokeColor: "black"} });
                var f = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 4 }), symbolizer: { pointRadius: 7, fillColor: "#0099ff", fillOpacity: 1, strokeColor: "black"} });
                var g = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "siteType", value: 5 }), symbolizer: { pointRadius: 5, fillColor: "#000000", fillOpacity: 1, strokeColor: "black"} });
                var k = new OpenLayers.Rule({ filter: new OpenLayers.Filter.Comparison({ type: OpenLayers.Filter.Comparison.EQUAL_TO, property: "showAsProjectSite", value: true }), symbolizer: { fillColor: "#00ddff", fillOpacity: 1, strokeColor: "black"} });
                b.addRules([h, d, j, e, f, g, k]);
                var m = new OpenLayers.StyleMap({ "default": b, select: { pointRadius: 6, strokeColor: "red", strokeWidth: 2} });
                layer.styleMap = m;
            }
            function SetSiteLabelLayerStyle(layer) {
                var d = { stroke: false, fill: false, label: "  ${siteName}", labelAlign: "lt", fontFamily: "Arial", fontWeight: "bold" };
                var b = new OpenLayers.Style(d);
                var c = new OpenLayers.StyleMap({ "default": b });
                layer.styleMap = c;
            }
            function SetPrecisionLayerStyle(layer, b) {
                var a = { getSize: function (g) {
                    if (g.geometry.toString().substr(0, 4) == "LINE") {
                        return 0;
                    }
                    return (g.attributes.accuracy * 2834 * 2 / layer.getScale());
                }
                };
                var f = { strokeColor: "black", strokeWidth: 1, strokeOpacity: 0.9, fillColor: "green", fillOpacity: 0.1, pointRadius: "${getSize}" };
                var d = new OpenLayers.Style(f, { context: a });
                var e = new OpenLayers.StyleMap({ "default": d });
                b.styleMap = e;
            }

            function isEmpty(ob) {
                for (var i in ob) { if (ob.hasOwnProperty(i)) { return false; } }
                return true;
            }            
            
            var GetSitesRequest = null;
            function GetAllGeoJSONSites(map) {
                map = GetMapReference(map);
                if (GetSitesRequest != null) {
                    GetSitesRequest.abort();
                }
                var getgeojsonurl = AnalysisPortal_ApplicationPath + "/DevExamples/GetObservations";
                if (map.mapOption.GetSitesGeoJsonUrl) {
                    getgeojsonurl = map.mapOption.GetSitesGeoJsonUrl;
                }

                //map.loadingPanel.maximizeControl();
                GetSitesRequest = $.ajax({
                     type: "POST",
                     async: true,
                     cache: false,
                     url: getgeojsonurl,
                     data: "zoomLevel=" + map.getZoom() + "&bbox=" + map.getExtent().toBBOX() + "&userId=" + map.mapOption.UserId + "&projectId=0&isInAdmin=false&coordSys=" + map.coordinateSystem,
                     success: function (data) { GetAllGeoJSONSitesComplete(map, data); },
                     error: function (req, status, error) {
                         WriteDebugMessage("ERROR: /Map/GetSitesGeoJson not found or not responding...");
                         map.loadingPanel.minimizeControl();
                     }
                });
             }
             
            function GetMapReference(map) {
                 if (typeof (map) != 'object') {
                     return $("#" + map).get(0);
                 } else {
                     return map;
                 }
             }
            
             function GetAllGeoJSONSitesComplete(map, results) {
                 map = GetMapReference(map);                 
                 if ((map.theSiteLayer.features != null) && (map.theSiteLayer.features != 'undefined')) {
                     if (!isEmpty(map.theSiteLayer.features)) {
                         map.theSiteLayer.destroyFeatures();
                     }
                 }
                 if ((map.thePrecisionLayer.features != null) && (map.thePrecisionLayer.features != 'undefined')) {
                     if (!isEmpty(map.thePrecisionLayer.features)) {
                         map.thePrecisionLayer.destroyFeatures();
                     }
                 }
                 

                 if ((results != null) && (results != "nothing" && results != '')) {
                     AddFeaturesToMap(map, results.data, map.theSiteLayer);
                 }
                 
                 map.lastSitesZoomLevel = map.getZoom();
                 map.lastSitesExtent = map.getExtent().clone();
                 
                 if (results != null && map.featureToSelectId != null) {
                     var thefeature = map.theSiteLayer.getFeatureByFid(map.featureToSelectId);
                     if (thefeature != null) {
                         map.skipSelectEvent = true;
                         map.selectControl.activate();
                         map.selectControl.select(thefeature);
                         ShowFeaturePopup(map, thefeature);
                         map.featureToSelectId = null;
                     }                    
                 }                 
                 GetSitesRequest = null;
                 //map.loadingPanel.minimizeControl();
             }
            
            
            
        </script>

        <script type="text/javascript">
            var geoJson = { "points": { "type": "FeatureCollection", "features": [{ "type": "Feature", "id": 1383532, "geometry": { "type": "Point", "coordinates": [1881205, 8901406] }, "properties": { "siteName": "Malungsfluggen, Attmar", "siteAreaDescription": "Kommun", "siteAreaName": "Sundsvall", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2, "colorString": "#006600", "coordString": " RT90 2.5 gon E\u003cstrong\u003e1556993\u003c/strong\u003e N\u003cstrong\u003e6896588\u003c/strong\u003e", "siteIDs": ""} }, { "type": "Feature", "id": 1388614, "geometry": { "type": "Point", "coordinates": [1952578, 9500659] }, "properties": { "siteName": "Oxberget", "siteAreaDescription": "Kommun", "siteAreaName": "Vilhelmina", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2, "colorString": "#006600", "coordString": " RT90 2.5 gon E\u003cstrong\u003e1583118\u003c/strong\u003e N\u003cstrong\u003e7165906\u003c/strong\u003e", "siteIDs": ""} }, { "type": "Feature", "id": 1391757, "geometry": { "type": "Point", "coordinates": [2194057, 10512008] }, "properties": { "siteName": "Torneträsk stn.", "siteAreaDescription": "Kommun", "siteAreaName": "Kiruna", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2, "colorString": "#006600", "coordString": " RT90 2.5 gon E\u003cstrong\u003e1661680\u003c/strong\u003e N\u003cstrong\u003e7574658\u003c/strong\u003e", "siteIDs": ""} }, { "type": "Feature", "id": 1410820, "geometry": { "type": "Point", "coordinates": [2438607, 10020728] }, "properties": { "siteName": "Flakaberg", "siteAreaDescription": "Kommun", "siteAreaName": "Gällivare", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2, "colorString": "#006600", "coordString": " RT90 2.5 gon E\u003cstrong\u003e1771034\u003c/strong\u003e N\u003cstrong\u003e7393482\u003c/strong\u003e", "siteIDs": ""} }, { "type": "Feature", "id": 1417339, "geometry": { "type": "Point", "coordinates": [1736384, 9202716] }, "properties": { "siteName": "Skyttmon, Borgvattnet", "siteAreaDescription": "Kommun", "siteAreaName": "Ragunda", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2, "colorString": "#006600", "coordString": " RT90 2.5 gon E\u003cstrong\u003e1489670\u003c/strong\u003e N\u003cstrong\u003e7034020\u003c/strong\u003e", "siteIDs": ""} }, { "type": "Feature", "id": -1, "geometry": { "type": "Point", "coordinates": [1744824, 8358384] }, "properties": { "siteName": "[[Map_ZoomInToChooseOneSite]]", "siteAreaDescription": "", "siteAreaName": "", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 6102, "parentId": 0, "siteType": 4, "colorString": "#0099ff", "coordString": "", "siteIDs": "1432515,1434443,1455432,1494203"}}] }, "polygons": { "type": "FeatureCollection", "features": []} };
            //var geoJson = { "points": { "type": "FeatureCollection", "features": [{ "type": "Feature", "id": 1383532, "geometry": { "type": "Point", "coordinates": [1881205, 8901406] }, "properties": { "siteName": "Malungsfluggen, Attmar", "siteAreaDescription": "Kommun", "siteAreaName": "Sundsvall", "coordSystemName": "Google Mercator", "accuracyDescription": "Noggrannhet", "accuracy": 50, "parentId": 0, "siteType": 2 } }] } };
            //var geoJson = { "points": { "type": "FeatureCollection", "features": [{ "type": "Feature", "id": "1500127", "geometry": { "type": "Point", "coordinates": [1881205, 8901406] }, "properties": { "siteName": "VL2", "coordSystemName": "Google Mercator", "accuracy": 100, "county": null, "municipality": "Gnesta", "parish": "Frustuna", "stateProvince": "Södermanland", "locality": "VL2", "recordedBy": "Hans Ahnlund", "occurrenceId": "urn:lsid:artportalen.se:Sighting:Bugs.1500127", "taxonId": "100573", "scientificName": "Ceriana conopsoides", "organismGroup": "Tvåvingar", "vernacularName": "griffelblomfluga", "siteType": 2}}]} };
            
            var obsJson = '@Html.Raw(ViewBag.geoJson)';
            var lon = 5;
            var lat = 40;
            var zoom = 5;
            var map, layer;

            $(document).ready(function () {


        


//                var ViewSightingMapLayers = [{ "id": "ViewSightingMapLayerGooglePhysical1", "initString": "new OpenLayers.Layer.Google(\"Google Physical\", { sphericalMercator: true, maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34), type: google.maps.MapTypeId.TERRAIN, numZoomLevels: 15, minZoomLevel: 1 }, {transitionEffect: \"resize\"})" }, { "id": "ViewSightingMapLayerGoogleStreets2", "initString": "new OpenLayers.Layer.Google(\"Google Streets\",  { sphericalMercator: true, maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34),numZoomLevels: 20, minZoomLevel: 1 }, {transitionEffect: \"resize\"})" }, { "id": "ViewSightingMapLayerGoogleHybrid3", "initString": "new OpenLayers.Layer.Google(\"Google Hybrid\",  { sphericalMercator: true, maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34), type: google.maps.MapTypeId.HYBRID, numZoomLevels: 20, minZoomLevel: 1 }, {transitionEffect: \"resize\"})" }, { "id": "ViewSightingMapLayerSverige7", "initString": "new OpenLayers.Layer.WMS(\"Sverige\", \"/MetriaCache/MetriaWmsProxy?\", {layers: \"MetriaTatortPlus\", projection: \"EPSG:900913\", srs: \"EPSG:900913\", format: \"image/png\",numZoomLevels: 20,  minZoomLevel: 1}, {singleTile: false, ratio: 1, transitionEffect: \"resize\"} )" }, { "id": "ViewSightingMapLayerVisualEarthHybrid13", "initString": "new OpenLayers.Layer.VirtualEarth( \"Visual Earth\", { sphericalMercator: true, maxExtent: new OpenLayers.Bounds(-20037508.34,-20037508.34,20037508.34,20037508.34), animationEnabled: false, minZoomLevel: 1, maxZoomLevel: 20, \u0027type\u0027: VEMapStyle.Hybrid}, {transitionEffect: \"resize\"})"}];
//                var ViewSightingMap;
                var mapOptions = { "BaseMapOptions": { "maxScale": 423.186, "ShowMousePosition": true, "UseLayerSwitcher": true, "UseNavigationHistory": true, "displayProjection": new OpenLayers.Projection('EPSG:900913'), "maxExtent": new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34), "maxResolution": 156543.0339, "projection": new OpenLayers.Projection('EPSG:900913'), "restrictedExtent": new OpenLayers.Bounds(-4011415.2436133, 7094497.748418, 7729312.2988867, 16321649.443418), "units": "m" }, "GetSitesGeoJsonUrl": "/DevExamples/GetObservations", "Height": 400, "InitiateMapOnStart": true, "MapNavigationDiv": "mapNavDiv", "MapType": 0, "MinScaleForFullSiteRefresh": 12, "MinScaleForPublicSites": 12, "OvMapOptions": { "OvMapLayer": new OpenLayers.Layer.Google('Google Streets', { sphericalMercator: true, numZoomLevels: 20 }), "ShowOvMap": false, "UseOvMap": false, "displayProjection": new OpenLayers.Projection('EPSG:4326'), "maxExtent": new OpenLayers.Bounds(-20037508.34, -20037508.34, 20037508.34, 20037508.34), "maxResolution": 156543.0339, "projection": new OpenLayers.Projection('EPSG:900913'), "units": "m" }, "SelectByPolygon": false, "ShowCreateSiteTools": false, "ShowServerSessionSideSites": true, "ShowSpecificSites": false, "ShowSpecificSitesIds": null, "UserId": 33517, "Width": 950 };
//                var ViewSightingMapState = { "IsChanged": null, "SelectedCoordinateSystemId": 0, "CurrentMapExtent": { "MaxX": 3295925, "MaxY": 9095125, "MinX": 159437, "MinY": 7774499 }, "CenterX": 0, "CenterY": 0 };
//                $(document).ready(function () {
//                    ViewSightingMap = initOpenlayersMap('ViewSightingMapDiv', 'mapNavDiv', ViewSightingMapOption, ViewSightingMapLayers, ViewSightingMapState);
//                });
//                var mapDefinitions = new Array();
//                function initMap(mapName) {
//                    if (mapDefinitions != null) {
//                        for (i in mapDefinitions) {
//                            if (mapDefinitions[i].mapId == mapName) {
//                                return initOpenlayersMap(mapDefinitions[i].divId, mapDefinitions[i].controlsId, mapDefinitions[i].mapOption, mapDefinitions[i].mapLayers, mapDefinitions[i].mapState);
//                            }
//                        }
//                        return null;
//                    }
//                }                



                map = initAnalyisPortalMap('mapDiv', 'mapNavDiv', mapOptions);
                //AddFeaturesToMap(map, geoJson);



                //                Input Coordinates: 14.979858398437, 58.042144775391 
                //                Output Coordinates: 1667550.209069, 7939862.226478                
                // Google.v3 uses EPSG:900913 as projection, so we have to
                // transform our coordinates
                map.setCenter(new OpenLayers.LonLat(14.979858398437, 58.042144775391).transform(
                    new OpenLayers.Projection("EPSG:4326"),
                    map.getProjectionObject()
                ), 5);
                GetAllGeoJSONSites(map);
            });
            
        </script>
    </head>
    <body>

        <h3>GeoJson with Google maps</h3>
        
        
        <div class="clear clearfix" style="margin-top:7px; width: 780px;">
            <div id="mapNavDiv" class="olControlPanel"></div>
            <div class="clear" id="mapDiv" style="height: 500px; width: 780px; position:relative; z-index:400;"></div>
        </div>


    </body>
</html>