@using ArtDatabanken.WebApplication.AnalysisPortal.Utils.Helpers
@using ArtDatabanken.WebApplication.AnalysisPortal.ViewModels.Calculation
@using ArtDatabanken.WebApplication.AnalysisPortal.ViewModels.DataProviders.Map
@using Resources
@model ArtDatabanken.WebApplication.AnalysisPortal.ViewModels.Result.WfsGridStatisticsMapViewModel

@{
    ViewBag.Title = Resource.ResultViewWfsGridMap;
    ViewBag.Description = Resource.ResultWfsGridStatisticsMapDescription;
}

<div class="titled-toolbar">
    @Html.Partial("BreadCrumbTitle_Partial", SessionHandler.CurrentPage)
    <div class="btn-toolbar page-toolbar">                
        <button id="btnExpand" class="btn toolbarButton"><i class="icon-fullscreen"></i> &nbsp;@Resource.SharedFullScreenMode</button>
        <button id="btnHistogramBinSettings" class="btn toolbarButton" disabled="disabled"><i class="icon-wrench"></i> &nbsp;@Resource.SharedSettings</button>
    </div>
</div>


<div id="gridParametersPanel" class="datapanel"></div>

<div id="gridSizeDiv" class="calculationInputDiv" style="width:160px;">
    <h5>@Resource.GridStatisticsGridSize (m)</h5>    
    <p><input type="hidden" id="gridSizeSelectList" value="@Model.GridSize" style="width:150px" data-placeholder="@Resource.GridStatisticsSelectGridSize"/></p>
</div>
<div id="coordinateSystemDiv" class="calculationInputDiv" style="width:180px;">
<h5>@Resource.GridStatisticsSelectCoordinateSystem</h5>
<select id="coordinateSystemSelectList" style="width:170px">
    @foreach (CoordinateSystemViewModel coordinateSystem in Model.CoordinateSystems)
    {
        <option value="@coordinateSystem.Id" @if (coordinateSystem.Selected) { <text>selected="selected"</text> }>@coordinateSystem.Name</option>    
    }    
</select>
</div>
<div id="selectedWfsLayerDiv" class="calculationInputDiv" style="width:250px;">
    <h5>@Resource.SharedLayer</h5>
    <select id="selectedWfsLayer" style="width: 240px;">
        <option @if (Model.WfsGridStatisticsLayerId == null || Model.WfsLayers.Count == 0)
                {
                    <text>selected="selected"</text>
                } value="-1">@Resource.SharedSelectLayer</option>

        @{
            var serviceLayers = Model.WfsLayers.Where(l => !l.IsFile).ToArray();

            if (serviceLayers.Length != 0)
            {
                <optgroup label="@Resource.SharedServices">
                    @foreach (var layer in serviceLayers)
                    {
                        <option @if (Model.WfsGridStatisticsLayerId == layer.Id) { <text> selected="selected" </text>  } value="@layer.Id">@layer.Name</option>
                    }

                </optgroup>
            }
            var fileLayers = Model.WfsLayers.Where(l => l.IsFile).ToArray();
            if (fileLayers.Length != 0)
            {
                <optgroup label="@Resource.SharedUploadedFiles">
                    @foreach (var layer in fileLayers)
                    {
                        <option @if (Model.WfsGridStatisticsLayerId == layer.Id) { <text> selected="selected" </text>   } value="@layer.Id">@layer.Name</option>
                    }

                </optgroup>
            }
        }
       
    </select>
</div>

<div id="wfsGridStatisticsCalculationModeDiv" class="calculationInputDiv" style="width: 150px;">
    <h5>@Resource.GridStatisticsCalculation</h5>
    <select id="wfsGridStatisticsCalculationModeSelectBox" style="width: 140px;">
        <option value="Count" selected="selected">@Resource.GridStatisticsCalculationModeCount</option>
        <option value="Length">@Resource.GridStatisticsCalculationModeLength</option>
        <option value="Area">@Resource.GridStatisticsCalculationModeArea</option>
    </select>
</div>

<button id="runWfsQuery" class="btn action-button"><i class="icon-play"></i> &nbsp;@Resource.SharedCalculate</button>

    

@*<div>
    <button id="runWfsQuery" class="btn action-button"><i class="icon-play"></i> &nbsp;@Resource.SharedCalculate</button>
    <div style="vertical-align:top; display: inline-block;">
        <span style="margin-left: 20px;">Visa:</span>
        <select id="wfsGridStatisticsCalculationModeSelectBox">
            <option value="Count" selected="selected">Antal</option>
            <option value="Length">Längd</option>
            <option value="Area">Area</option>
        </select>
    </div>
</div>*@


<div id="mapControl" class="clearfix map" style="width: 660px; height: 500px;" >
    <div id="mapNavDiv" class="olControlPanel"></div>    
    <div class="clearfix" id="mapDiv"></div>
</div>
<div id="mainPanel" class="datapanel" style="margin-top: 10px;"></div>


<div id="gridStatisticsLegendDiv" style="width: 120px; padding:10px;"></div>

<div id="opacityPanel" style="padding:5px; margin-bottom: 10px;">
    @Resource.SharedTransparency  
    <select id="gridMapOpacitySelectList" style="width: 100px;">        
        <option value="100">100 %</option>
        <option value="90">90 %</option>
        <option value="80">80 %</option>
        <option value="70">70 %</option>
        <option value="60">60 %</option>
        <option value="50">50 %</option>        
        <option value="40">40 %</option>
        <option value="30" selected="selected">30 %</option>
        <option value="20">20 %</option>        
        <option value="10">10 %</option>
        <option value="0">0 %</option>        
    </select>
    
    <div>
        <input type="checkbox" id="DrawGridMapCellBorderCheckbox"/>
        @Resource.GridMapDrawBorders
    </div>
    
</div>    

@Html.Partial("CoordinateSystemSelectBox_Partial", "toolbarCoordinateSystemSelectBox")

<script type="text/javascript">
    var map;
    var gridResult;
    var gridCellOpacity = 0.3;
    var histogram = null;
    var wfsGridStatisticsCalculationMode;
    @Html.Raw(Html.DeclareWfsLayersJsArray("wfsLayers"))
    @Html.Raw(Html.DeclareWmsLayersJsArray("wmsLayers"))

    $(document).ready(function () {
        $('#runWfsQuery').click(runWfsQuery);
        createMap();
        createMainPanel();
        AnalysisPortal.GIS.startUpdateMapSizeTimer(map);
        $("#gridMapOpacitySelectList").change(function () {
            var opacity = $('#gridMapOpacitySelectList').val();
            gridCellOpacity = opacity / 100;
            redrawGridMap();
        });
        $('#btnExpand').click(function() {
            AnalysisPortal.fullScreen(mainPanel, containerPanel);
        });

        $(window).bind('beforeunload', function () {
            AnalysisPortal.GIS.saveMapState();
        });

        $("#DrawGridMapCellBorderCheckbox").change(function () {
            redrawGridMap();
        });
        $('#btnHistogramBinSettings').click(function () {
            AnalysisPortal.showDialog({
                title: '@Resource.HistogramBinSettingsTitle',
                url: '@Url.Action("HistogramBinSettingsDialog", "Result")'
            });
        });
        $('#wfsGridStatisticsCalculationModeSelectBox').change(function() {
            histogram = null;
            redrawGridMap();
        });
        initCoordinateSelectBox();
        initGridSizeSelectList();
        createLayout();
    });

    function runWfsQuery() {
        var layer = map.gridLayer;
        AnalysisPortal.GIS.clearLayer(layer);
        histogram = null;
        getGridData();
    }

    function initCoordinateSelectBox() {
        $('#toolbarCoordinateSystemSelectBox').change(function () {
            var coordinateSystemId = $(this).val();
            var url = '@Url.Action("UpdateCoordinateSystem", "Format", new { returnUrl = ViewContext.HttpContext.Request.Url.PathAndQuery})';
            url += "&coordinateSystemId=" + coordinateSystemId;
            window.location.href = url;
        });
        $("#toolbarCoordinateSystemSelectBox").appendTo("#mapNavDiv");
        $("#toolbarCoordinateSystemSelectBox").css('visibility', 'visible');
    }

    function redrawGridMap() {
        if (gridResult == null)
            return;
        AnalysisPortal.GIS.showWaitMsg(AnalysisPortal.Resources.SharedWait);
        setTimeout(function() {
            var layer = map.gridLayer;
            AnalysisPortal.GIS.clearLayer(layer);
            addGridData(layer, gridResult.Cells);
            AnalysisPortal.GIS.hideWaitMsg();
        }, 100);

    }

    function createLegend(histogram) {
        var $legendTable = AnalysisPortal.GIS.createGridStatisticsLegendTable(histogram);
        var $legendDiv = $("#gridStatisticsLegendDiv");
        $legendDiv.empty();
        $legendTable.appendTo($legendDiv);
    }


    function getPageSettingsObject() {
        var coordinateSystemId = $('#coordinateSystemSelectList').val();
        if (coordinateSystemId < 0) {
            coordinateSystemId = null;
        }

        var gridSize = $('#gridSizeSelectList').val();
        var wfsLayerId = $('#selectedWfsLayer').val();

        if (isNaN(gridSize))
            gridSize = null;
        var data = {
            CoordinateSystemId: coordinateSystemId,
            GridSize: gridSize,
            WfsLayerId: wfsLayerId
        };
        return data;
    }

    function applyHistogramBinSettingsChanges(histogramBinSettings) {
        AnalysisPortal.GIS.showWaitMsg(AnalysisPortal.Resources.SharedWait);
        setTimeout(function () {
            var layer = map.gridLayer;
            AnalysisPortal.GIS.clearLayer(layer);
            addGridDataWithPredefinedBins(layer, gridResult.Cells, histogramBinSettings);
            AnalysisPortal.GIS.hideWaitMsg();
        }, 100);
    }

    function getGridData() {
        var settings = getPageSettingsObject();
        if (settings.WfsLayerId < 0) {
            AnalysisPortal.showErrorMsg('You must select a layer');
            return;
        }
        AnalysisPortal.GIS.showWaitMsg(AnalysisPortal.Resources.SharedLoadingData);

        AnalysisPortal.makeAjaxCall({

            url: '@Url.Action("GetWfsGridCountAsJSON")',
            params: {
                coordinateSystemId: settings.CoordinateSystemId,
                gridSize: settings.GridSize,
                wfsLayerId: settings.WfsLayerId
            },
            showWaitMessage: false
            },
            function (result) {
                AnalysisPortal.GIS.hideWaitMsg();
                gridResult = result.data;
                var gridCells = result.data.Cells;
                convertAllValuesToInteger(gridCells);

                if (gridCells == null || gridCells.length == 0) {
                    AnalysisPortal.showMsg('No grid cells in result. Can not create grid statistics.');
                    return;
                }
                addGridData(map.gridLayer, gridCells);
                AnalysisPortal.GIS.zoomToFeaturesInVisibleVectorLayers(map);
            }
         );
    }

    function convertAllValuesToInteger(gridCells) {
        for (var i = 0; i < gridCells.length; i++) {
            var cell = gridCells[i];
            cell.FeatureArea = Math.round(cell.FeatureArea);
            cell.FeatureLength = Math.round(cell.FeatureLength);
            cell.FeatureCount = Math.round(cell.FeatureCount);
            //cell.FeatureCount = parseInt()
            //values.push(cell[propertyName]);
        }
    }

    function addGridData(layer, gridCells) {
        if (gridCells == null || gridCells.length == 0)
            return;
        wfsGridStatisticsCalculationMode = getWfsGridStatisticsCalculationMode();

        if (histogram == null) {
            histogram = AnalysisPortal.GIS.calculateHistogram(gridCells, wfsGridStatisticsCalculationMode.DataName, AnalysisPortal.Statistics.ColorInterpolationMode.pow3);
            //histogram = AnalysisPortal.GIS.calculateHistogram(gridCells, 'FeatureCount', AnalysisPortal.Statistics.ColorInterpolationMode.pow3);
        }
        drawGrid(layer, gridCells, histogram);
    }

    function addGridDataWithPredefinedBins(layer, gridCells, histogramBinSettings) {
        if (gridCells == null || gridCells.length == 0)
            return;
        wfsGridStatisticsCalculationMode = getWfsGridStatisticsCalculationMode();

        histogram = AnalysisPortal.GIS.calculateHistogramWithPredefinedBins(gridCells, wfsGridStatisticsCalculationMode.DataName, histogramBinSettings.histogramBins, histogramBinSettings.startColor, histogramBinSettings.endColor);
        //histogram = AnalysisPortal.GIS.calculateHistogramWithPredefinedBins(gridCells, 'FeatureCount', histogramBinSettings.histogramBins, histogramBinSettings.startColor, histogramBinSettings.endColor);
        histogram.colorInterpolationMode = histogramBinSettings.colorInterpolationMode;
        drawGrid(layer, gridCells, histogram);
    }

    function getWfsGridStatisticsCalculationMode() {
        var calculationMode = $('#wfsGridStatisticsCalculationModeSelectBox').val();
        switch (calculationMode) {
            case "Count":
                return {
                    PropertyName: "Count",
                    DataName: "FeatureCount",
                    CalculationMode: "Integer"
                };
            case "Length":
                return {
                    PropertyName: "Length",
                    DataName: "FeatureLength",
                    CalculationMode: "Real"
                };
            case "Area":
                return {
                    PropertyName: "Area",
                    DataName: "FeatureArea",
                    CalculationMode: "Real"
                };
            default:
                return {
                    PropertyName: "Count",
                    DataName: "FeatureCount",
                    CalculationMode: "Integer"
                };
        }
    }

    function drawGrid(layer, gridCells, histogram) {
        wfsGridStatisticsCalculationMode = getWfsGridStatisticsCalculationMode();
        var gridCellBorderOpacity = 0;
        if ($("#DrawGridMapCellBorderCheckbox").is(":checked")) {
            gridCellBorderOpacity = 1;
        }
        $('#btnHistogramBinSettings').removeAttr('disabled');
        createLegend(histogram);
        layer.styleMap = AnalysisPortal.GIS.createGridStatisticsStyleRules(histogram, wfsGridStatisticsCalculationMode.PropertyName, gridCellOpacity, gridCellBorderOpacity);
        var cells = [];
        for (var i = 0; i < gridCells.length; i++) {
            var cell = gridCells[i];

            var points = [
                new OpenLayers.Geometry.Point(cell.BoundingBox[0][0], cell.BoundingBox[0][1]),
                new OpenLayers.Geometry.Point(cell.BoundingBox[1][0], cell.BoundingBox[1][1]),
                new OpenLayers.Geometry.Point(cell.BoundingBox[2][0], cell.BoundingBox[2][1]),
                new OpenLayers.Geometry.Point(cell.BoundingBox[3][0], cell.BoundingBox[3][1])
            ];

            var ring = new OpenLayers.Geometry.LinearRing(points);
            var polygon = new OpenLayers.Geometry.Polygon([ring]);
            var feature = new OpenLayers.Feature.Vector(polygon, { Count: cell.FeatureCount, Area: cell.FeatureArea, Length: cell.FeatureLength }); //, style); //, null, style); //, null, style);
            cells.push(feature);
        }
        map.gridLayer.addFeatures(cells);
    }


    function createMap() {
        var toolsOptions = {
            ShowMousePosition: false,
            UseNavigationHistory: true,
            ShowCreatePolygonTools: false,
            ShowSelectManyControl: false,
            SelectByPolygon: false, // not used yet
            LayerOptions: {
                UseSwitcher: true,
                OpenSwitcher: true
            },
            OvMapOptions: {
                ShowOvMap: false,
                UseOvMap: false
            }
        };

        var vectorLayers = [{
            id: VectorLayers.GridLayer,
            visible: true,
            initVisibilityState: 1
        }
        ];

        var addSpartialFilterLayer = @Model.AddSpartialFilterLayer.ToString().ToLower();

        if (addSpartialFilterLayer) {
            vectorLayers.push({
                id: VectorLayers.SpatialFilter,
                mainLayer: true,
                visible: false
            });
        }

        vectorLayers = vectorLayers.concat(wfsLayers);
        map = AnalysisPortal.GIS.initMap({
            cookieName: 'WfsGridStatisticsMap',
            toolsOptions: toolsOptions,
            vectorLayers: vectorLayers,
            wmsLayers: wmsLayers
        });
        // Activate drag control
        //map.selectControl.deactivate();
        //map.dragPanControl.activate();
    }

    var mapPanel;
    var containerPanel;
    var mainPanel;
    function createMainPanel() {
        Ext.suspendLayouts();

        mapPanel = AnalysisPortal.createHtmlPanel('mapControl', {
            title: '@Resource.SharedMap',
            region: 'center',
            width: 560
        });

        var legendPanel = AnalysisPortal.createHtmlPanel('gridStatisticsLegendDiv', {
            title: '@Resource.SharedLegend',
            region: 'north',
            height: 280,
            autoScroll: true
        });

        var opacityPanel = AnalysisPortal.createHtmlPanel('opacityPanel', {
            title: '@Resource.SharedSettings',
            region: 'south',
            height: 100,
            width: 200
        });

        var propertyGrid = createPropertyGrid();

        var legendContainer = AnalysisPortal.createLayoutContainer([legendPanel, propertyGrid, opacityPanel], {
            width: 220,
            layout: "border",
            region: 'east',
            collapsible: false
        });

        containerPanel = AnalysisPortal.createLayoutContainer([mapPanel, legendContainer], {
            layout: "border",
            collapsible: false
        });

        mainPanel = AnalysisPortal.createMainPanel('mainPanel', {
            width: AnalysisPortal.DefaultContentWidth,
            height: 580,
            autoDestroy: false,
            collapsible: false,
            items: [containerPanel]
        });

        Ext.resumeLayouts(true);
        return mainPanel;
    }

    function initGridSizeSelectList() {
        $("#gridSizeSelectList").select2({
            createSearchChoice: function (term, data) {
                if ($(data).filter(function () {
                    return this.text.localeCompare(term) === 0;
                }).length === 0) {
                    var str = term.replace(/\s/g, ''); // remove white space
                    var num = parseInt(str);
                    if (isNaN(num)) {
                        return null;
                    }
                    var strNum = AnalysisPortal.integerWithThousandSeparator(num);
                    return { id: num, text: strNum };
                }
                return null;
            },
            multiple: false,
            data: [{ id: 1000, text: '1 000' }, { id: 5000, text: '5 000' }, { id: 10000, text: '10 000' }, { id: 100000, text: '100 000' }],
            initSelection: function (element, callback) {
                var num = parseInt(element.val());
                if (isNaN(num)) {
                    return;
                }
                var strNum = AnalysisPortal.integerWithThousandSeparator(num);
                callback({ id: num, text: strNum });
            }
        });
    }

    function createLayout() {

        var gridSizeControl = AnalysisPortal.createHtmlPanel('gridSizeDiv', {
            title: "",
            region: 'west',
            flex: 1
        });

        var coordinateSystemControl = AnalysisPortal.createHtmlPanel('coordinateSystemDiv', {
            title: "",
            region: 'east',
            flex: 1
        });

        var selectedWfsLayerControl = AnalysisPortal.createHtmlPanel('selectedWfsLayerDiv', {
            title: "",
            region: 'east',
            flex: 1
        });

        var wfsGridStatisticsCalculationModeControl = AnalysisPortal.createHtmlPanel('wfsGridStatisticsCalculationModeDiv', {
            title: "",
            region: 'east',
            flex: 1
        });


        var containerPanel = AnalysisPortal.createLayoutContainer([gridSizeControl, coordinateSystemControl, selectedWfsLayerControl, wfsGridStatisticsCalculationModeControl], {
            layout: {
                type: 'hbox',
                align: 'stretch',
                pack: 'start'
            },
            collapsible: false
        });

        AnalysisPortal.createMainPanel('gridParametersPanel', {
            title: '@Resource.GridStatisticsParameters',
            width: AnalysisPortal.DefaultContentWidth,
            items: [containerPanel],
            collapsible: false
        });

    }

    function createPropertyGrid() {
        AnalysisPortal.Models.defineKeyValuePairModel();
        map.selectedFeatureStore = Ext.create('Ext.data.Store', {
            autoLoad: true,
            model: 'KeyValuePair',
            proxy: {
                type: 'memory',
                reader: {
                    type: 'json'
                }
            }
        });

        var propertyGrid = new Ext.grid.GridPanel({
            title: "@Resource.SharedData",
            id: 'SpeciesObservationPropertyGrid',
            region: 'center',
            store: map.selectedFeatureStore,
            sortableColumns: false,
            height: 200,
            //flex: 1,
            //resizable: true,
            //plugins: "bufferedrenderer",
            //collapsible: true,
            //collapsed: true,
            //animCollapse: true,
            //titleCollapse: true,
            //floatable: false, // if true the panel will expand over the map and half the map won't be shown
            viewConfig: {
                enableTextSelection: true
            },

            columns: [{
                header: "@Resource.SharedField",
                width: 140,
                dataIndex: "Key"
            }, {
                header: "@Resource.SharedValue",
                flex: 1,
                dataIndex: "Value",
                renderer: function (val, meta, record, rowIndex, colIndex, store) {
                    return '<div style="white-space:normal !important; word-wrap:break-word !important;">' + val + '</div>';
                }
            }],
            listeners: {
                collapse: function (p, eOpts) {

                },
                expand: function (p, eOpts) {

                }
            }
        });
    //forceFit: true,
    //collapseFirst: true,
        map.selectedFeatureGrid = propertyGrid;
        return propertyGrid;
    }

</script>