using System;

namespace ArtDatabanken.Data
{
    /// <summary>
    /// Information about a user.
    /// A user can be either a human (=Person) or a computer program (=Application).
    /// It represents the user account for a single person or application.
    /// </summary>
    public interface IUser : IDataId32
    {
        /// <summary>
        /// AdministrationRoleId
        /// </summary>
        Int32? AdministrationRoleId
        { get; set; }

        /// <summary>
        /// Account activated.
        /// Is set to false by default. Is set to true by Activation method when User account is sucessfully activated.
        /// </summary>
        Boolean IsAccountActivated
        { get; set; }

        /// <summary>
        /// Application id.
        /// Nullable, but should have a value if UserType is set to Application.
        /// </summary>
        Int32? ApplicationId
        { get; set; }

        /// <summary>
        /// Activation key. 
        /// Not Null. Is generated by user web service when a user is crated.
        /// </summary>
        String ActivationKey
        { get; set; }

        /// <summary>
        /// Authentication type.
        /// Default type is Form Autentication. Currently this is the only type handled.
        /// </summary>
        Int32 AuthenticationType
        { get; set; }

        /// <summary>
        /// Get data context.
        /// </summary>
        IDataContext DataContext
        { get; set; }

        /// <summary>
        /// E-mail address.
        /// If User type is Person, E-mail address is mandatory.
        /// (EmailAddress is allways equal to Person.EmailAddress).
        /// </summary>
        String EmailAddress
        { get; set; }

        /// <summary>
        /// GUID (Globally Unique Identifier) for this object.
        /// It is a LSID, which is unique for each version of the record holding the information included in this object. 
        /// It is updated automatically by database each time information is saved.
        /// </summary>
        String GUID
        { get; set; }

        /// <summary>
        /// Person id.
        /// Nullable, but should have a value if UserType is set to Person.
        /// </summary>
        Int32? PersonId
        { get; set; }

        /// <summary>
        /// Show email.
        /// Is set to False by default in database. If False E-mail should not be exposed to public users.
        /// It should only be set to true by the user if the user wants to expose its E-mail to all users.
        /// </summary>
        Boolean ShowEmailAddress
        { get; set; }

        /// <summary>
        /// UserType: Application or Person.
        /// Not Null. Value is set when object is created.
        /// </summary>
        UserType Type
        { get; set; }

        /// <summary>
        /// Information about create/update of user.
        /// </summary>
        IUpdateInformation UpdateInformation
        { get; set; }

        /// <summary>
        /// User name.
        /// Mandatory unique identifier for the user account. The value is set by method during registration.  
        /// </summary>
        String UserName
        { get; set; }

        /// <summary>
        /// Date user is valid from. Not Null. Is set to date created by default.
        /// </summary>
        DateTime ValidFromDate
        { get; set; }

        /// <summary>
        /// Date user is valid to. Not Null. Is set to date created + 100 years by default.
        /// </summary>
        DateTime ValidToDate
        { get; set; }

        /// <summary>
        /// Get person.
        /// May be null if no person is connected to the user.
        /// </summary>
        /// <param name="userContext">User context.</param>
        /// <returns>Person.</returns>
        IPerson GetPerson(IUserContext userContext);

        /// <summary>
        /// Connect a person to this user.
        /// </summary>
        /// <param name="userContext">User context.</param>
        /// <param name="person">Person.</param>
        void SetPerson(IUserContext userContext, IPerson person);
    }
}
