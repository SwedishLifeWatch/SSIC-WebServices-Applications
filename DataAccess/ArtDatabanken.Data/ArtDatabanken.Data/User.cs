using System;

namespace ArtDatabanken.Data
{
    /// <summary>
    /// Information about a user.
    /// A user can be either a human (=Person) or a computer program (=Application).
    /// It represents the user account for a single person or application.
    /// </summary>
    [Serializable()]
    public class User : IUser
    {
        private Int32? _personId;
        private IPerson _person;

        /// <summary>
        /// Create a User instance.
        /// </summary>
        /// <param name="userContext">User context.</param>
        public User(IUserContext userContext)
        {
            // Set default values.
            AdministrationRoleId = null;
            ApplicationId = null;
            ActivationKey = null;
            AuthenticationType = 0; // TODO change this to a real value.
            DataContext = new DataContext(userContext);
            EmailAddress = null;
            GUID = Settings.Default.UserGUIDTemplate;
            Id = Int32.MinValue;
            IsAccountActivated = false;
            _person = null;
            _personId = null;
            ShowEmailAddress = false;
            Type = UserType.Person;
            UpdateInformation = new UpdateInformation();
            UserName = null;
            ValidFromDate = DateTime.Now;
            ValidToDate = ValidFromDate + new TimeSpan(Settings.Default.ValidToDateYearIncrement * 365, 0, 0, 0);
        }

        /// <summary>
        /// Administration role id. 
        /// Optional. It is set by super administrators in order to enable delegation of the administration of this object.
        /// </summary>
        public Int32? AdministrationRoleId
        { get; set; }

        /// <summary>
        /// Application id.
        /// Nullable, but should have a value if UserType is set to Application.
        /// </summary>
        public Int32? ApplicationId
        { get; set; }

        /// <summary>
        /// Activation key. 
        /// Not Null. Is generated by user web service when a user is crated.
        /// </summary>
        public String ActivationKey
        { get; set; }

        /// <summary>
        /// Authentication type.
        /// Default type is Form Autentication. Currently this is the only type handled.
        /// </summary>
        public Int32 AuthenticationType
        { get; set; }

        /// <summary>
        /// Data context.
        /// </summary>
        public IDataContext DataContext
        { get; set; }

        /// <summary>
        /// E-mail address.
        /// If User type is Person, E-mail address is mandatory
        /// (EmailAddress is allways equal to Person.EmailAddress).
        /// </summary>
        public String EmailAddress
        { get; set; }

        /// <summary>
        /// GUID (Globally Unique Identifier) for this object.
        /// It is a LSID, which is unique for each version of the record holding the information included in this object. 
        /// It is updated automatically by database each time information is saved.
        /// </summary>
        public String GUID
        { get; set; }

        /// <summary>
        /// Id for this user. Value is generated by the database when the information representing the User is inserted.
        /// </summary>
        public Int32 Id
        { get; set; }

        /// <summary>
        /// Account activated.
        /// Not null. Is set to false by default. Is set to true by Activation method when User account is sucessfully activated.
        /// </summary>
        public Boolean IsAccountActivated
        { get; set; }

        /// <summary>
        /// Person id.
        /// Nullable, but should have a value if UserType is set to Person.
        /// </summary>
        public Int32? PersonId
        {
            get
            {
                return _personId;
            }
            set
            {
                _personId = value;

                if ((!_personId.HasValue) ||
                    (_person.IsNotNull() &&
                     (_person.Id != _personId.Value)))
                {
                    // Clear person object.
                    _person = null;
                }

                if (_person.IsNotNull() &&
                    ((!_person.UserId.HasValue) ||
                     (_person.UserId.Value != Id)))
                {
                    // Update person object with user information.
                    _person.UserId = Id;
                }
            }
        }

        /// <summary>
        /// Show E-mail address.
        /// Is set to False by default in database. If False E-mail should not be exposed to public users.
        /// It should only be set to true by the user if the user wants to expose its E-mail to all users.
        /// </summary>
        public Boolean ShowEmailAddress
        { get; set; }

        /// <summary>
        /// UserType: Application or Person.
        /// Not Null. Value is set when object is created.
        /// </summary>
        public UserType Type
        { get; set; }

        /// <summary>
        /// Information about create/update of user.
        /// </summary>
        public IUpdateInformation UpdateInformation
        { get; set; }

        /// <summary>
        /// User name.
        /// Mandatory unique identifier for the user account. The value is set by method during registration. 
        /// </summary>
        public String UserName
        { get; set; }

        /// <summary>
        /// Date user is valid from. Not Null. Is set to date created by default.
        /// </summary>
        public DateTime ValidFromDate
        { get; set; }

        /// <summary>
        /// Date user is valid to. Not Null. Is set to date created + 100 years by default.
        /// </summary>
        public DateTime ValidToDate
        { get; set; }

        /// <summary>
        /// Get person.
        /// May be null if no person is connected to the user.
        /// </summary>
        /// <param name="userContext">User context.</param>
        /// <returns>Person.</returns>
        public IPerson GetPerson(IUserContext userContext)
        {
            if (_person.IsNull() && PersonId.HasValue)
            {
                // Get person object.
                _person = CoreData.UserManager.GetPerson(userContext, PersonId.Value);
                PersonId = _person.Id;
            }
            return _person;
        }

        /// <summary>
        /// Connect a person to this user.
        /// </summary>
        /// <param name="userContext">User context.</param>
        /// <param name="person">Person.</param>
        public void SetPerson(IUserContext userContext, IPerson person)
        {
            _person = person;
            if (_person.IsNull())
            {
                PersonId = null;
            }
            else
            {
                PersonId = person.Id;
            }
        }
    }
}
