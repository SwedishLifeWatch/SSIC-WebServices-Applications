using System;
using System.Collections;
using System.Linq;

namespace ArtDatabanken.Data
{
    /// <summary>
    /// List class for the ISpeciesFact interface.
    /// </summary>
    [Serializable]
    public class SpeciesFactList : DataId32List<ISpeciesFact>
    {
        /// <summary>
        /// Maps identifiers to ISpeciesFacts.
        /// </summary>
        private Hashtable _identifierHashTable;

        /// <summary>
        /// Constructor for the SpeciesFactList class.
        /// </summary>
        public SpeciesFactList()
            : this(true)
        {
        }

        /// <summary>
        /// Constructor for the SpeciesFactList class.
        /// </summary>
        /// <param name='optimize'>
        /// Indicates if speed optimization should be turned on.
        /// This optimization assumes that each identifier only
        /// occurs once in the list.
        /// </param>
        public SpeciesFactList(Boolean optimize)
            : base(optimize)
        {
            if (Optimize)
            {
                _identifierHashTable = new Hashtable();
            }
        }

        /// <summary>
        /// Add species fact to list.
        /// </summary>
        /// <param name='speciesFact'>Species fact to add.</param>
        public new void Add(ISpeciesFact speciesFact)
        {
            if (speciesFact.IsNotNull())
            {
                if (Optimize)
                {
                    _identifierHashTable.Add(speciesFact.Identifier, speciesFact);
                }

                base.Add(speciesFact);
            }
        }

        /// <summary>
        /// Add a collection of data objects to the list.
        /// Override method in base class.
        /// </summary>
        /// <param name='collection'>The collection to add.</param>
        public void AddRange(ICollection collection)
        {
            if (collection.IsNotEmpty())
            {
                foreach (Object value in collection)
                {
                    if (value.IsNotNull() && (value is ISpeciesFact))
                    {
                        Add(((ISpeciesFact)value));
                    }
                }
            }
        }

        /// <summary>
        /// Clear the collection of data objects.
        /// Override method in base class.
        /// </summary>
        public new void Clear()
        {
            if (Optimize)
            {
                _identifierHashTable.Clear();
            }

            base.Clear();
        }

        /// <summary>
        /// Test if species fact with a specified identifier is in the list.
        /// This unique identifier is a string which can be generated by the method GetSpeciesFactIdentifier.
        /// </summary>
        /// <param name="identifier">Identifier for requested species fact.</param>
        /// <returns>True if species fact is in the list.</returns>
        public Boolean Exists(String identifier)
        {
            if (Optimize)
            {
                return _identifierHashTable[identifier].IsNotNull();
            }
            else
            {
                if (this.IsNotEmpty())
                {
                    foreach (ISpeciesFact speciesFact in this)
                    {
                        if (speciesFact.Identifier == identifier)
                        {
                            // Data found. Return it.
                            return true;
                        }
                    }
                }

                return false;
            }
        }

        /// <summary>
        /// Get species fact with a specified identifier.
        /// This unique identifier is a string which can be generated by the method GetSpeciesFactIdentifier.
        /// </summary>
        /// <param name="identifier">Identifier for requested species fact.</param>
        /// <returns>Requested species fact.</returns>
        public ISpeciesFact Get(String identifier)
        {
            Object value;

            if (Optimize)
            {
                value = _identifierHashTable[identifier];
                if (value.IsNotNull())
                {
                    return (ISpeciesFact)value;
                }
            }
            else
            {
                if (this.IsNotEmpty())
                {
                    foreach (ISpeciesFact speciesFact in this)
                    {
                        if (speciesFact.Identifier == identifier)
                        {
                            // Data found. Return it.
                            return speciesFact;
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Get species fact with a unique combination of parameters.
        /// </summary>
        /// <param name="taxon">Taxon for requested species fact.</param>
        /// <param name="individualCategory">Individual Category for requested species fact.</param>
        /// <param name="factor">Factor for requested species fact.</param>
        /// <param name="host">Host for the requested species fact.</param>
        /// <param name="period">Period for the requested species fact.</param>
        /// <returns>Requested species fact.</returns>
        public ISpeciesFact Get(ITaxon taxon,
                                IIndividualCategory individualCategory,
                                IFactor factor,
                                ITaxon host,
                                IPeriod period)
        {
            String identifier;

            identifier = CoreData.SpeciesFactManager.GetSpeciesFactIdentifier(taxon,
                                                                              individualCategory,
                                                                              factor,
                                                                              host,
                                                                              period);
            return Get(identifier);
        }

        /// <summary>
        /// Method that counts the number of species facts in
        /// the list that has changed.
        /// </summary>
        /// <returns>Number of species facts in the list that has changed.</returns>
        public Int32 GetChangeCount()
        {
            Int32 count = 0;

            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact speciesFact in this)
                {
                    if (speciesFact.HasChanged)
                    {
                        ++count;
                    }
                }
            }

            return count;
        }

        /// <summary>
        /// Get all unique hosts in this species fact list.
        /// </summary>
        /// <returns>All unique hosts in this species fact list.</returns>
        public TaxonList GetHosts()
        {
            TaxonList hosts;

            hosts = new TaxonList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact speciesFact in this)
                {
                    if (speciesFact.Host.IsNotNull() &&
                        speciesFact.Host.Id != (Int32)(TaxonId.Life))
                    {
                        hosts.Merge(speciesFact.Host);
                    }
                }

                hosts.Sort();
            }

            return hosts;
        }

        /// <summary>
        /// Get the most resent modify date for the
        /// species facts in this list.
        /// </summary>
        /// <returns>Most resent modify date.</returns>
        public DateTime GetLastModifiedDate()
        {
            DateTime lastModifiedDate;

            lastModifiedDate = DateTime.MinValue;
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact speciesFact in this)
                {
                    if (speciesFact.ModifiedDate > lastModifiedDate)
                    {
                        lastModifiedDate = speciesFact.ModifiedDate;
                    }
                }
            }

            return lastModifiedDate;
        }

        /// <summary>
        /// Get a subset of this species fact list based on parameters.
        /// </summary>
        /// <param name="taxon">The taxon for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(ITaxon taxon)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.Taxon.Id == taxon.Id
                         orderby speciesFact.Factor.SortOrder ascending
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Get a subset of this species fact list based on parameters.
        /// </summary>
        /// <param name="factor">The factor for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(IFactor factor)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.Factor.Id == factor.Id
                         orderby speciesFact.Taxon.SortOrder ascending
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Get a subset of this species fact list based on parameters.
        /// </summary>
        /// <param name="individualCategory">The individual category for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(IIndividualCategory individualCategory)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.IndividualCategory.Id == individualCategory.Id
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Get a subset of this species fact list based on parameters.
        /// </summary>
        /// <param name="period">The period for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(IPeriod period)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.Period == period
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Get a subset of this species fact list based on parameters.
        /// </summary>
        /// <param name="taxon">The taxon for the requested species facts.</param>
        /// <param name="individualCategory">The individual category for the requested species facts.</param>
        /// <param name="factor">The factor for the requested species facts.</param>
        /// <param name="period">The period for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(ITaxon taxon,
                                               IIndividualCategory individualCategory,
                                               IFactor factor,
                                               IPeriod period)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.Taxon.Id == taxon.Id
                         && speciesFact.IndividualCategory.Id == individualCategory.Id
                         && speciesFact.Factor.Id == factor.Id
                         && (speciesFact.Period.IsNull() || (speciesFact.Period.Id == period.Id))
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Get a subset of this species fact list by quality.
        /// </summary>
        /// <param name="quality">The quality for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(ISpeciesFactQuality quality)
        {
            SpeciesFactList speciesFacts = new SpeciesFactList();
            var subset = from SpeciesFact speciesFact in this
                         where speciesFact.Quality == quality
                         select speciesFact;
            if (subset.IsNotNull() && subset.Any())
            {
                speciesFacts.AddRange(subset.ToArray());
            }

            return speciesFacts;
        }

        /// <summary>
        /// Method that returns a filtered version of this species fact list. The filtering is done on several parameters.
        /// </summary>
        /// <param name="individualCategories">Individual categories for the requested species facts.</param>
        /// <param name="periods">Periods for the requested species facts.</param>
        /// <param name="hosts">Hosts for the requested species facts.</param>
        /// <param name="taxa">Taxa for the requested species facts.</param>
        /// <param name="factors">Factors for the requested species facts.</param>
        /// <returns>A species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(IndividualCategoryList individualCategories,
                                               PeriodList periods,
                                               TaxonList hosts,
                                               TaxonList taxa,
                                               FactorList factors)
        {
            SpeciesFactList filteredList = new SpeciesFactList();

            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    bool go = true;

                    if (fact.IndividualCategory != null)
                    {
                        if ((individualCategories != null) && (individualCategories.Count > 0))
                        {
                            if (!individualCategories.Exists(fact.IndividualCategory))
                            {
                                go = false;
                            }
                        }
                    }

                    if (go)
                    {
                        if (fact.Period != null)
                        {
                            if ((periods != null) && (periods.Count > 0))
                            {
                                if (!periods.Exists(fact.Period))
                                {
                                    go = false;
                                }
                            }
                        }
                    }

                    if (go)
                    {
                        if (fact.Host != null)
                        {
                            // For the time being we only accept species facts that dont have a host.
                            go = false;

                            //if ((hosts != null) && (hosts.Count > 0))
                            //{
                            //    if (!hosts.Exists(fact.Host))
                            //        go = false;
                            //}
                        }
                    }

                    if (go)
                    {
                        if (fact.Taxon != null)
                        {
                            if ((taxa != null) && (taxa.Count > 0))
                            {
                                if (!taxa.Exists(fact.Taxon))
                                {
                                    go = false;
                                }
                            }
                        }
                    }

                    if (go)
                    {
                        if (fact.Factor != null)
                        {
                            if ((factors != null) && (factors.Count > 0))
                            {
                                if (!factors.Exists(fact.Factor))
                                {
                                    go = false;
                                }
                            }
                        }
                    }

                    if (go)
                    {
                        filteredList.Add(fact);
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Method that returns a filtered version of this species fact list.
        /// The filtering is done on individual categories.
        /// </summary>
        /// <param name="individualCategories">Individual categories for the requested species facts.</param>
        /// <returns>A filtered species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(IndividualCategoryList individualCategories)
        {
            if (individualCategories == null)
            {
                throw new ArgumentException("CategoryList is null", "individualCategories");
            }

            SpeciesFactList filteredList = new SpeciesFactList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    foreach (IIndividualCategory category in individualCategories)
                    {
                        if (fact.IndividualCategory.Id == category.Id)
                        {
                            filteredList.Add(fact);
                            break;
                        }
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Method that returns a filtered version of this
        /// species fact list. The filtering is done on Taxa.
        /// </summary>
        /// <param name="taxa">Taxa for the requested species facts.</param>
        /// <returns>A filtered species fact list.</returns>
        public SpeciesFactList GetSpeciesFactsByTaxa(TaxonList taxa)
        {
            if (taxa == null)
            {
                throw new ArgumentException("TaxonList is null", "taxa");
            }

            SpeciesFactList filteredList = new SpeciesFactList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    foreach (ITaxon taxon in taxa)
                    {
                        if (fact.Taxon.Id == taxon.Id)
                        {
                            filteredList.Add(fact);
                            break;
                        }
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Method that returns a filtered version of this species fact
        ///  list. The filtering is done on Periods.
        /// </summary>
        /// <param name="periods">Periods for the requested species facts.</param>
        /// <returns>A filtered species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(PeriodList periods)
        {
            if (periods == null)
            {
                throw new ArgumentException("PeriodList is null", "periods");
            }

            SpeciesFactList filteredList = new SpeciesFactList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    foreach (IPeriod period in periods)
                    {
                        if (fact.Period.Id == period.Id)
                        {
                            filteredList.Add(fact);
                            break;
                        }
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Method that returns a filtered version of this species fact
        /// list. The filtering is done on factors.
        /// </summary>
        /// <param name="factors">Factors for the requested species facts.</param>
        /// <returns>A filtered species fact list.</returns>
        public SpeciesFactList GetSpeciesFacts(FactorList factors)
        {
            if (factors == null)
            {
                throw new ArgumentException("FactorList is null", "factors");
            }

            SpeciesFactList filteredList = new SpeciesFactList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    foreach (IFactor factor in factors)
                    {
                        if (fact.Factor.Id == factor.Id)
                        {
                            filteredList.Add(fact);
                            break;
                        }
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Method that returns a filtered version of this species fact
        /// list. The filtering is done on hosts.
        /// </summary>
        /// <param name="hosts">Hosts for the requested species facts.</param>
        /// <returns>A filtered species fact list.</returns>
        public SpeciesFactList GetSpeciesFactsByHosts(TaxonList hosts)
        {
            if (hosts == null)
            {
                throw new ArgumentException("TaxonList is null", "hosts");
            }

            SpeciesFactList filteredList = new SpeciesFactList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact fact in this)
                {
                    foreach (ITaxon host in hosts)
                    {
                        if (fact.Host.Id == host.Id)
                        {
                            filteredList.Add(fact);
                            break;
                        }
                    }
                }
            }

            return filteredList;
        }

        /// <summary>
        /// Get all unique taxa in this species fact list.
        /// </summary>
        /// <returns>All unique taxa in this species fact list.</returns>
        public TaxonList GetTaxa()
        {
            TaxonList taxa;

            taxa = new TaxonList();
            if (this.IsNotEmpty())
            {
                foreach (ISpeciesFact speciesFact in this)
                {
                    if (speciesFact.Taxon.IsNotNull())
                    {
                        taxa.Merge(speciesFact.Taxon);
                    }
                }

                taxa.Sort();
            }

            return taxa;
        }

        /// <summary>
        /// Merge empty species fact into this species fact list.
        /// The empty species fact is defined by the specified
        /// combination of factor, host, individual category,
        /// period and taxon.
        /// </summary>
        /// <param name="userContext">
        /// Information about the user that makes this method call.
        /// </param>
        /// <param name="taxon">Taxon object of the species fact</param>
        /// <param name="individualCategory">Individual category object of the species fact</param>
        /// <param name="factor">Factor object of the species fact</param>
        /// <param name="host">Host taxon object of the species fact</param>
        /// <param name="period">Period object of the species fact</param>
        public void Merge(IUserContext userContext,
                          ITaxon taxon,
                          IIndividualCategory individualCategory,
                          IFactor factor,
                          ITaxon host,
                          IPeriod period)
        {
            String speciesFactIdentifier;

            speciesFactIdentifier = CoreData.SpeciesFactManager.GetSpeciesFactIdentifier(taxon,
                                                                                         individualCategory,
                                                                                         factor,
                                                                                         host,
                                                                                         period);
            if (!Exists(speciesFactIdentifier))
            {
                Add(CoreData.SpeciesFactManager.GetSpeciesFact(userContext,
                                                               taxon,
                                                               individualCategory,
                                                               factor,
                                                               host,
                                                               period));
            }
        }

        /// <summary>
        /// Remove species facts, from this list, that has bad quality.
        /// </summary>
        public void RemoveSpeciesFactsWithBadQuality()
        {
            Int32 index;

            if (this.IsNotEmpty())
            {
                for (index = Count - 1; index >= 0; index--)
                {
                    if (this[index].Quality.Id > ((Int32)(SpeciesFactQualityId.Acceptable)))
                    {
                        // Bad quality. Remove species fact from list.
                        RemoveAt(index);
                    }
                }
            }
        }
    }
}